<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gems | Josh Symonds]]></title>
  <link href="http://joshsymonds.com/blog/categories/gems/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2012-04-06T12:44:36-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elasticsearch and Percolation in Rails]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/25/elasticsearch-and-percolation-in-rails/"/>
    <updated>2012-03-25T11:39:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/25/elasticsearch-and-percolation-in-rails</id>
    <content type="html"><![CDATA[<p>Hipstamatic uses the pretty awesome Family Album feature for people to like and react to each others' photos. You can create either a magic album -- an album that matches to a combination of criteria including accounts, geolocation, tags and descriptions -- or a curated album, selecting photos directly that you want to include. The latter is a pretty straight-forward association and isn't very interesting to talk about, but I wanted to discuss briefly the methods we used to implement magic albums and what we finally settled on. It involved a lot of setting up elasticsearch and percolation, and ultimately I think it's a very durable, excellent solution for anyone wanting to index a lot of data and retrieve it extremely quickly.</p>

<!-- more -->


<p>Initially, magic albums were a set of complicated MySQL queries. I think anyone who's had experience with indexes in an enormous MySQL database knows where this one is going... its performance was terrible, and as more people created more albums our RDS instance started really chugging. The worst part was we were spending enormous amounts of time, energy, and money invested in a small part of our application, and it was having a cascade effect through the database ruining the rest of the user experience.</p>

<p>As a stopgap measure, we switched to using Redis lists to hold the association but kept the actual index in MySQL. Recently though we migrated away from MySQL completely to an index storage called <a href="http://www.elasticsearch.org/">elasticsearch</a>. Elasticsearch is awesome because it's built on Lucene, is incredibly easy to get going, and is very very powerful. I passed over search solutions like <a href="http://sphinxsearch.com/">Sphinx</a> and <a href="http://www.searchify.com/">Searchify</a> mostly because we aren't doing any text searching: all of the queries albums perform on photos are controlled by direct, matched fields. We just needed a great, simple engine for indexing them constantly and pulling results out quickly -- an engine that wouldn't bring the rest of our stack down if there was an indexing failure or if we were bombarded with many simultaneous queries.</p>

<p>Elasticsearch has given us all that and more. Using the amazing <a href="https://github.com/karmi/tire">tire</a> gem, it was simple to get our photo model set up correctly:</p>

<p>```ruby
class Photo &lt; ActiveRecord::Base
  include Tire::Model::Search</p>

<p>  mapping do</p>

<pre><code>indexes :id
indexes :lat_lng, :type =&gt; :geo_point
indexes :account_id
indexes :created_at, :type =&gt; :date
indexes :tags
</code></pre>

<p>  end
end
```</p>

<p>(The code here is changed slightly from its production form to redact business logic and simplify it.) Of course, the real magic takes place in the albums model. Albums are essentially saved queries, if you think about it: they should search for photos every time they're called. So we have a method to generate the query we're looking for:</p>

<p>```ruby
class Album &lt; ActiveRecord::Base</p>

<p>  def elasticsearch_query</p>

<pre><code>query = []
query &lt;&lt; {:terms =&gt; {:account_ids =&gt; query[:accounts]}} unless query[:accounts].blank?
query &lt;&lt; {:terms =&gt; {:tags =&gt; query[:tags]}} unless query[:tags].blank?
query &lt;&lt; {:range =&gt; {:created_at =&gt; {:from =&gt; query[:starts_at], :to =&gt; query[:ends_at]}}} unless query[:starts_at].blank? &amp;&amp; query[:ends_at].blank?
query &lt;&lt; {:geo_distance =&gt; {:lat_lng =&gt; [query[:lat].to_f, query[:lng].to_f.join(','), :distance =&gt; "#{query[:range]}km"}} unless query[:lat].blank? || query[:lng].blank?
query
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>These are all, in elasticsearch parlance, filters rather than queries: queries must look into data fields and perform operations in them, whereas filters just filter on a fields' value directly... exactly what I was looking for. <code>terms</code> instructs the filter parser that at least one of the select elements must match. <code>range</code>, as you can see, allows us to pull only photos within a certain date. <code>geo_distance</code> is particularly cool and lets us filter all photos by their geographic location.</p>

<p>Using this couldn't be simpler:</p>

<p>```ruby
class Album &lt; ActiveRecord::Base</p>

<p>  def elasticsearch_photos</p>

<pre><code>finder = Photo.search do
  query { all }
  filter(:and, elasticsearch_query) unless elasticsearch_query.empty?
  sort {by :created_at, "desc" }
end

finder.results
</code></pre>

<p>  end
```</p>

<p>Tada! Easy and simple searching inside your models. The performance gain for us was massive; elasticsearch has a ridiculously small memory footprint, but consistently returns responses to us in 50-60 milliseconds. Now that's performance!</p>

<p>Many of you might be wondering, though, how we get the reverse of this association. Albums have many (searched) photos; how does a photo know what album it's in? This was a stumbling block for the other search solutions I investigated, and I was concerned I would have to bust out the old, gimpy MySQL.</p>

<p>But elasticsearch to the rescue! It employs a very neat feature called <a href="http://www.elasticsearch.org/blog/2011/02/08/percolator.html">the percolator</a>. Percolation allows us to save searches as an index themselves, and then determine what objects match any of the saved searches. So, we save the search an album would conduct along with the album's ID into the photo percolator; then we can determine what queries a photo matches when we save it. It's really quite ingenuous and was, of course, ridiculously easy to set up:</p>

<p>```
class Album &lt; ActiveRecord::Base
  after_save :register_query</p>

<p>  def register_query</p>

<pre><code>Photo.index.register_percolator_query(self.id) do |q|
  q.filtered do
    query {all}
    filter(:and, elasticsearch_query) unless elasticsearch_query.empty?
  end
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This uses the same <code>elasticsearch_query</code> method as above (of course, since we want to save the same query into the database). And on the photo model, to use it, we just do:</p>

<p>```
class Photo &lt; ActiveRecord::Base</p>

<p>  def percolated_albums</p>

<pre><code>Album.find(Photo.index.percolate(self))
</code></pre>

<p>  end
end
```</p>

<p>This was a rather whirlwind tour, but I was really impressed at how easy it was to get elasticsearch set up properly. It really has added quite a lot to our stack and I look forward to using it on other domain problems (maybe even including full text search)! It was pretty easy to get it tested as well, but I think I'll save details on how I did that for another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Don't Use Haml]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/22/why-i-dont-use-haml/"/>
    <updated>2012-03-22T13:19:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/22/why-i-dont-use-haml</id>
    <content type="html"><![CDATA[<p>I initially thought of titling this post something more inflammatory, like "Why Haml Sucks" or "Only Losers Use Haml." But the truth is <a href="http://haml-lang.com/">Haml</a> does anything but suck. It's actually quite elegant; the syntax is clean, not needing closing tags is just really cool, and it's very fast to read. It seems like it would be an ideal language to replace HTML, just like SASS and CoffeeScript are abstractions of and (to a certain extent) replacements for CSS and JavaScript, respectively.</p>

<p>So why do I bang my head against my desk every time I see someone using it in a view?</p>

<!-- more -->


<h2>Indentation Sucks (Usually)</h2>

<p>Notice the cute little parenthetical up there? That's because I really do like CoffeeScript, which is just as whitespace-sensitive as Haml. So what's the difference?</p>

<p>CoffeeScript uses indentations to abstract away one of the worst "features" of JavaScript: the dreaded <code>})</code> sequences. Closing arguments and functions again and again is not only a headache, it happens so frequently that some sort of error is inevitable. Strict whitespace rules help us avoid errors in closure. Of course, the same argument can be made about HTML and Haml's whitespace rules, but there's another key difference here.</p>

<p>HTML closures indicate which tag they close. You don't have a forest of <code>)})})}</code>, which even if you indent correctly still won't tell you which parenthesis or bracket they're closing. Instead you have an obvious and syntactic declaration of which tag you're ending when you end it. You can argue that the tag closure is unnecessary (Haml seems largely based on this argument), but you're trading explicit tag closure for explicit whitespace restrictions...</p>

<p>And ultimately (and most damningly), whitespace restrictions make the document harder to read and understand than closing tags. If you have an extremely long page with many nested elements, Haml is very difficult to comprehend and consequently much harder to use.</p>

<h2>If It Ain't Broke...</h2>

<p>SASS and CoffeeScript fix serious errors and oversights in the implementations of their specific languages. CoffeeScript ensures correct lexical scoping of variables; SASS allows variable assignment and better selectors than CSS. Both are enormous improvements on the languages they compile into.</p>

<p>Haml doesn't add anything at all to HTML. There's no special Haml tags that do something HTML couldn't do by itself. It gives you a shortcut for the syntax, but that's essentially it.</p>

<p>And HTML really isn't that bad by itself. The syntax is already fairly clean and clear; it's not like we're lost in a field of, well, parenthesis and curly brackets. Tables can get a little muddy at times, but good HTML and CSS prevent documents from becoming unreadable -- and Haml doesn't offer any interesting or unique tools to improve readability, either.</p>

<h2>Designers Aren't Programmers</h2>

<p>But I think this is the biggest reason I don't use Haml. Frontend designers use CSS, and the best ones employ JavaScript (and program good JavaScript!) -- but every single one is going to be using HTML to create their pages. Eventually, if your site gets big, you're going to want a designer to do some pages for you... and they're not going to be producing Haml, they're going to be producing HTML.</p>

<p>Sure, you can change that HTML to Haml. But let me guarantee you, one day they'll want to change something, and at that point you do one of three things:</p>

<ol>
<li>Show them the Haml site, tell them to do it all in Haml, and pay for them learning it.</li>
<li>Take their design and convert it to Haml yourself and then incorporate it into the page.</li>
<li>Curse your unjust fate and just switch to erb and copypaste their changes in.</li>
</ol>


<p>As I said at the beginning, I like Haml. But it's a markup language for programmers, and ultimately the people who use HTML the most aren't programmers. SASS is barely a programming language, more like a set of syntactical shortcuts; and CoffeeScript appeals to those who program in JavaScript already. Haml just doesn't appeal to the correct audience to use its core feature set, which is a damn shame, because Haml really is pretty cool.</p>
]]></content>
  </entry>
  
</feed>
