<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubber | Josh Symonds]]></title>
  <link href="http://Veraticus.github.com/blog/categories/rubber/atom.xml" rel="self"/>
  <link href="http://Veraticus.github.com/"/>
  <updated>2012-02-23T13:31:54-06:00</updated>
  <id>http://Veraticus.github.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I Like Rubber]]></title>
    <link href="http://Veraticus.github.com/blog/2012/02/23/why-i-like-rubber/"/>
    <updated>2012-02-23T13:30:00-06:00</updated>
    <id>http://Veraticus.github.com/blog/2012/02/23/why-i-like-rubber</id>
    <content type="html"><![CDATA[<p>When I was analyzing tools to deploy applications into Amazon's elastic cloud, I settled on <a href="https://github.com/wr0ngway/rubber">rubber</a> as our EC2 provisioner of choice.</p>

<p>rubber has a lot going for it. It provides simple, close-to-the-metal server creation and bootstrapping; it's super easy to start a server with nothing more than:</p>

<p><code>bash
cap rubber:create ALIAS=fluttershy ROLES=unicorn
</code></p>

<p>And bootstrap it with all the software needed for that role with:</p>

<p><code>bash
cap rubber:bootstrap FILTER=fluttershy
</code></p>

<p>Of course, looking at command line magic doesn't tell you anything about how hard or easy it is to initially configure, but rubber is also pretty easy to figure out and get running. When you initially rubber-ize your project, you get an entire directory in config/ called rubber that contains all the configuration files, separated by role, that you can browse to figure out exactly what rubber is doing.</p>

<p>It's easy to extend, as well. Adding in hubot scripts to automatically start and stop our little Hipstabot was really painless and will make a good future post, I'm sure. The good part -- for me at least -- is how close it is to the servers and how well it ties in with Capistrano. There's no magic going on and there's almost nothing to learn: as long as you have an EC2 account, you can set up a server quickly and painlessly with rubber... but if you know what you're doing, it provides an immense amount of flexibility and power to deploy whatever you want in a simple, repeatable way.</p>

<p>rubber isn't just happiness and unicorns, though; it has some definite downsides. It seems to have a lot less mindshare than tools like Chef or Puppet, and because it's deployed on a per-application basis, it can't easily manage multiple applications deployed onto one machine. But despite these problems I like it a lot, and it perfectly suits our present use case.</p>
]]></content>
  </entry>
  
</feed>
