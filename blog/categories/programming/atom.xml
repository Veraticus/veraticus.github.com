<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Hi, I'm Josh Symonds]]></title>
  <link href="http://joshsymonds.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2013-11-14T10:38:58-06:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don't Code Defensively]]></title>
    <link href="http://joshsymonds.com/blog/2013/11/14/dont-code-defensively/"/>
    <updated>2013-11-14T10:30:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/11/14/dont-code-defensively</id>
    <content type="html"><![CDATA[<p>As an engineer, we're responsible for creating things that people care about deeply. Whether you're programming something as important as a car's operating system or as silly as an iPhone game, our code touches lives. It's no wonder, then, that the people who interact with our products feel strongly about them -- and possibly about us, as well.</p>

<p>This can sometimes be a good thing. It's always touching to receive a heartfelt letter of thanks and admiration from a customer. But much more commonly, you'll hear complaints, demands, and anger.</p>

<p>Under a deluge like that, it's easy to become disillusioned and bitter. I see it all the time: programmers who hide in their shells at the slightest provocation. They make excuses, shift blame, and refuse to own their actions. I think this attitude is ultimately cowardly -- if you're willing to take credit for the good things you've done, you have to "take credit" for the bad stuff too. And cowardice of this sort contributes to making bad code, since your goal is no longer to to solve your organization's problems, but to shirk responsibility.</p>

<p>That's what I call coding defensively -- an entirely separate subject from (defensive programming)[http://en.wikipedia.org/wiki/Defensive_programming]. Coding defensively mires you in your codebase. It's hard to go forward because you don't want more responsibility, and you can't go back because it would be admitting error. And it's a self-reinforcing cycle: once you start becoming defensive, it's difficult to stop.</p>

<p>I was a defensive coder too. I struggled to own the results of my actions: I would refuse to discuss solutions in a sensible, level-headed way. It took me a long time to change my approach, and as part of doing so I wrote a list of maxims summarizing how I wanted to think and act. When I feel myself slipping I go over them to refresh my resolve. I'm publishing them here in the hope that they'll help someone else as much as they've helped me.</p>

<!-- more -->


<h2>No one gets it right all the time</h2>

<p>First, you have to realize that people -- even you -- make mistakes. It's not productive to pretend that it didn't happen or that someone else is at fault: if you know in your heart that the responsibility lies with you, then don't try to shift blame. It was your mistake, and part of being a human is making mistakes, so own that error with all your heart!</p>

<p>I found that achnowledging my fault and being accepting of it removed a lot of the impetus to be defensive. I no longer felt as ashamed of what I'd done or that I had to spend time and energy making excuses. The "excuse" is that mistakes happen: what matters now isn't that the mistake occurred, but how you'll go about addressing it.</p>

<p>Please don't get me wrong -- I'm not saying you should be making mistakes left and right flippantly. Avoid them if you can, through proactive testing, code reviews, and sensible QA. But they'll still happen, even if you're very good. Since you can't change whether or not you'll make mistakes, you may as well change your attitude to them.</p>

<h2>Be friendly</h2>

<p>In the face of anger or blame, don't turtle up! Instead, kill them with kindness.</p>

<p>As I said way back at the beginning of this post, what we do naturally inspires passion in those around us. Frequently when people run into an engineering problem, this passion will turn to anger. By the time the problem has percolated to us the anger has found its target: the programmer responsible for creating the code in the first place.</p>

<p>Friendliness reminds the people you're interacting with that you're just as dedicated to a solution as they are. Resist when they try to brand you as an antagonist. Their reaction is natural because they believe you made the problem: but in fact, you're partners together in trying to solve it, and kindness reminds them of this fact.</p>

<p>You'll be surprised at the turnarounds you see in people's attitudes when you're unrelentingly friendly to them in return. And once the anger has dissipated, you can work towards a resolution.</p>

<h2>Seriously consider solutions</h2>

<p>Or, if you're a Glengarry Glen Ross fan, "always be solving."</p>

<p><img src="http://f.cl.ly/items/2y3x25163d0L0J1A0s14/Image%202013.11.14%209%3A38%3A06%20AM.jpeg" alt="Always Be Solving" /></p>

<p>Putting your existing solutions on a pedestal isn't productive. There's no inherent value to what you have other than that it works -- and sometimes, not even that! Hand-in-hand with this, concentrating only on the potential downsides of new technology blinds you to potentially tremendous upsides.</p>

<p>Dismissing solutions out of hand -- particularly if you don't understand them or it seems like they'd be difficult to implement -- is an easy, natural reaction. But what your stakeholders are searching for might exist outside your comfort zone. It might involve using a piece of software with which you have little experience, or, in the worst case, might be implemented in a programming language you don't even know.</p>

<p>If it's still more or less perfect despite those flaws, then you have to go for it. Your responsibility is to do what's right, not what's easy.</p>

<p>And guess what? Afterwards, you'll probably feel way more comfortable implementing that solution again in the future, and professional growth is always pretty awesome... and leads to personal growth as well.</p>

<h2>Your net effect is positive</h2>

<p>Even in the face of overwhelming negativity or horrible problems, you have to remind yourself that your overall effect is a positive one. As humans, we spend an inordinate amount of time concentrating on negative experiences: in the past, perhaps, an embarrassing moment in high school that everyone but you has forgotten, and in your day-to-day job, the errors and problems you feel largely responsible for.</p>

<p>It can be helpful to remind yourself of the good things you've done too, and that, in the balance, the good outweighs the bad. Doing so gives you the courage to hold your head high, and gives you the self-confidence to tackle your problems head on, instead of hiding from them.</p>

<p>And that willingness to embrace reality is what prevents defensive coding. In the end, your willingness to act -- and the attitude you have towards action -- can mean more to people than what you do. By trying to be a proactive, positive force of good, you're telling the people who care about your code that you care about it as well. More than anything else, that will garner their respect and admiration and lead them to believe you're coding for them, not coding defensively.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes a Good Programmer Good?]]></title>
    <link href="http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/"/>
    <updated>2013-11-03T13:06:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good</id>
    <content type="html"><![CDATA[<p>I've worked with a lot of programmers over the years -- some of them super amazing, and some distinctly lackluster. As I've had the pleasure of working with some very skilled individuals recently, I spent some time thinking about what I admire in them. What makes a good programmer so good, and a bad programmer so bad? Or, to mangle English a little bit, what makes a good programmer good?</p>

<p>Based on my experiences, being a great programmer has nothing to do with age, education, or how much money you make. It's all in how you act and, more deeply, how you think. I've noticed a consistent set of habits in the programmers I admire. More than knowledge of their chosen language, deep understanding of data structures and algorithms, or even more than years of on-the-job experience -- the way they communicate, the way they conduct themselves, and the way they approach programming speak volumes as to their amazing level of skill.</p>

<p>Certainly there's more to being a good programmer than anyone can enumerate, and I wouldn't judge any programmer solely based on the presence (or lack) of these practices. But I do know wisdom when I see it, and when I see a programmer expressing these traits, I think, "This person really knows what they're doing."</p>

<!-- more -->


<h2>They do their research</h2>

<p>Or "measure twice, cut once." Or "Google it."</p>

<p>Whatever you call it, most programming problems you're likely to encounter have been solved in some form already -- Ecclesiastes had it right in observing there was nothing new under the sun. In the form of libraries on GitHub, blog posts on the Internet, or just getting in touch with experienced individuals, good programmers know to do the research before they try to solve a problem.</p>

<p>I've seen even great programmers rush to solutions: but the worst programmers I've worked with never consult others, and as a result do huge amounts of duplicate work or tackle issues in precisely the wrong way. And unfortunately, they end up paying for their mistakes later.</p>

<h2>They read error messages (and act on them)</h2>

<p>This includes desymbolicating stack traces. Yes, it's ugly and unfortunate -- but if you're not willing to do it how are you going to know what's wrong? The most effective programmers I know aren't afraid to dig deep into problems. The least effective see there was an error but don't even bother reading the error message. (This sounds ridiculous but you'd be surprised how frequently I run into it.)</p>

<p>To take this a step further, great programmers see a problem and hunger to solve it. Reading error messages are for them just the beginning: they're anxious to dive deep into the issue that it represents and figure out what's going wrong. They're not interested in passing responsibility, they're interested in finding a solution. The buck really does stop with them.</p>

<h2>They go to the source</h2>

<p>Documentation, tests, people: these things lie. Not intentionally, but if you want to know exactly how something works, then you must view the source yourself.</p>

<p>Don't be afraid if it's not a language you're super familiar with -- if you're primarily a Ruby programmer and you suspect there's an error in one of Ruby's C libraries, go crack it open and have a look. Yes, you might not get it. But who knows? You just might, and you stand a way better chance than if you didn't try at all!</p>

<p>If you're in a closed-source environment then this becomes a lot harder, unfortunately, but the principle still applies. Poor programmers have little interest in viewing source, and as a result problems flummox them much longer than those who are willing to do some research.</p>

<h2>They just do it</h2>

<p>Good programmers are driven to act. There's a compulsion in them that can be difficult to control: they're implementing a solution as soon as they identify a problem or see a new feature request, sometimes too early and sometimes too aggressively. But their instinctive response to a problem is to tackle it head-on.</p>

<p>This can be troublesome at times -- but their enthusiasm is a crucial part of being good at what they do. While some might stonewall or wait for the problem to go away on its own, good programmers start solving.</p>

<p>To put it more simply (and, perhaps, too obviously): if you see someone excitedly grabbing problems and acting on them, chances are you have a good programmer on your hands.</p>

<h2>They avoid crises</h2>

<p>This is mostly a bad programmer trait: they tend to bounce from artificial crisis to artificial crisis, never really understanding one before they move to the next. They'll assign blame to the wrong parts of their program and then spend hours debugging something that works perfectly well. They let their emotions get the better of them, trusting gut feelings rather than careful, explicit analysis.</p>

<p>If you hurry through a problem -- or even view each problem as a world-shattering catastrophe -- you're more likely to make errors or not address the underlying issues. Great programmers take the time to understand what's going wrong, even when there really is a catastrophe: but more than that, they treat regular problems as issues to be solved. Thus they solve more of them more accurately, and do so without raising the tension level of your organization.</p>

<h2>They communicate well</h2>

<p>Ultimately, programming is a form of communication. Being able to succinctly and eloquently express your thoughts is as crucial in writing code as it is in writing prose -- and I've always found that those who can write a pithy email, elegant status report, or even just an effective memo will also be better programmers than those who cannot.</p>

<p>This applies to code in addition to English. It's certainly possible to make a one-liner filled with parenthesis, brackets, and single-letter functions: but if no one understands it, what's the point? Good programmers take the time to communicate their ideas properly in whatever medium they're using.</p>

<h2>They are passionate</h2>

<p>I think this might be the most important aspect of a good programmer (and perhaps the part of this list most generally applicable to fields other than computer science).</p>

<p>If you truly care about what you're doing -- if it's not just a job, but a hobby, an interest, even a fascination -- then you have a major advantage over anyone else in your field. Great programmers are always programming. Their peers will clock out at eight hours a day: not out their job, but of their field in general. They don't have programming side projects or much interest in contributing back to the community. They're not constantly trying neat new methods and crazy programming languages just to see how they work.</p>

<p>When I see a programmer who's doing their own hobby projects on the weekends, who's involved in the creation of the tools that they use every day, who's fascinated by the new and the interesting: that's when I really know I'm looking at an amazing person. Ultimately great programmers view their profession not just as a means to make money, but as a means to make a difference. I think that's what makes the best programmers who they are. Coding, to them, is a way of shaping the world. And that's what I truly respect and admire.</p>
]]></content>
  </entry>
  
</feed>
