<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubymotion | Hi, I'm Josh Symonds]]></title>
  <link href="http://joshsymonds.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2012-07-02T18:05:28-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From the RubyMotion Simulator to Your Friend's iPhone]]></title>
    <link href="http://joshsymonds.com/blog/2012/05/10/from-the-rubymotion-simulator-to-your-friends-iphone/"/>
    <updated>2012-05-10T19:13:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/05/10/from-the-rubymotion-simulator-to-your-friends-iphone</id>
    <content type="html"><![CDATA[<p>I've been spending a lot of time talking about RubyMotion recently, and I was intending to post the second in my <a href="http://joshsymonds.com/blog/2012/04/24/introduction-to-programming-i/">Introduction to Programming</a> series today to give the whole Motion thing a break. But I spent far too long on Tuesday getting an app correctly deploying through Testflight, and it was a really painful process. I took copious notes while making it happen, though, so in the interest of saving someone else's time, here is my step-by-step guide to successfully getting an app from your RubyMotion simulator onto someone else's device.</p>

<!-- more -->


<h2>1. Set up your Apple Developer Account</h2>

<p>This step is pretty obvious and if you're actually interested in deploying at all, it's probably already complete. But I promised a step-by-step guide, and this is certainly step number one (or more like number zero). If you want to deploy to other people's devices you need an Apple developer account. Sign up for one at <a href="https://developer.apple.com/membercenter/">Apple's developer member center</a>. Buying the iOS development license will set you back $100/year.</p>

<h2>2. Create a Distribution Certificate</h2>

<p>You'll have to <a href="https://developer.apple.com/ios/manage/certificates/team/index.action">create a development certificate first</a>. Once that's done, set yourself up with a <a href="https://developer.apple.com/ios/manage/certificates/team/distribute.action">distribution certificate</a>.</p>

<p><img src="http://udn.epicgames.com/Three/rsrc/Three/AppleiOSProvisioningPortal/ios_provision_distcert_home.png" alt="Create a Distribution Certificate" /></p>

<p>You need to press that big gray button that says, "Request Certificate." This distribution certificate is what you'll need to sign the eventual app with. If you use the wrong certificate or don't have one at all, most likely your friends will get the dreaded <a href="http://help.testflightapp.com/customer/portal/articles/402799-i-get-an-%22unable-to-download%22-error-when-installing-my-application">"Unable to Download"</a> Testflight error, which is certainly among the least helpful error messages I've ever come across.</p>

<p>When you've saved the distribution certificate, click on it to add it to your keychain. Note its name: it will be something like, "iPhone Distribution Profile: Your Name." Make sure you remember the name of this certificate, as you will need it in step 6.</p>

<h2>3. Add Devices</h2>

<p>This is probably the most straightforward step. Head to the <a href="https://developer.apple.com/ios/manage/devices/index.action">devices section</a>, click the "Add Devices" button and start adding devices by their UDID. If you're doing this with a friend, link them to the first <a href="http://www.innerfence.com/howto/find-iphone-unique-device-identifier-udid">Google result for finding your UDID</a>, which is both helpful and actually available for viewing by your developer-accountless friends, as opposed to Apple's own instructions which are not.</p>

<h2>4. Make an App ID</h2>

<p>Technically this step is optional, but likely you'll eventually want to do push notifications, or in-app purchases, or something like that. So you may as well get an App ID now and save yourself the trouble of doing so later.</p>

<p>Head over to the <a href="https://developer.apple.com/ios/manage/bundles/add.action">Create App ID</a> page and fill in all the necessary values. There's one field of particular importance to us, however: the bundle identifier. The usual style is <code>com.yourCompany.yourApp</code>, so go for something like that. Remember what you wrote here, as you'll need it again in step 6!</p>

<h2>5. Create a Provisioning Profile, Referencing Your Devices</h2>

<p><img src="http://veratic.us/GXmd/provisioning_profile.jpg" alt="Create a Provisioning Profile" /></p>

<p>Head on over to the <a href="https://developer.apple.com/ios/manage/provisioningprofiles/create.action?type=2">distribution provisioning portal</a> and create a distribution provisioning profile. Ensure you select "Ad Hoc" for your distribution method (unless you're releasing to the App Store), and select the devices you entered in step 3. Submit the profile and hit Command-R until it's moved from pending to active. Download it; note the location you saved it to as well as its file name. Another thing we need to know for step 6.</p>

<h2>6. Update your RubyMotion Rakefile</h2>

<p>Stop! Do you have:</p>

<ol>
<li>The name of your distribution certificate, from step 2?</li>
<li>The bundle identifier, from step 4?</li>
<li>The filename and path of the distribution provisioning profile, from step 5?</li>
</ol>


<p>If you answered yes to all those questions, good for you! Proceed onwards. If not, check your reading comprehension skills and go back a few steps.</p>

<p>Now that we have all that important information, we have to put it into our Rakefile.</p>

<p>```ruby
Motion::Project::App.setup do |app|
  app.name = 'Test App'</p>

<p>  app.codesign_certificate = 'iPhone Distribution: Your Name Here'
  # The name of your personal distribution profile, from your keychain.
  # Distribution profile, NOT development profile!
  # This was from step 2.</p>

<p>  app.identifier = 'com.yourCompany.yourApp'
  # The bundle identifier, from step 4.
  # Exactly as you typed it then.</p>

<p>  app.provisioning_profile = '/path/to/your/distribution_provisioning_profile.mobileprovision'
  # The filename and full path of your distribution provisioning profile.
  # The name is probably an enormous hex string.
  # From step 5.<br/>
end
```</p>

<p>Failure to set any of these values correctly will result in either compilation errors or installation errors and will probably be nightmarishly difficult to track down and fix.</p>

<h2>7. Set up Testflight</h2>

<p>Follow the steps for doing this on the very helpful <a href="http://www.rubymotion.com/developer-center/articles/testflight/">RubyMotion article</a>. Afterwards, your Rakefile will look something like this:</p>

<p>```ruby
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'motion-testflight'</p>

<p>Motion::Project::App.setup do |app|
  app.name = 'Test App'
  app.codesign_certificate = 'iPhone Distribution: Your Name Here'
  app.identifier = 'com.yourCompany.yourApp'
  app.provisioning_profile = '/path/to/your/distribution_provisioning_profile.mobileprovision'
  app.testflight.sdk = 'vendor/TestFlightSDK'
  app.testflight.api_token = 'APIToken'
  app.testflight.team_token = 'TeamToken'
end
```</p>

<p>Finally, you should be able to <code>rake testflight notes='What a helpful step-by-step guide!'</code> to actually deploy your app to Testflight, and your users should be able to download and install it no problem.</p>

<p>Writing this all down, it seems rather clear and straightforward. While doing it, unfortunately, it is not. Apple's documentation is really obtuse and the error messages you get during the process are seriously unhelpful. But happily with this guide you should be more or less good to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Tips &amp; Tricks]]></title>
    <link href="http://joshsymonds.com/blog/2012/05/07/rubymotion-tips-and-tricks/"/>
    <updated>2012-05-07T17:48:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/05/07/rubymotion-tips-and-tricks</id>
    <content type="html"><![CDATA[<p>I've been using RubyMotion for four days now. I still like it a lot, and I think the coolest thing about it is the rapidly-evolving community around its use. Ian Phillips figured out how to <a href="http://ianp.org/2012/05/07/rubymotion-and-interface-builder/">link Interface Builder and RubyMotion</a>; Alan deLevie wrote a neat <a href="https://github.com/adelevie/ParseModel">connection to Parse.com</a>. Personally, I've been spending the time writing lots of code. I've just deployed my first RubyMotion app into TestFlight and sent it to some testers. Soon hopefully I'll have an actual RubyMotion app, which is pretty exciting! I've learned a lot in the last four days of use and wanted to post a few tips and tricks to hopefully make life easier for other RubyMotionists.</p>

<!-- more -->


<h2>Wrap It Up</h2>

<p>I'm using <code>NSUserDefaults</code> to store some cached data so I don't flood my server. Calling <code>NSUserDefaults</code> constantly was really getting me down though, so I made this cute little wrapper class that does all the hard work for me.</p>

<p>```ruby
class Cache
  class &lt;&lt; self</p>

<pre><code>def keys
  NSUserDefaults.standardUserDefaults.dictionaryRepresentation
end

def write(key, data)
  NSUserDefaults.standardUserDefaults[cache_key(key)] = data
  NSUserDefaults.standardUserDefaults[timestamp_key(key)] = Time.now
  self.synchronize
end

def read(key)
  NSUserDefaults.standardUserDefaults[cache_key(key)]
end

def delete(key)
  NSUserDefaults.standardUserDefaults.removeObjectForKey(cache_key(key))
  self.synchronize
end

def exists?(key)
  !NSUserDefaults.standardUserDefaults[cache_key(key)].nil? &amp;&amp; Time.now - NSUserDefaults.standardUserDefaults[timestamp_key(key)] &lt;= 3600
end

def synchronize
  NSUserDefaults.standardUserDefaults.synchronize
end

def purge
  keys.each { |key| self.delete(key) if key =~ keyspace }
  self.synchronize
end

private

def keyspace
  "app-cache"
end

def cache_key(key)
  "#{keyspace}-#{key}"
end

def timestamp_key(key)
  "#{cache_key(key)}-timestamp"
end
</code></pre>

<p>  end
end
```</p>

<p>I only want to cache the data for one hour (3600 seconds); that's why I only return true for <code>exists?</code> if the keys are younger than that. Using this cache is really simple.</p>

<p><code>ruby
@data = if Cache.exists?('cache_key')
  Cache.read('cache_key')
else
  results = 1 # Populate the cache with slow work here
  Cache.write('cache_key', results)
  results
end
</code></p>

<p>The only caveat to this wrapper -- something I need to look at more -- is that you can only store property values in it. In other words, no custom classes, which sort of sucks if you have a lot of models that you want to hold somewhere. I'm getting around this by storing IDs and then looking them up afterwards in my model. I could use CoreData instead (and the sample app has <a href="https://github.com/HipByte/RubyMotionSamples/blob/master/Locations/app/locations_store.rb">an excellent example of how to use it</a>) but that's a level of complexity I don't think my app needs yet.</p>

<h2>Don't Be Afraid To Use Blocks</h2>

<p>Blocks are one of the coolest parts of Ruby! A lot of Objective-C code can be made more readable and more beautiful by sticking it in block syntax. Here's a little UIView helper to show you what I mean.</p>

<p>```ruby
class UIView
  def self.animate_with_block(duration = 0.5)</p>

<pre><code>beginAnimations(nil, context:nil)
animationDuration = duration
yield
commitAnimations
</code></pre>

<p>  end
end
```</p>

<p>Check out the before and after to see how this makes code look oh so much better.</p>

<p>```ruby</p>

<h1>Before</h1>

<p>def showSelection
  UIView.beginAnimations(nil, context:nil)
  UIView.animationDuration = 0.2
  @selection.alpha = 1
  @picker.alpha = 0
  UIView.commitAnimations
end</p>

<h1>After</h1>

<p>def showSelection
  UIView.animate_with_block(0.2) do</p>

<pre><code>@selection.alpha = 1
@picker.alpha = 0
</code></pre>

<p>  end
end
```</p>

<p>There's a lot of stuff I ended up wrapping in blocks just for sanity's sake; having to commitAnimations or synchronize after every operation is a big downer. Remembering to end blocks is quite a bit easier, and as a bonus makes your code look a lot more readable as well.</p>

<h2>Make Shortcuts</h2>

<p>I stole this one rather blatantly from <a href="http://samsoff.es/posts/rubymotion-review">Sam Soffes</a>. It's trivially easy to open up classes and add your own methods to them:</p>

<p>```ruby
class UIColor
  def self.darkBlueColor</p>

<pre><code>@dark_blue_color ||= self.colorWithRed(0, green:0.1, blue:0.44, alpha:1)
</code></pre>

<p>  end</p>

<p>  def self.lightBlueColor</p>

<pre><code>@light_blue_color ||= self.colorWithRed(0, green:0.21, blue:0.88, alpha:1)
</code></pre>

<p>  end<br/>
end
```</p>

<p>Then you have your own cool code like <code>UIColor.darkBlueColor</code> next to the standard UIColor methods. If you find yourself copying and pasting something over and over, don't! It's super easy to make extensible, quick shortcuts in Ruby. Take advantage of that.</p>

<h2>Stand on the Shoulders of Giants</h2>

<p>There are a lot of RubyMotion projects popping up out there, and there are a lot of existing Cocoapods projects. Why reinvent the wheel? Use other peoples' smarts to propel your own project ahead quickly and easily; if you find yourself outgrowing your dependencies, then you should consider doing them yourself, but not before.</p>

<p>For example, I've been using <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> to do my networking management, connections, and callbacks -- they already made the whole NSURLConnection stuff easy to use, and I gotta say using it in Ruby is super easy too:</p>

<p><code>ruby
Server.sharedInstance.getPath("data", parameters:{:user_id =&gt; user.id},
  success:lambda { |operation, response| @label.text = 'User gotten!'},
  failure:lambda { |operation, error| $stdout.puts("Error: #{error}")}
)
</code></p>

<p>Of course, you'll want to do something a bit more interactive with your error than just log it, but you get the idea. Meanwhile, on the RubyMotion side, I stole quite a bit of code from <a href="https://github.com/mattetti/BubbleWrap">BubbleWrap</a>, specifically the really excellent <a href="https://github.com/mattetti/BubbleWrap/blob/master/lib/kernel.rb">kernel shortcuts</a>. Being able to do <code>simulator?</code> or <code>ipad?</code> is really awesome and a big time saver. I really hope that RubyMotion gets its own concept of Gems soon; it'll make receiving code faster than just copying and pasting it directly into my source.</p>

<p>As I get closer to releasing the app I'm working on, I'm sure I'll have more interesting tips and tricks to share: these thoughts are really all that stood out to me after a quick review of my code. As I said at the top, I'm still really impressed with RubyMotion; I've had a few more random crashes without error messages or backtraces, but that's my only real complaint so far. We'll see how RubyMotion fares as my app moves towards release, but I am personally hopeful, and at the very least it's made iPhone programming a lot less painful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why RubyMotion Is Better Than Objective-C]]></title>
    <link href="http://joshsymonds.com/blog/2012/05/04/why-rubymotion-is-better-than-objective-c/"/>
    <updated>2012-05-04T02:14:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/05/04/why-rubymotion-is-better-than-objective-c</id>
    <content type="html"><![CDATA[<p>Generally speaking I try to stay away from inflammatory posts. But the release of <a href="http://www.rubymotion.com/">RubyMotion</a> has been a revelation to me. I've done iOS programming before, but I've always found it unpleasant next to programming in other languages. Don't get me wrong, Objective-C is better than C or C++, but I don't think that's saying a whole lot.</p>

<p>I've spent the better part of yesterday and last night (since RubyMotion was released) giving it a try. After converting two existing projects from Objective-C into RubyMotion, and spending some time developing one of those further using RubyMotion alone, I've come to a number of conclusions about RubyMotion and Objective-C. Ultimately, RubyMotion is superior to Objective-C in almost every way, and <a href="https://twitter.com/#!/lrz">Laurent Sansonetti</a> must be some kind of mythical otherworldly genius to have developed something at once so usable and so powerful.</p>

<p>Why do I believe this? What makes RubyMotion so superior to straight-up Objective-C?</p>

<!-- more -->


<h2>Objective-C is Hard to Use</h2>

<p>That's a pretty broad statement. By saying that, I mean that Objective-C is syntactically unwieldy, and that the development tools around it are difficult to employ. In my brief experience with RubyMotion, these are the main pain points it seems to be aiming to solve, so I'll discuss them very briefly for comparison's sake. I don't want to turn this post into hating on Xcode or Objective-C: it's really more about how RubyMotion is great.</p>

<p>So, that said, on with the Xcode and Objective-C hating!</p>

<h3>Xcode is Unstable</h3>

<p>There's really no other way to put it. How many of you have had Xcode crash for no particularly good reason? And crashes are just the most common errors. Not three days ago I discovered, when I attempted to open a new terminal window, that somehow Xcode had forked over 700 processes and had consumed all available OS process slots. Seriously?</p>

<p><img src="http://veratic.us/GN2c/internal_error.jpg" alt="Internal Error" /></p>

<p>Why does that dialogue even exist? Who is it supposed to help?</p>

<p>Another gem is when your simulator crashes in a particular way that prevents Xcode from opening up any simulator in any app again. I still haven't figured out how to fix that without restarting my computer.</p>

<p>I don't want to dedicate this post to talking about the many instabilities in Xcode; I could go on, but I think I've made my point already. It's buggy.</p>

<h3>Xcode Hides Important Information</h3>

<p>Xcode's user interface is nightmarishly complicated. Clutter doesn't even begin to describe it.</p>

<p>Put simply, Xcode takes all the build options possible for the Objective-C compiler, organizes them into unhelpful menus and buttons, and succeeds in obfuscating the few that are really important -- the most important settings for your project are hidden behind layers of unintuitive navigation. For example, to enable Zombie Objects, a common debug option for finding and correcting bad access errors, you have to go down one menu, select a navigation option, and then select a tab. That's three layers of menus between you and a useful checkbox! How on Earth would anyone find that without the help of Google?</p>

<p>I think the plethora of menus and tabs are intended to make projects approachable and easy for beginners. However, the layers of abstraction make windows cluttered and unhelpful for experienced developers, while being utterly incomprehensible for new ones. As another example, witness the dreaded Project file (the root of any Objective-C application). Click on it and go to your build targets and be assaulted by five tabs, many of them multiple pages long. There are important settings that you should change here. Good luck finding them.</p>

<h3>Objective-C Is Tedious</h3>

<p>I end up doing a lot of copying and pasting in Objective-C. Copying and pasting is boring. Why do I have to have huge statements like this?</p>

<p><code>objective-c
static UIColor *firstColor = nil;
static UIColor *secondColor = nil;
static UIColor *thirdColor = nil;
static UIColor *fourthColor = nil;
static UIColor *fifthColor = nil;
static UIColor *sixthColor = nil;
</code></p>

<p>Hint: I only typed one of those. There's a level of abstraction waiting to be unlocked in Objective-C to collapse statements like that into one line (or preferably into nothingness). But, unfortunately, it's just not there yet.</p>

<p>I also end up writing a lot of debug statements. Introspection is unavailable at runtime and stack trace debugging, while vastly improved over where it used to be in Xcode 3, is still really unpleasant. Breakpoints and NSLog are the orders of the day in Objective-C, but it makes programming a very time-consuming process, where you spend a lot of effort verifying very little.</p>

<p>Ultimately, instead of solving interesting problems in Objective-C, I seem to spend most of my time on boilerplate code, copied and pasted from other projects or the Internet. It's taxing, boring, and very, very tedious.</p>

<h2>RubyMotion is Easy to Use</h2>

<p>So! All the unpleasantness is out of the way. How, then, does RubyMotion solve all these problems? Why is it so, so cool?</p>

<h3>RubyMotion Uses Rake</h3>

<p><code>rake</code> is Ruby's <code>make</code> equivalent: it runs tasks on the commandline. By using a simple Rakefile, RubyMotion exposes an elegant and intuitive DSL for building your projects. Instead of layers of complicated menus, you have this:</p>

<p>```ruby
Motion::Project::App.setup do |app|
  app.name = 'TestApp'
  app.interface_orientations = [:portrait]
  app.identifier = '.com.TestCompany.TestApp'
  app.frameworks &lt;&lt; 'CoreAudio'
  app.pods do</p>

<pre><code>dependency 'AFNetworking'
dependency 'SVProgressHUD'
</code></pre>

<p>  end
end
```</p>

<p>Easy, elegant expression of the most important options in your application. Take that, build targets!</p>

<h3>RubyMotion is Ruby</h3>

<p>Gone are header files, property and method declarations, and lines of ugly boilerplate variable initializers. RubyMotion is Ruby; that means you declare variables and methods as you need them. A side effect of this (besides shorter, more readable files) is that a lot of long Objective-C code is trimmed really substantially. Check out this snippet from the sample projects showing how easy it is to give a tableView new cells:</p>

<p><code>ruby
cell = tableView.dequeueReusableCellWithIdentifier(CellID) || UITableViewCell.alloc.initWithStyle(UITableViewCellStyleSubtitle, reuseIdentifier:CellID)
</code></p>

<p>The corresponding Objective-C, of course, looks like this:</p>

<p>```objective-c
UITableViewCell *cell = [self.tableView dequeueReusableCellWithIdentifier:CellID];</p>

<p>if(cell == nil) {</p>

<pre><code>cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:MyCellIdentifier];
</code></pre>

<p>}
```</p>

<p>I am admittedly biased: I think coding should be fun and easy, with a focus on doing interesting things. If you disagree with me then you probably won't like that RubyMotion is Ruby. The intersection of Objective-C and Ruby is handled really flawlessly. It revives the Smalltalk-style decorator syntax that Objective-C employs (with methods like <code>searchBar.setShowsCancelButton(false, animated:true)</code>) that Ruby 2.0 will be implementing. And it lets you do some totally awesome things. Check out this UIView I made:</p>

<p>```ruby
class LotsaLabels &lt; UIView
  def initWithFrame(frame)</p>

<pre><code>if super
  offset = 0
  [:label1, :label2, :label3, :label4].each do |t|
    self.instance_variable_set("@#{t}_text".to_sym, UILabel.alloc.initWithFrame([[0, 10 + offset], [self.frame.size.width, 40]]))
    self.instance_variable_set("@#{t}_label".to_sym, UILabel.alloc.initWithFrame([[0, 55 + offset], [self.frame.size.width, 14]]))

    text = self.instance_variable_get("@#{t}_text".to_sym)
    label = self.instance_variable_get("@#{t}_label".to_sym)

    text.font = UIFont.fontWithName('Arial Rounded MT Bold', size:40)
    text.textColor = UIColor.redColor
    label.font = UIFont.fontWithName('Arial Rounded MT Bold', size:15)
    label.textColor = UIColor.grayColor

    text.text = label.text = t.to_s.capitalize
    text.adjustsFontSizeToFitWidth = label.adjustsFontSizeToFitWidth = true
    text.backgroundColor = label.backgroundColor = UIColor.clearColor
    text.textAlignment = label.textAlignment = UITextAlignmentCenter

    self.addSubview(text)
    self.addSubview(label)
    offset += 90
  end
end
self
</code></pre>

<p>  end<br/>
end
```</p>

<p>That would have taken forever and involved a lot of copying and pasting in Objective-C. As you can see, you can call any Objective-C methods from Ruby itself, because all Ruby classes are implemented on top of Objective-C classes -- with the traditional Ruby methods you've grown to know and love baked right on top. Of course, because Ruby is Ruby, there's significant room for improvement here. Why not a class to create these labels?</p>

<p>```ruby
class Label
  attr_accessor :label</p>

<p>  def initialize(text, frame)</p>

<pre><code>@label = UILabel.alloc.initWithFrame(frame)
@label.adjustsFontSizeToFitWidth = true
@label.textAlignment = UITextAlignmentCenter
@label.backgroundColor = UIColor.clearColor
@label.text = text.to_s
</code></pre>

<p>  end
end</p>

<p>class BigLabel &lt; Label
  def initialize(text, frame)</p>

<pre><code>super
@label.font = UIFont.fontWithName('Arial Rounded MT Bold', size:40)
@label.textColor = UIColor.blackColor
</code></pre>

<p>  end
end</p>

<p>class LittleLabel &lt; Label
  def initialize(text, frame)</p>

<pre><code>super
@label.font = UIFont.fontWithName('Arial Rounded MT Bold', size:20)
@label.textColor = UIColor.grayColor
</code></pre>

<p>  end
end
```</p>

<p>Or if you don't like classes, give a module a whirl instead:</p>

<p>```ruby
module Label
  def new_label(text, frame)</p>

<pre><code>label = UILabel.alloc.initWithFrame(frame)
label.adjustsFontSizeToFitWidth = true
label.textAlignment = UITextAlignmentCenter
label.backgroundColor = UIColor.clearColor
label.text = text.to_s
label
</code></pre>

<p>  end
end</p>

<p>class BigLabel
  include Label
  attr_accessor :label</p>

<p>  def initialize(text, frame)</p>

<pre><code>@label = new_label(text, frame)
@label.font = UIFont.fontWithName('Arial Rounded MT Bold', size:40)
@label.textColor = UIColor.blackColor
</code></pre>

<p>  end
end</p>

<p>class LittleLabel
  include Label
  attr_accessor :label</p>

<p>  def initialize(text, frame)</p>

<pre><code>@label = new_label(text, frame)
@label.font = UIFont.fontWithName('Arial Rounded MT Bold', size:20)
@label.textColor = UIColor.grayColor
</code></pre>

<p>  end
end
```</p>

<p>Okay, the module example was a little contrived, but you get the idea.</p>

<p>This is the power of Ruby + Objective-C: you get Ruby's powerful and expressive enumerators, metaprogramming, and reflection, but Objective-C's APIs and libraries. It's like chocolate and peanut butter, they just go together so well.</p>

<p>Oh, and finally, because it's Ruby, it considers testing a first class citizen. Every RubyMotion app ships with a spec file that lets you create tests for your iPhone application in a simple and elegant manner that will look familiar to anyone who's ever used RSpec:</p>

<p>```ruby
describe "Application 'TestApp'" do
  before do</p>

<pre><code>@app = UIApplication.sharedApplication
</code></pre>

<p>  end</p>

<p>  it "has one window" do</p>

<pre><code>@app.windows.size.should == 1
</code></pre>

<p>  end
end
```</p>

<h3>RubyMotion Makes Debugging Easy</h3>

<p>Whereas Xcode and Objective-C debugging is painful in the extreme, in RubyMotion it couldn't be easier. As soon as you compile and run a project, you enter a runtime loop for both debugging it and reflecting in it. From the simulator itself, you can select interface elements and arbitrarily change them from the commandline; by programatically referencing your application delegate, you can make your simulator call code without even pressing a button.</p>

<p>I don't think I'm doing this feature justice by describing it. You should really go <a href="http://www.rubymotion.com/getting-started/">check out the video</a> to see it in action.</p>

<p>Exceptions also give you sensible error messages, and even backtraces! I put a method in my app that doesn't exist. Check out the RubyMotion console output:</p>

<p><code>``ruby
2012-05-04 09:37:52.843 TestApp[54214:f803] *** Terminating app due to uncaught exception 'NoMethodError', reason: 'lotsa_labels.rb:51:in</code>block in initWithFrame:': undefined method `explode' for #&lt;LotsaLabels:0x6c385a0> (NoMethodError)</p>

<pre><code>from lotsa_labels.rb:42:in `initWithFrame:'
from test_view_controller.rb:14:in `loadView'
from test_view_controller.rb:103:in `showLabels:'
</code></pre>

<p>```</p>

<p>This isn't all sweetness and light, though. Without breakpoints, it can be a little difficult to stop and step through code to see exactly what's happening. As a rule you don't have to do that nearly as much, though -- or at least I haven't so far. Finally, there's no great way to get logging output from the application other than outputting directly to stdout. When I want to log stuff, I end up having lines like this:</p>

<p><code>ruby
  $stdout.puts "Received response: #{response}"
</code></p>

<p>Which just splats lines directly into the console. Not the most elegant solution, but it works, and that's what counts.</p>

<h3>RubyMotion Isn't Perfect</h3>

<p>As you've just gathered, RubyMotion has room for improvement. I know I'll miss tab completion from Xcode. Method names never seemed so long as when you have to type them. dequeueReusableCellWithIdentifier, ugh. Without tab completion, you do a lot of copying and pasting from the documentation when you find a method name you like, just to ensure you don't accidentally typo it.</p>

<p>I've definitely run into errors with no backtrace at all -- just a straight simulator crash along with no output on the commandline. So there's still some ironing out around the whole process that needs to be done. And Cocoapods, for all its awesomeness, won't compile JSONKit for some reason. Or I'm doing something wrong, one of the two.</p>

<p>These are minor implementation errors, though; the overall philosophy and integration is, well...</p>

<h3>Better Than Objective-C</h3>

<p>RubyMotion corrects a lot of the flaws in Objective-C and Xcode. It's easier to write and debug; it gives you Ruby's powerful programming idioms on top of Objective-C's extremely extensive libraries. It bakes in testing and provides an easy, quick way to set up and provision apps. Though it has a number of extremely minor downsides, overall I would unequivocally recommend checking out RubyMotion if you have any interest at all in either Ruby or iOS apps. You'll be glad you did.</p>
]]></content>
  </entry>
  
</feed>
