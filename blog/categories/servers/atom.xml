<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: servers | Josh Symonds]]></title>
  <link href="http://joshsymonds.com/blog/categories/servers/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2012-04-01T00:50:18-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Unicorn in a Production Environment]]></title>
    <link href="http://joshsymonds.com/blog/2012/02/27/setting-up-unicorn-in-a-production-environment/"/>
    <updated>2012-02-27T10:20:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/02/27/setting-up-unicorn-in-a-production-environment</id>
    <content type="html"><![CDATA[<p>Configuring unicorn for your Rails servers is as much an art as it is a science.</p>

<p>That said, there are some things that make the configuration and setup a lot easier that I wish I had known before I had taken the unicorn plunge.</p>

<!-- more -->


<h2>worker_processes</h2>

<p>I searched high and low for a guide on how many workers each of my unicorns should employ and came up empty-handed. Unfortunately, this is highly dependent on your application. If you do complicated ImageMagick or PDF transformations on your server threads (which you shouldn't with unicorn, but hey, who knows) then your threads will use a lot of memory, especially on those operations. For reference, our Rails app takes up about 25 megabytes of memory per worker. However, we have offloaded all of our long-running and memory-intensive tasks into Resque.</p>

<p>We use EC2's m1.xlarge instance class and have 30 workers running per server. This number is intentionally set low; in my experience, the closer you come to maximum resource usage in an EC2 instance, the more likely it is to crash, or even worse become unresponsive.</p>

<h2>working_directory</h2>

<p>This should be fairly straightforward but has an important caveat: make sure to make this the static path of your current deploy, so the actual target of your symlink. Ours is <code>'/our/app/directory/current'</code>. Putting fanciness in here is very likely to get you shot in the foot with unicorn not reloading your app correctly, so I can't stress enough, just make this a simple string.</p>

<h2>listen</h2>

<p>Our backlog is set to 64. If a unicorn has 64 queued connections likely it's dead and we need failover to happen immediately; nginx takes care of that when unicorn refuses to service a request.</p>

<h2>preload_app</h2>

<p>true.</p>

<h2>Gemfile</h2>

<p>We had an issue where unicorn wouldn't pick up our Gemfile correctly. Turns out that it doesn't understand symlinked directories for reading gemfiles, so we had to employ this dazzling bit of code to get new gems into our bundle when the unicorns restarted:</p>

<p><code>ruby
before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = '/mnt/Hipstaweb-&lt;%= RUBBER_ENV %&gt;/current/Gemfile'
end
</code></p>

<h2>before_fork and after_fork magic</h2>

<p>If you're seriously considering unicorn, I'm sure you've seen the following gisted:</p>

<p>```ruby
before_fork do |server, worker|
  defined?(ActiveRecord::Base) and</p>

<pre><code>ActiveRecord::Base.connection.disconnect!
</code></pre>

<p>  old_pid = "#{server.config[:pid]}.oldbin"
  if File.exists?(old_pid) &amp;&amp; server.pid != old_pid</p>

<pre><code>begin
  Process.kill("QUIT", File.read(old_pid).to_i)
rescue Errno::ENOENT, Errno::ESRCH
end
</code></pre>

<p>  end
end
```ruby</p>

<p>But just to reinforce how awesome it is: this configuration is awesome. It allows your new unicorn to gracefully kill the old master while a new one seamlessly reloads. This is the key to one of unicorn's biggest selling points -- zero downtime deploys.</p>

<p><code>ruby
after_fork do |server, worker|
  ActiveRecord::Base.establish_connection
  ActiveRecord::Base.verify_active_connections!
end
</code></p>

<p>If you include the <code>connection.disconnect!</code> line in your before_fork, make sure you reestablish the connection in your after_fork. This prevents stale database connections and ensures each worker is always correctly connected to the database.</p>

<p>(As a postscript to this post: your unicorn servers are required to have <a href="http://en.wikipedia.org/wiki/List_of_My_Little_Pony:_Friendship_Is_Magic_characters">My Little Pony</a> server names.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Like Rubber]]></title>
    <link href="http://joshsymonds.com/blog/2012/02/23/why-i-like-rubber/"/>
    <updated>2012-02-23T13:30:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/02/23/why-i-like-rubber</id>
    <content type="html"><![CDATA[<p>When I was analyzing tools to deploy applications into Amazon's elastic cloud, I settled on <a href="https://github.com/wr0ngway/rubber">rubber</a> as our EC2 provisioner of choice.</p>

<p>rubber has a lot going for it. It provides simple, close-to-the-metal server creation and bootstrapping; it's super easy to start a server with nothing more than:</p>

<p><code>bash
cap rubber:create ALIAS=fluttershy ROLES=unicorn
</code></p>

<p>And bootstrap it with all the software needed for that role with:</p>

<p><code>bash
cap rubber:bootstrap FILTER=fluttershy
</code></p>

<p>Of course, looking at command line magic doesn't tell you anything about how hard or easy it is to initially configure, but rubber is also pretty easy to figure out and get running. When you initially rubber-ize your project, you get an entire directory in config/ called rubber that contains all the configuration files, separated by role, that you can browse to figure out exactly what rubber is doing.</p>

<p>It's easy to extend, as well. Adding in hubot scripts to automatically start and stop our little Hipstabot was really painless and will make a good future post, I'm sure. The good part -- for me at least -- is how close it is to the servers and how well it ties in with Capistrano. There's no magic going on and there's almost nothing to learn: as long as you have an EC2 account, you can set up a server quickly and painlessly with rubber... but if you know what you're doing, it provides an immense amount of flexibility and power to deploy whatever you want in a simple, repeatable way.</p>

<p>rubber isn't just happiness and unicorns, though; it has some definite downsides. It seems to have a lot less mindshare than tools like Chef or Puppet, and because it's deployed on a per-application basis, it can't easily manage multiple applications deployed onto one machine. But despite these problems I like it a lot, and it perfectly suits our present use case.</p>
]]></content>
  </entry>
  
</feed>
