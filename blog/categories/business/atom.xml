<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: business | Hi, I'm Josh Symonds]]></title>
  <link href="http://joshsymonds.com/blog/categories/business/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2013-06-11T17:24:35-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Your Startup Is Failing (And How To Fix It)]]></title>
    <link href="http://joshsymonds.com/blog/2013/04/30/why-your-startup-is-failing-and-how-to-fix-it/"/>
    <updated>2013-04-30T02:49:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/04/30/why-your-startup-is-failing-and-how-to-fix-it</id>
    <content type="html"><![CDATA[<p>The title of this post might be somewhat misleading: it's probably pretty obvious to you why your startup is failing. The same reason any business fails -- you're spending more money than you make. For some tech startups, though, living in the red is (perplexingly) a desirable state of existence. Still, you can't stay forever in an unprofitable limbo. Eventually investors start asking awkward questions like, "When will I see a return on my investment?" and "How can you possibly be spending so much of my money without making any in return?"</p>

<p>Shortly afterwards they stop giving you money and then you know it isn't long until the end.</p>

<p>Maybe you're there right now, or staring down the barrel of that gun. I've seen it before; I know what it looks like. You're not alone. If you haven't gone off the cliff yet, it's not too late to save your tech startup. You will have to make some hard decisions, though. Whether or not you can do that will determine if your company is salvageable, or if you'll be making one of those "What I Learned As An Ex-CEO" Hacker News posts that are all the rage these days. So how do you fix your failing startup? Good question! First, we have to understand why you're failing at all. Afterwards, we can move on to fixing it.</p>

<!-- more -->


<h1>Why You're Failing</h1>

<p>Keep in mind the bottom line here: ultimately you're failing because you're spending more money than you make. Discovering the reason behind this is the most important part of understanding how to correct it. Here, then, are the reasons your startup is failing.</p>

<h2>4. You Hired the Wrong People</h2>

<p>This is an especially easy pitfall for people to fall into. Back when you started your company, you were all excited about your vision, and unfortunately the brightness of said vision blinded you into hiring your old college roommate, or Cousin Mickey, or your sister's wedding photographer. They're really nice people, positive attitude, always on time... but they just aren't great.</p>

<p>The Wrong People can fall anywhere on the "not great" spectrum. Some add literally nothing to your company -- their most important skill is having a thousand Twitter followers. Others ostensibly have skills, but they're bad at them. These people are even worse than their do-nothing colleagues, since you'll be spending time correcting their screw-ups in addition to doing your own work.</p>

<p>If you want your startup to be a success, you don't have time to teach anyone the ropes or take on charity cases. You need stellar performers in every position you're hiring for, and that goes double for engineers, since, as a tech startup, they're the ones in the trenches making your product. Anyone in your company that isn't out-and-out amazing is a waste of your money.</p>

<p>If you're not knowledgeable enough to judge whether or not you hired the wrong people, you need to immediately hire someone who can competently make that assessment and include them in your decision-making processes.</p>

<h2>3. You Have Too Many Warm Bodies</h2>

<p>Your startup has four C-level executives, two managers, and two engineers. What's wrong with this picture?</p>

<p>That's a gimmie, obviously, but you might be surprised how often situations like this occur. (Or if you're as bitter and jaded as I am, you won't be surprised at all.) There are only two kinds of people you need in your startup: people who make your product -- usually your engineers and designers -- and people who sell it. Or, instead of selling it, people responsible for figuring out how to make it profitable, like advertising experts or investment gurus. Everyone else is extraneous.</p>

<p>You don't need managers if you've hired competent engineers. You probably don't need half of your C-level team either. Yes, they're busy all the time and claim their work is integral to the proper functioning of your company. But you wouldn't be staring into the inky abyss of bankruptcy if that were true.</p>

<p>People are truly amazing at generating work for themselves. It's not a testament to the importance of their job, it's a sad reflection on the nature of human existence. Everyone wants to feel important and special, even if they're not really bringing anything to the party. Don't let people waste your rapidly-dwindling money doing this.</p>

<h2>2. You're Wasting Your Time</h2>

<p>There's a lot of ways you can be doing this. Here's a quick list:</p>

<ul>
<li><strong>Meetings</strong>: You should go into every meeting knowing exactly what that meeting is intended to accomplish. When it's accomplished, the meeting is over. Meetings that don't have a clear agenda do not deserve to occur.</li>
<li><strong>Process</strong>: Making your product must be fun and easy for your engineers (if they're good engineers, the fun part will come naturally -- supplying the easy is up to you). If it becomes tiresome and unpleasant because of a ridiculous process then you're wasting time.</li>
<li><strong>Priorities</strong>: Bugs that affect only one customer should be prioritized below bugs affecting fifty customers. Features that no one wants should be slated behind those that customers are clamoring for.</li>
</ul>


<p>Ultimately, if you're not doing something directly applicable to building your application, ensuring its continued success, or selling it, you're wasting your time. Be ruthless here. If you need to constantly remind yourself why what you're doing is valuable... chances are it probably isn't.</p>

<h2>1. No One Wants Your Product</h2>

<p>The only way for you to make money is to sell something (or give it away and sell something related). If the people aren't buying, then you aren't making money, and, well, here you are.</p>

<p>Don't delude yourself by thinking you don't want users yet. That's like saying you don't want money yet. You want money right now, and you want users right now. You want everyone in the world to be clamoring to use your product, and damn the consequences. It might melt your servers into tiny puddles of liquid metal or bring your system to a screeching halt, but who the fuck cares? You can fix those problems. You need users and you need them immediately.</p>

<p>If your initial bunch of users love what you're doing, they'll recommend it to their friends. That's how you get those clamoring masses beating down your door. If people aren't recommending your product to their networks, there's a reason. Find out what it is and fix it. (Hint: it's because of the same issues you run into when you give a tech demo.)</p>

<p>Getting into TechCrunch doesn't count as people wanting your product. Your customers don't read TechCrunch.</p>

<h1>How To Fix It</h1>

<p>Ultimately, your investors don't care about your clever ideas, neat slideshows, your team or even your tech. They care about making money. Why? Because investors are pragmatists. They know that if they bet a million dollars on twenty startups, they'll lose nineteen million dollars on nineteen failures -- and make a hundred million dollars on one success.</p>

<p>You want to be a pragmatist as well. If you make them money, you'll make money for yourself as well. The way to fix your problems, then, is to reduce costs and raise profits. Easy to say, right? Well, here's the specifics.</p>

<h2>3. BRING ME THE AXE</h2>

<p><img src="http://i.qkme.me/3ox4qa.jpg" alt="TINA! BRING ME THE AXE!!" /></p>

<p>It's time to start firing your employees.</p>

<p>This isn't easy. Most of these people have probably become your friends. Perhaps some of them started as your bosom-buddies. Well, too bad. Maybe you can hire them again later when you're more profitable. But if you don't start trimming now, then in a few months you'll be cutting all of them.</p>

<p>First, get rid of all the people that aren't truly, stunningly great at their jobs, whatever their job is. If that's not enough, next flatten your corporate structure. This usually involves firing middle-management. And finally, start getting rid of C-level executives.</p>

<p>Grab your org chart right now and stare at it. For every box on that piece of paper, ask yourself, "Does this person make my company money?" If the answer is no, then you know what to do.</p>

<h2>2. Cultivate Elitism</h2>

<p>People should speak of your company and its hiring practices in hushed, awed tones. You want to be the startup that's snatching up all the great talent -- making the best people in the industry offers that they just can't refuse. People talk about 10X engineers, and you want to be entirely composed of those, but not just for engineers: for everything! Get amazing designers, fantastic QA people, the best of the best. If you want to turn your venture around, this is where you should blow your remaining money.</p>

<p>Once that's done, for God's sake, get out of their way. You hired these amazing people to be dynamic forces of change and save your company -- let them do it! Managing great people is hard: you want to pave the road in front of them almost without them realizing you've done it. Smooth the way, ease the process, and I guarantee that the results will astound you.</p>

<p>You never want to hire anyone that doesn't elicit respect from the other employees of your company. Foster this culture of elitism. Oh, and don't hire until it becomes literally painful that you're short a person. Even then be very very picky. The wrong skills or a bad attitude can send you right back to the "firing" step of this process again, and you don't want to do that more than once.</p>

<h2>1. Double Down on What Makes You Money</h2>

<p>Whatever your value proposition is, you need to clarify it and refocus your entire company around achieving it. At this point, there's been enough pivoting and more than enough money spent trying to find the money in your initial idea. If there isn't any, then it's time to pack up and go home -- but if there is, it's time to pursue it doggedly and relentlessly.</p>

<p>If a VC offered you a million dollars, no strings attached, this very day, you should refuse. Why? Because you should have been either marginally profitable or marginally popular on your <strong>PREVIOUS</strong> million dollars. If you've burnt through all that money and there's still not hordes of people beating down your doors, it is time to do some soul-searching.</p>

<p>Why don't more people find my app popular? Why aren't they spending their money on me? These aren't academic questions to be answered at your leisure: these thoughts should be the burning cores of your very being. If you're in the unenviable position of being a failing startup, you must do everything in your power to answer these two questions. Do so and then double down on what you discover. It's your only prayer.</p>

<h1>Afterwards</h1>

<p>I hope this missive is helpful to someone. That helpfulness might be stark realization: ultimately, no company deserves to exist -- your failing startup might be destined for the rubbish heap. Having a great idea, friendly employees, or lots of buzz in San Francisco doesn't change its fate. The only measure of a company's success is whether or not it makes money. The rest is just icing on the cake.</p>

<p>Can your company do that? Despite my tone, I believe it can. You've poured your heart and soul into it and you've done so because you believe you're working on a tremendous success. That said, what I hope you take away from my ramblings is that belief alone isn't enough. You need to calmly and steadily (some might say callously and ruthlessly) refocus your company on the most promising aspects of your employees and product. Only by doing so can you fix the problems in your startup, right the listing ship, and eventually put these unfortunate problems behind you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Perils of Overengineering]]></title>
    <link href="http://joshsymonds.com/blog/2013/04/23/the-perils-of-overengineering/"/>
    <updated>2013-04-23T13:19:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/04/23/the-perils-of-overengineering</id>
    <content type="html"><![CDATA[<p>Overengineering is a special subset of the generalized problem of "making bad choices." Usually overengineering is the result of one of two specific bad choices: either adding too much unnecessary bloat to something relatively simple, or creating a customized solution when many out-of-the-box alternatives already exist. After running into these problems over and over again, I'm going to quantify and identify them so that you and your friends can avoid the perils of overengineering.</p>

<!-- more -->


<h2>Don't Overthink It</h2>

<p>Does your app really need Meteor? I'm not arguing that Meteor (or Backbone or your complicated stateful library of choice) isn't super awesome or that people shouldn't know it -- some of the most successful applications on the Internet use it and frameworks like it. But does <strong>your current project</strong> need it?</p>

<p>Chances are the answer is "no." You'll double the amount of code in your app, introduce accessibility problems, and hinder page loads. The tradeoffs for a web application that uses boatloads of JavaScript interactions are worth it. But your eeny weeny storefront? Your JS bloat will make it impossible to maintain and difficult to use. Just cut it.</p>

<p>This goes for any technology. Coco Chanel infamously stated, "Before you leave the house, look in the mirror and take one thing off." What she applied to fashion, I apply to code. Before you commit, look in the mirror. Do you really need everything you're included? Did you make the best choices? If you're not sure, do some research. It'll save you a boatload of trouble down the river.</p>

<h2>Respect The Majority</h2>

<p>Your awesome, custom-designed redis/memcached database storage solution is eye-meltingly fantastic. You can fetch all users with a query like this:</p>

<p><code>ruby
  $d.u.f(:a)
</code></p>

<p>It takes half a millisecond -- before caches have been warmed. It's schemaless and uses join tables for every column. You're the happiest programmer on the planet.</p>

<p>And silently, the people that will have to maintain your code after your departure stare at you with smoldering hatred. Because they don't know how it works, and no, tests don't reasonably define expectations or replace documentation. Even documentation won't save them from the bugs hiding in your custom solution -- and believe me, there will be tremendous bugs hiding there. Your client and the new developer will have to spend time fixing those problems, time that could have been spent developing useful new features.</p>

<p>So next time, instead of rolling your own, pick a great solution that already works and that has a lot of open-source support. You'll save everyone involved a lot of money and trouble. No, you won't be inventing the next Rails or Node.js this way. Go invent it on your own time with a project you intend to be with forever, or at least one you'll never have to hand off.</p>

<h2>Less is Best</h2>

<p>To quote another famous individual with absolutely no relation to software engineering, Antoine de Saint-Exupery said, "A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away." And again, what he applied to design, I apply to code. The best way to fix overengineering -- both cases -- is to ruthlessly cull what you've got.</p>

<p>Success, for code, isn't bigger and better. It's smaller and cheaper. Refactor mercilessly, use external dependencies, and always consider the simplest, most direct solution to your problem. Yes, eventually you might need a message queueing system with prioritization and robust monitoring: but do you need it now? Could you get by with something simple and quick? And in the future you'll need to send multiple notifications for every kind of event in your system. But for the time being, will sending one email work? Or one text?</p>

<p>The fate of an overdesigned systems is twofold. It encounters immediate obsolescence from its requirements changing, meaning it didn't need to be created at all, and/or the system is used only for its most simple case, wasting the time that was spent foolishly engineering the ability to make it send perfect unicoded texts in Mandarin.</p>

<p>Don't be that person. Code for what the requirements are immediately: code for how the system will be used now, not how it will be used in a month. Because in a month it probably won't be used that way anyway, and then you'll look like a genius (in addition to actually being one for following sound advice).</p>

<h2>New IS Cool</h2>

<p>I know why it's tempting to write code the fun way, instead of the proper way. Who wants to use the fuddy-duddy old technologies when some enterprising individual just made the coding mashup you've been waiting for? But remember to keep your audience in mind. If you're coding for a client (and if you have a full-time job, your client is your employer) you need to make code that's first maintainable, second performant, and, as a distant third, ground-breaking and full of awesome tech.</p>

<p>Your time to shine -- your opportunity to cut yourself on the bleeding edge -- is with your own private projects. And if you're lucky and good, and the final product is really neat, thousands of people will adopt it for their use. Then, and only then, you can use it in production projects and feel like an awesome success... and without falling into one of the pitfalls of overengineering.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I'm Not Applying to 37Signals (But Why You Should)]]></title>
    <link href="http://joshsymonds.com/blog/2013/03/19/why-im-not-applying-to-37signals-but-why-you-should/"/>
    <updated>2013-03-19T13:16:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/03/19/why-im-not-applying-to-37signals-but-why-you-should</id>
    <content type="html"><![CDATA[<p>In case you haven't heard...</p>

<p><img src="http://f.cl.ly/items/2t3d0J0z3045350b1j2d/Screenshot_3_19_13_1_23_PM.png" alt="Rails Programmer: 37Signals" /></p>

<p>Yes, it's true: <a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson">Willy Wonka</a> is going to grant one lucky golden ticket holder a tour of the chocolate factory. And then you get to stay there until you somehow get tired of working at one of the coolest companies on planet Earth -- which, to carry my analogy, would probably be as likely to happen as getting bored of eating chocolate. If you're into Rails, you'd have to be stupid to not at least consider such an amazing opportunity.</p>

<p>So I did, and because I'm a programmer I carefully enumerated my thoughts. If you're on the fence at all about taking the plunge, maybe my reasoning will help you. Or horrify you -- either way, you'll have an opinion!</p>

<!-- more -->


<h2>Why You Should Apply</h2>

<ol>
<li><h3>They've literally written books about how great it is to work there.</h3>

<p>If you haven't read <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745">Rework</a> you probably should. 37signals is immune to typical corporate bullshit: you won't find stupid meetings, outside investors, or anyone burning the midnight oil here. You'll find work. Great, meaningful, empowering work. When you get right down to it, isn't that what people actually want out of their jobs? And you know 37signals is 100% dedicated to keeping it that way, since, well, as I said, they literally wrote the book on their business practices. They're committed not only to the customer experience, but the employee experience. And that counts for a lot.</p></li>
<li><h3><a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson">The Man Himself</a>.</h3>

<p>For those who think that intellect is at least as sexy as looks, this man would be the January pinup for the Men of 37Signals wall calendar I've been lobbying so hard for them to make. He's the inventor of Rails, he's highly opinionated, and he even drives race cars! Assuming he takes a shine to you, what's not to like? I imagine that, if you announced to a room of programmers, "I work with DHH," there would be a brief hush and then everyone would be talking over each other. One would say, "That man is a crazy person!" And another, "He's the greatest programmer to ever draw breath!" There's not a lot of people in the world you can work with who are smart, polarizing, and have invented the application framework you use in your day-to-day job. (And drive race cars.) You should jump at the opportunity to work with DHH.</p></li>
<li><h3>Fame &amp; fortune await.</h3>

<p>Or, well, at least fame does. I have no idea what 37signals would offer for this job, though I bet they aren't stingy on the paychecks. But being part of 37signals (while once again polarizing) ensures you notoriety in the world of Rails in particular and programmers in general. Most people you'll talk to will know where you work. Your title and position will be meaningful -- and also note that your personal fame will skyrocket. If you wanted to suddenly gain a few thousand Twitter followers (without having to pay $5.00), getting this job would be a great way to do it. Keep in mind too that, when you're a 37signals alum (unless you intend to be a lifer), having "Programmer at 37signals" on your resume will look even more stellar than all those follower numbers.</p></li>
<li><h3>Work with the best -- and be the best.</h3>

<p>37signals' programming team is the crème de la crème of the Rails world. You'll be challenged constantly to be just as great as they are. Imagine an environment where you might be the weakest link -- doesn't that thought thrill you? To work with the smartest, most dedicated people in the business? People who are at the apex of their field? You'll grow and change and learn in ways you probably never expected, all because 37signals is a team of the best. And you can also take secret joy in the thought that, since they accepted you, they must see some of the same greatness in you as well.</p></li>
</ol>


<h2>Why You Shouldn't</h2>

<ol>
<li><h3>You're not the best.</h3>

<p>But in a team of greats, even being great is not enough -- or, to use a more colorful metaphor, in a constellation with stars as bright as 37signals, you have little hope of shining brighter. I hear Google engineers suffer from similar problems, and also University of Chicago undergraduates. Coming from places where you were the best, now you'll be just another programmer. For some, the knowledge that they're there is enough: but there are lots of places with amazing teams, and some where the teams have more room for you to stand out than in 37signals (or Google or the U of C). These places are waiting for you, though they don't yet have the fame and reach of 37signals. It's up to you to find them!</p></li>
<li><h3>While it's a great company, it's still a company.</h3>

<p>I love startups. In a startup I'm not just a programmer: I do lots and lots of work with computers, it's true, and most of that is programming. But I'm also responsible for marketing, design, number crunching, tech support, user experience, and when you get right down to it a little bit of everything else too. In a small group you must be a talented polymath, and what you don't know how to do you learn quickly. 37signals is 36 people big and they were founded in 1999. Personally speaking I like growing outside of my computer-walled comfort zone. How much of that would you get at 37signals? That's not an easy question to answer, but I would bet not a whole lot -- or, at least, less than you would somewhere else.</p></li>
<li><h3>Go do it yourself.</h3>

<p>While 37signals is a great company, there's nothing inherently special about it. They make CRM software, and while that's an interesting problem space, there's tons of fascinating questions to answer out there -- questions that can only be answered through excellent software! The point of Rework is that there's no real magic in 37signals that people who are smart and dedicated can't create themselves. In my heart, I feel like DHH would look down on you for joining a corporation instead of becoming an awesome entrepreneur yourself. Sure, you'd be joining his company, but ultimately, if you're so great, why aren't you out there making a name of your own, rather than riding on someone else's coattails? Even if they're his.</p></li>
<li><h3>Fame &amp; fortune await!</h3>

<p>If you're a gainfully employed Rails programmer, most likely you make a comparable amount to what 37signals could offer you, unless they're dramatically out of line with what the market pays. And while they're famous (and you would become more so, too, if you joined them), if you want to be a programming luminary in your own right, you can't join stars that have already risen. Do you really want fame and fortune? Then you don't want to join 37signals. They've already arrived there, and while there's money to be made and people to impress, if you want to to make it big you need to take a risk and not join an established, successful company... regardless of how awesome they are.</p></li>
</ol>


<h2>In The End</h2>

<p>At the point I'm at in my career, 37signals -- while incredibly appealing -- isn't the right choice for me. I hope to conquer the world myself, rather than join victorious conquerers. But where I was at five years ago? I would have moved heaven and earth to swing an interview there. If you haven't picked this up already, they're my programming heroes: and they should be yours too, because they care about everything that's important in this industry. So if you're at all interested in being a programmer among programmers, then 37signals is calling you.</p>

<p>If not, I look forward to seeing what you create in the future, because I bet it'll be stellar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking Up With GirlsGuideTo]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/27/breaking-up-with-girlsguideto/"/>
    <updated>2012-12-27T19:40:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/27/breaking-up-with-girlsguideto</id>
    <content type="html"><![CDATA[<p>It's never easy to decide to move on, particularly when you're a cofounder. It definitely feels less like a business shakeup and more like a real breakup.</p>

<p>But I must announce that my time at GirlsGuideTo has officially ended.</p>

<p>I'm proud of the work I've done for GirlsGuideTo. I took a <a href="http://old.girlsguideto.com/home">decrepit, slow PHP Drupal installation</a> and turned it into a <a href="http://girlsguideto.com/">speedy, modernized Rails application</a>. The new GirlsGuideTo uses some incredibly modern technologies to be fast, while still being maintainable and consistent. The pages load near-instantly thanks to <a href="http://joshsymonds.com/blog/2012/12/18/making-your-web-pages-ridiculously-fast-without-breaking-them/">head.js and Turbolinks</a>, and the Rails code is well-separated and highly tested thanks to some awesome concerns and really nifty Rack middleware.</p>

<p>It also features a really kickass design from my friend <a href="https://twitter.com/LukesBeard">@LukesBeard</a>, so it also looks great in addition to feeling great.</p>

<p>Though I'm moving to greener pastures, I'm sure GirlsGuideTo has a bright future ahead of them. As for me, I'm doing some work for <a href="http://everest.com/">Everest</a> -- they're really awesome people that need their backend scaled right into infinity, and I think I'm the guy to do it for them. In fact, if you download the <a href="https://itunes.apple.com/us/app/everest-live-your-dreams-achieve/id581016826?mt=8">super cool free app</a> or have downloaded it at launch, you've already touched some of my code! The best part about onboarding quickly is having code live in production almost immediately.</p>

<p>So keep on watching this spot for more of the same that you've come to expect -- adrenaline-filled posts on the exciting world of server scalability and optimization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not to Apply for a Job]]></title>
    <link href="http://joshsymonds.com/blog/2012/06/20/how-not-to-apply-for-a-job/"/>
    <updated>2012-06-20T22:29:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/06/20/how-not-to-apply-for-a-job</id>
    <content type="html"><![CDATA[<p>I've been looking about two weeks now for a really fantastic designer for GirlsGuideTo -- a designer that's as fabulous as the site itself. Somewhat surprisingly, given how many people are unemployed or underemployed, my search has been really difficult. And not because of a dearth of responses: in fact, quite the opposite. I estimate I've received more than a hundred resumes in response to Craigslist postings, LinkedIn listings, and advertising in Dribbbble. And most surprising to me is the fact that the vast majority of these responses just aren't very good.</p>

<p>I'm sure that many of these resumes and coverletters come from experienced, seasoned professionals with a genuine and burning desire to be paid -- a desire that is equally matched by my hunger to pay them for the amazing work they can do. But frankly, you wouldn't know it from reading their letters. 99.9% of them are just... <em>bad</em>. So, I've taken the time to distill the mountain of resumes in my inbox into three succinct lessons. If you're going to apply for a job, please take them to heart before writing your potential employer. Not only will you increase the chances you'll actually be hired, but they will definitely thank you for breaking the tide of mediocrity that is surely washing over them. If you're the one to stand out, believe me... you'll get noticed.</p>

<!-- more -->


<h2>Don't Copy and Paste</h2>

<p>Easily the most common mistake I see -- the one that is most likely to make me entirely skip a candidate -- is that the cover letter is copied and pasted. It either doesn't include my company name (GirlsGuideTo is somewhat distinctive), or even more embarrassing, is addressed to a different company's name. I can always tell when I'm reading a copy/pasted letter. It's generic and boring; it enumerates talents and skills that I have no need for and didn't include in my job listing.</p>

<p>I took the time to hand-craft the job posting you read. I know you're probably applying to lots of jobs, and I sympathize that being without work -- or trying to find a new job -- is arduous and unpleasant. But if you want to be seriously considered, you must include three things in your cover letter:</p>

<ol>
<li>The name of the company you're applying to,</li>
<li>The position in the company you're applying for,</li>
<li>Why your skills make you a perfect fit for that position.</li>
</ol>


<p>The third one is obviously the most complicated but also the most necessary. The degree to which you customize your cover letter for the target job will be directly proportional to the number of people that respond positively to it. Believe me, I can tell which people actually wrote even a few choice words actually responding to my listing.</p>

<p>They are the ones that I will write back.</p>

<h2>Don't Make Me Find You</h2>

<p>If you're an Internet professional -- web designer, programmer, usability expert, whatever -- you must have an online presence. It can be as simple as your LinkedIn profile, but ideally should be a portfolio, with your own personalized URL, summarizing the work you've done, hopefully with lots of links and (even better) pictures. You should link to this summary of you in your cover letter. Be proud of it; include it in the first or second sentence. Say something like, "You can find my resume, and my portfolio, online at http://myattractivenamehere.com. But the parts that are most directly pertinent to you are..." And then go on to list the jobs that you've done that make you perfect for me!</p>

<p>Don't include a list of twenty links in your coverletter, saying they're you're work. If I'm feeling gracious I might click on the first two. Chances are they won't be what I'm looking for, and then I'll consign your resume to the dustbin of defeat. (This outcome might have been averted if you had twenty thumbnails I could quickly glance over on your portfolio, though.)</p>

<p>And for Heaven's sake include some kind of link to yourself! Anything at all works. If you're really an Internet professional and not just some high school student -- or even if you ARE a high school student -- you should have an online presence somewhere. If you don't include links in your resume or your cover letter, the chances of me Googling you to find them are absolutely zero. As are the chances of you landing this job.</p>

<h2>Don't Make Me Read Your Resume</h2>

<p>This is a harsh truth, but one I've heard again and again from people who have to make hiring decisions:</p>

<p>We don't read resumes unless we've already decided we're interested in a candidate.</p>

<p>Your cover letter is going to be your one and only chance to sell yourself. Go all out. If you have skills that you feel are directly applicable to the position, mention them in the cover letter, and then explain why those skills make you suited for the work. Your previous experiences that give you unique and valuable insight into the job should be front and center, in the letter itself.</p>

<p>And most likely, the second place I go, after reading your cover letter, won't be your resume either. It'll be your online presence, either your portfolio or sample sites you've linked me to. I'll only open your resume after I've already decided you're most likely a good fit -- and to be honest, I probably won't read it very closely anyway, since by that point I've already made a decision.</p>

<p>I know this seems unfair. You might be perfect for me; your resume even lists your numerous and varied accomplishments that make you my ideal match. But your competitor, with a very similar set of experiences, actually told me her accomplishments in her first paragraph. She drew my attention right to them -- I didn't even have to look in her resume to start being impressed by her. When I open her portfolio, I'll see that she's right. She <em>is</em> perfect for me. And then she goes on the shortlist, and you and your perfect resume are skipped over, unopened.</p>

<p>What I'm really trying to say with this small list of "don'ts" is very simply this: don't get lost in the crowd. I don't care if the designer we end up choosing is a guy or girl, Chicagoan or San Franciscoan, experienced or freshly graduated. (Also it's illegal for me to care, but that's beside the point.) All that really matters to me is that they're good; and more than being good, they're not afraid to say, "I'm perfect for you, and here's why."</p>

<p>And, honestly, that's all that matters to any prospective employer from their applicants. If you really want to be hired, then you'll have to show that you respect the time and energy they've invested in conducting a search for someone like you. Write plainly and to impress -- cram your cover letter with customized material, responding directly to the job posting. Include links early and often to your online presence. And fill your letter with proof after repeated proof that you are the ideal match they've been searching for.</p>

<p>Do all that, and you'll get a response to each and every one of your applications. And, hopefully, most of those responses will be positive.</p>
]]></content>
  </entry>
  
</feed>
