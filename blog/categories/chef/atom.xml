<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Hi, I'm Josh Symonds]]></title>
  <link href="http://joshsymonds.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2015-02-04T17:18:55-06:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef Cookbook Continuous Integration]]></title>
    <link href="http://joshsymonds.com/blog/2015/02/04/chef-cookbook-continuous-integration/"/>
    <updated>2015-02-04T11:37:38-06:00</updated>
    <id>http://joshsymonds.com/blog/2015/02/04/chef-cookbook-continuous-integration</id>
    <content type="html"><![CDATA[<p>Testing infrastructure is as crucial to the success of a business as testing applications. Yet most infrastructure is untested and validated only occasionally, and only by hand &ndash; this is especially a tragedy when chef is used, because chef has many high-quality tools to provide testing coverage from <a href="https://foodcritic.io">static analysis</a> to <a href="https://github.com/sethvargo/chefspec">unit testing</a> and even <a href="http://kitchen.ci/">full convergence runs</a>.</p>

<p>At Symonds &amp; Son, we spent a lot of time and energy integrating our tests on <a href="https://circleci.com">CircleCI</a> into a continuous deployment process that begins with three layers of testing and ends with automated cookbook deployment to the chef servers we manage. I&rsquo;ll discuss chef continuous deployment in a later article; here, I&rsquo;ll cover how we got Foodcritic, ChefSpec, and Test Kitchen all running seamlessly in Circle.</p>

<!-- more -->


<blockquote><p>My good friend and coworker, <a href="https://twitter.com/chrislopresto">Chris LoPresto</a>, contributed greatly to the engineering innovations discussed here.</p></blockquote>

<p>CircleCI has a number of great integrations: here we&rsquo;ll use their docker service to create docker instances and automatically converge them with Test Kitchen. Before we do so, we&rsquo;ll run foodcritic and ChefSpec on them as well just to make sure everything works as we would expect.</p>

<h2>Get Tested</h2>

<p>You&rsquo;ll need to actually set up tests and get them running before getting them into continuous integration! Happily the process of testing cookbooks is relatively fast and easy: all three software tools Symonds &amp; Son uses have great documentation and tons of examples on the Internet. Here&rsquo;s how we set them up.</p>

<h3>Foodcritic</h3>

<p>Running Foodcritic is pretty simple. Simply add the foodcritic gem to your <code>Gemfile</code> and execute a command like this:</p>

<pre><code class="sh">foodcritic . -X spec -f any -t ~FC003
</code></pre>

<p><code>~FC003</code> instructs Foodcritic not to use a rule that guards for chef-solo. We intentionally do not obey rule FC003 as we use chef-zero locally and chef-server remotely.</p>

<h3>ChefSpec</h3>

<p>ChefSpec is slightly more complicated. Your best bet is to follow the excellent installation guide at the <a href="https://github.com/sethvargo/chefspec">ChefSpec README</a>, since we don&rsquo;t really do any customization on top of that: our ChefSpec tests are rather traditional. Here&rsquo;s a sample from our cookbook that updates aptitude:</p>

<pre><code class="ruby">require 'chefspec'
require_relative '../spec_helper'

describe 'custom_apt::default' do

  before { stub_recipes %w(apt) }

  let(:chef_run) { ChefSpec::Runner.new.converge(described_recipe) }

  it 'upgrades upstart' do
    expect(chef_run).to upgrade_package('upstart')
  end

end
</code></pre>

<h3>Test Kitchen</h3>

<p>The most complicated of the chef testing suites, Test Kitchen performs actual convergence on a platform of your choice and then will run automated tests on the created instance. Test Kitchen is also the most essential of the suites, in my opinion &ndash; performing static analysis and unit tests are all well and good, but the only way to definitively determine if your cookbook works is to actually ensure servers converge and that their internal state is correct.</p>

<p>Most of our cookbooks use <a href="https://docker.com">Docker</a> containers to perform testing. This has downsides: docker containers will not allow you to modify important files in their <code>/etc</code> directory. For example, you cannot change iptables rules in a docker container. Additionally Upstart does not work at all in docker-land. Despite drawbacks like this, docker has many advantages. It is extremely fast and well-supported across testing providers. In fact, our continuous integrator of choice, Circle, provides first-class support for docker containers on their test VMs &ndash; allowing you to run docker Test Kitchen convergences directly on Circle.</p>

<p>Happily, the <code>.kitchen.yml</code> that supports this is rather standard:</p>

<pre><code class="yaml">---
driver:
  name: docker
  privileged: true

provisioner:
  name: chef_zero
  require_chef_omnibus: 11.16.4
  attributes:
    test-kitchen: true

platforms:
  - name: ubuntu-14.04

suites:
  - name: default
    run_list:
      - recipe[cookbook::default]
</code></pre>

<p>The only special section to note here is the driver configuration: we&rsquo;re using docker and setting it to privileged mode, which enables it to more exactly match a cloud VM.</p>

<p>Just for completeness&#8217; sake, here&rsquo;s a simple test from the afore-mentioned aptitude cookbook testing for the proper version of Upstart:</p>

<pre><code class="ruby">require 'serverspec'
set :backend, :exec

describe command('apt-cache policy upstart | grep Installed') do
  its(:exit_status) { should eq 0 }
  its(:stdout) { should include('1.12.1') }
end
</code></pre>

<p>Once you have your three testing suites set up, all that remains is to integrate them into Circle.</p>

<h2>Circle Continuous Integration</h2>

<p><a href="https://circleci.com">CircleCI</a> is my favorite continuous integration tool. It has a great UI and is really simple to set up with GitHub: it also has great support for third-party plugins, and even better, lets you SSH into a failed instance to run tests yourself and figure out exactly what went wrong.</p>

<p>For our purposes, we need CircleCI to properly install chef and then run all the tests on our cookbook. As it turns out this is not all that difficult to set up: you&rsquo;ll want a <code>circle.yml</code> that looks a little like this&hellip;</p>

<pre><code class="yaml">machine:
  services:
    - docker
dependencies:
  pre:
    - if ! chef -v; then
        if ! [ -f chefdk_0.3.5-1_amd64.deb ]; then
          wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chefdk_0.3.5-1_amd64.deb;
        fi;
        sudo dpkg -i chefdk_0.3.5-1_amd64.deb;
      fi
    - chef gem install specific_install
    - sudo chef gem specific_install kitchen-docker -l http://github.com/peterabbott/kitchen-docker.git -b v1.6.4
    - sudo chef gem uninstall chefspec
    - chef gem install chefspec:4.0.1
    - mkdir ~/.chef
    - cp ~/${CIRCLE_PROJECT_REPONAME}/test/circle/knife.rb ~/.chef/knife.rb
  cache_directories:
    - ./chefdk_0.3.5-1_amd64.deb
test:
  override:
    - chef exec berks install
    - chef exec rspec -P spec/**/*_spec.rb --tty --color
    - chef exec foodcritic . -X spec -f any -t ~FC003
    - chef exec kitchen test
</code></pre>

<p>There&rsquo;s a lot going on here, so let&rsquo;s dive in at the top!</p>

<p>First, the <code>machine.services</code> directive informs CircleCI we want docker to start on our Circle test VMs. Without this, the kitchen specs won&rsquo;t work at all.</p>

<p>Next comes the dependencies directive. Chef provides the excellent <a href="https://downloads.chef.io/chef-dk/">ChefDK</a> download which bundles everything we care about: chef&rsquo;s own command-line interface, <a href="https://berkshelf.com">Berkshelf</a> (for managing cookbook dependencies), and all three testing tools we&rsquo;re using. We&rsquo;re installing the official Chef <code>.deb</code> distribution of ChefDK onto the Circle machine to get around downloading each tool individually.</p>

<p>Next comes a bit of gem back-and-forth. Until very recently, the GitHub <a href="https://github.com/portertech/kitchen-docker">kitchen-docker main fork</a> was not kept up-to-date: we manually install a version of kitchen-docker that actually works, and then reinstall a better version of chefspec.</p>

<p>Finally, we copy a stub <code>knife.rb</code> to <code>~/.chef/knife.rb</code>. You&rsquo;ll need to set this file up yourself, but it&rsquo;s intentionally pretty small. If you&rsquo;re downloading any cookbooks from a Berkshelf-API server, you&rsquo;ll probably need to include a valid private key for that server either in the <code>knife.rb</code> (bad) or include it as an environment variable in Circle (good). Here&rsquo;s what the <code>knife.rb</code> should look like:</p>

<pre><code class="rb"># A knife.rb for Circle

node_name 'circleci'
chef_server_url 'https://your.chef.url'
client_key ENV['CIRCLE_CI_MACHINE_USER_CHEF_KEY']
</code></pre>

<p>Once all the setup is done, running the tests is by comparison quite simple! We perform a <code>berks install</code> and then run each test command individually. If you have your tests working locally, this should get them working properly in Circle as well.</p>

<p>Of course, even if you are testing your cookbooks, you&rsquo;re really only half-way to heaven. After testing comes deployment: and this can be a little difficult with chef&rsquo;s complicated keying and validation structure. In my next post I&rsquo;ll detail how we automatically release and deploy cookbooks to their destination chef servers&hellip; stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Cookbooks for Rails]]></title>
    <link href="http://joshsymonds.com/blog/2013/01/22/chef-cookbooks-for-rails/"/>
    <updated>2013-01-22T12:36:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/01/22/chef-cookbooks-for-rails</id>
    <content type="html"><![CDATA[<p>I spent awhile trying to find other people&rsquo;s Chef cookbook collections for deploying Rails applications. In the absence of anything other than old GitHub repositories, I decided to write a quick post summarizing the cookbooks I used and a few settings that made them work as I expected. I&rsquo;ll go by the roles that I created to organize the cookbooks, starting with the most basic: base.</p>

<!-- more -->


<h2>base</h2>

<pre><code class="ruby">run_list %W(
  recipe[chef-client::delete_validation]
  recipe[chef-client::config]
  recipe[chef-client::service]
  recipe[apt]
  recipe[monit]
  recipe[postfix]
  recipe[openssh]
  recipe[ntp]
  recipe[vim]
  recipe[build-essential]
  recipe[user::data_bag]
  recipe[logrotate]
  recipe[ohai]
  recipe[ruby_build]
  recipe[rbenv::system]
  recipe[sudo]
  recipe[zsh]
  recipe[oh-my-zsh]
  recipe[collectd]
  recipe[collectd::attribute_driven]
  recipe[htop]
  recipe[runit]
  recipe[rsyslog::client]
)
</code></pre>

<p>This is the run list I&rsquo;m using as the base for all the servers. I don&rsquo;t think there&rsquo;s anything surprising here, but I do want to point out a few things:</p>

<ul>
<li><strong>openssh</strong> should be configured like this:</li>
</ul>


<pre><code class="ruby">  default_attributes 'openssh' =&gt; {
      'permit_root_login' =&gt; 'no',
      'password_authentication' =&gt; 'no'
    }
</code></pre>

<p>You don&rsquo;t want to allow root logins or password logins. It is also probably worthwhile to delete any preexisting sudoer for your AMI image if one exists (like ubuntu for example), using&hellip;</p>

<ul>
<li><p><strong>user::data_bag</strong> from <a href="http://github.com/fnichol/chef-user">this cookbook</a>. It allows you to have data bags for your users that get automatically added (or removed) from every server. It&rsquo;s really helpful.</p></li>
<li><p>I went back and forth on <strong>ruby_build and rbenv</strong> in the base cookbook. Compiling your own Ruby takes significantly longer than installing Ruby from a package, and I could just compile Ruby on the application servers and use the Ruby package on everything else. Ultimately I decided to keep compiled Ruby in the base list &ndash; it seems slightly faster than the package and allows me to apply performance patches, and since I made an AMI of the base role the speed difference didn&rsquo;t matter a whole lot to me. But I can definitely see taking this out.</p></li>
<li><p><strong>zsh and oh-my-zsh</strong> are obviously just silly nice-to-haves. Use a zsh theme that says the server name or else you&rsquo;ll get confused.</p></li>
</ul>


<h2>statistics</h2>

<p>I&rsquo;m running Graylog2 and Graphite to compile logs and interesting statistics from our servers. This is the runlist that establishes the role dedicated to these two pieces of software, which I called <code>statistics</code>:</p>

<pre><code class="ruby">run_list %W(
  recipe[ebs]
  recipe[apache2]
  recipe[statsd]
  recipe[python]
  recipe[graphite]
  recipe[graylog2]
  recipe[graylog2::apache2]
)
</code></pre>

<p>I use <a href="https://github.com/titanous/chef-ebs">this EBS cookbook</a> with this configuration:</p>

<pre><code class="ruby">default_attributes 'ebs' =&gt; {
    'volumes' =&gt; {
      '/data' =&gt; {
        'size' =&gt; 100,
        'fstype' =&gt; 'xfs'
      }
    }
  }
</code></pre>

<p>This server saves and compiles enormous amounts of data, and in order to hold it all correctly I provision an external EBS drive to contain it. I&rsquo;m actually not even sure 100 gigs is enough space but it seems good for now. elasticsearch, mongodb, and graphite are all set up to save their data to subdirectores in /data. While I could easily have made this a RAID array instead, persistence of this data is not super important to me right now: while it would suck to lose all our analytics information, given our traffic it would rebuild into something useful very quickly anyway.</p>

<p>I would use nginx instead of Apache2, but for a server only accessible internally that will probably not see a lot of traffic, it was much easier and faster to just set up Apache2 and passenger than start unicorns for the Graphite and Graylog web interfaces.</p>

<h2>app</h2>

<pre><code class="ruby">run_list %W(
  recipe[imagemagick]
  recipe[nginx]
  recipe[unicorn]
)
</code></pre>

<p>Probably among the least surprising roles. The application servers use nginx and unicorn for blazingly fast speed. Make sure to add the nginx collectd plugin to this server for additional metrics and monitoring:</p>

<pre><code class="ruby">default_attributes 'collectd' =&gt; {
    'plugins' =&gt; {
      'nginx' =&gt; { }
    }
  }
</code></pre>

<p>And those are the basic roles I developed. Because Everest is a complicated application there are a number of roles that I don&rsquo;t discuss here, but this should be more than enough to get anyone started for some good, sensible Chef cookbooks to use with Rails.</p>

<h1>Security &amp; Safety</h1>

<p>Before you deploy a server using any of these roles, make sure to keep security and safety in mind. A lot of these tools (like Graphite and Graylog2) allow web access and run servers with potential security vulnerabilities. Lock them behind Apache2 basic access, change your EC2 security group settings to allow only certain IP addresses access, and establish a VPN for your internal network. With logs, statistics, and other business-sensitive information, you can never be too security-conscious.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Chose Chef Over Rubber]]></title>
    <link href="http://joshsymonds.com/blog/2013/01/18/why-i-chose-chef-over-rubber/"/>
    <updated>2013-01-18T14:34:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/01/18/why-i-chose-chef-over-rubber</id>
    <content type="html"><![CDATA[<p>One of my mandates at Everest has been to sanitize the server build and deploy process. Provisioning every server individually with the same bash script was not exactly the height of extensibility and maintainability, and unfortunately had resulted in an enormous cluster that was very opaque: there was nearly no visibility into what the servers were actually doing. When I evaluated options to create a better process I looked at my go-to configuration management tool, <a href="https://github.com/wr0ngway/rubber">rubber</a>, in addition to <a href="http://en.wikipedia.org/wiki/Chef_(software)">Chef</a> and <a href="http://en.wikipedia.org/wiki/Puppet_(software)">Puppet</a>. As a result of this evaluation &ndash; and surprising even myself &ndash; I ended up choosing Chef as our solution. Here&rsquo;s why.</p>

<!-- more -->


<h2>Collaboration</h2>

<p>One of rubber&rsquo;s weaknesses is it is not a particularly great collaborative tool. If both you and someone else are provisioning a new server simultaneously, you&rsquo;ll get a merge conflict in your server yaml file: you really don&rsquo;t want to make a mistake resolving <em>that</em> merge conflict.</p>

<p>By contrast, it&rsquo;s really easy for multiple people to work together in Chef. You can be working in the same cookbook, even, and just altering different recipes. Bootstrapping several servers simultaneously couldn&rsquo;t be easier. And treating the Chef server as the central authority for cookbooks is also extremely helpful for keeping everyone on the same page with regards to what&rsquo;s actually going into the servers.</p>

<p>Chef is just a better tool for teams of people.</p>

<h2>Extensibility &amp; Community Support</h2>

<p>For the tools that rubber provides in its stack &ndash; and it provides a lot &ndash; it&rsquo;s an excellent solution. But adding additional facilities into rubber is a pain. You either have to come up with recipes on your own, or hope that someone has a semi-active fork with what you want in it. There&rsquo;s no real extensibility, and while it&rsquo;s easy enough to roll your own recipes, it&rsquo;d definitely be ideal not to repeat work if you&rsquo;re fairly confident someone else has already done it.</p>

<p>Enter Chef cookbooks. There are a frightening amount of active cookbooks on Github for every need imaginable. Many are actively supported, and even if they&rsquo;re not precisely what you&rsquo;re looking for, they provide an excellent jumping-off point for creating your own solutions.</p>

<p>We&rsquo;re using the excellent <a href="https://github.com/applicationsonline/librarian">librarian</a> gem to manage our external cookbooks and the source cookbooks I&rsquo;ve been developing internally for us. It&rsquo;s a great way to treat cookbooks like any other dependency to resolve, and will save you a lot of time in git cloning repositories.</p>

<h2>More Granularity</h2>

<p>rubber allows you to control a lot, on a per-server basis. But it has no real equivalent to data bags or even environments. Adding a user&rsquo;s SSH key to my deploy recipe used to be an unpleasant process. Now I can just update the users data bag with a new entry and instruct my servers to pull it: tada, new user on the servers.</p>

<p>Similarly changing postfix configuration on a per-environment basis is a snap.</p>

<h1>But Rubber is a Great Tool</h1>

<p>Don&rsquo;t get me wrong: I still really like rubber. It doesn&rsquo;t fit for Everest&rsquo;s use case, definitely &ndash; with so many servers and so much going on behind the scenes, we really needed more granularity, control, and power. But if I were provisioning just one server, or even three or four, then rubber would still be my go-to tool.</p>

<p>Why? It&rsquo;s just a whole lot faster to get started with than Chef. It makes tons of sensible default decisions that simplify your life really significantly. You don&rsquo;t have to go searching for good recipes or the right way to do things. Just like Rails, rubber <strong>knows</strong> the right way to do things. As long as you take its advice you&rsquo;ll go far, but trying to work against its defaults will be really painful.</p>

<h2>Final Word on Chef vs. Puppet</h2>

<p>Doesn&rsquo;t matter, choose whichever you like more.</p>
]]></content>
  </entry>
  
</feed>
