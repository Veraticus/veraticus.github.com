<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hi, I'm Josh Symonds]]></title>
  <link href="http://joshsymonds.com/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2013-04-23T14:17:01-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Perils of Overengineering]]></title>
    <link href="http://joshsymonds.com/blog/2013/04/23/the-perils-of-overengineering/"/>
    <updated>2013-04-23T13:19:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/04/23/the-perils-of-overengineering</id>
    <content type="html"><![CDATA[<p>Overengineering is a special subset of the generalized problem of &#8220;making bad choices.&#8221; Usually overengineering is the result of one of two specific bad choices: either adding too much unnecessary bloat to something relatively simple, or creating a customized solution when many out-of-the-box alternatives already exist. After running into these problems over and over again, I&#8217;m going to quantify and identify them so that you and your friends can avoid the perils of overengineering.</p>

<!-- more -->


<h2>Don&#8217;t Overthink It</h2>

<p>Does your app really need Meteor? I&#8217;m not arguing that Meteor (or Backbone or your complicated stateful library of choice) isn&#8217;t super awesome or that people shouldn&#8217;t know it &#8211; some of the most successful applications on the Internet use it and frameworks like it. But does <strong>your current project</strong> need it?</p>

<p>Chances are the answer is &#8220;no.&#8221; You&#8217;ll double the amount of code in your app, introduce accessibility problems, and hinder page loads. The tradeoffs for a web application that uses boatloads of JavaScript interactions are worth it. But your eeny weeny storefront? Your JS bloat will make it impossible to maintain and difficult to use. Just cut it.</p>

<p>This goes for any technology. Coco Chanel infamously stated, &#8220;Before you leave the house, look in the mirror and take one thing off.&#8221; What she applied to fashion, I apply to code. Before you commit, look in the mirror. Do you really need everything you&#8217;re included? Did you make the best choices? If you&#8217;re not sure, do some research. It&#8217;ll save you a boatload of trouble down the river.</p>

<h2>Respect The Majority</h2>

<p>Your awesome, custom-designed redis/memcached database storage solution is eye-meltingly fantastic. You can fetch all users with a query like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vg">$d</span><span class="o">.</span><span class="n">u</span><span class="o">.</span><span class="n">f</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes half a millisecond &#8211; before caches have been warmed. It&#8217;s schemaless and uses join tables for every column. You&#8217;re the happiest programmer on the planet.</p>

<p>And silently, the people that will have to maintain your code after your departure stare at you with smoldering hatred. Because they don&#8217;t know how it works, and no, tests don&#8217;t reasonably define expectations or replace documentation. Even documentation won&#8217;t save them from the bugs hiding in your custom solution &#8211; and believe me, there will be tremendous bugs hiding there. Your client and the new developer will have to spend time fixing those problems, time that could have been spent developing useful new features.</p>

<p>So next time, instead of rolling your own, pick a great solution that already works and that has a lot of open-source support. You&#8217;ll save everyone involved a lot of time and trouble. No, you won&#8217;t be inventing the next Rails or Node.js this way. Go invent it on your own time with a project you intend to be with forever, or at least one you&#8217;ll never have to hand off.</p>

<h2>New IS Cool</h2>

<p>I know why it&#8217;s tempting to write code the fun way, instead of the proper way. Who wants to use the fuddy-duddy old technologies when some enterprising individual just made the coding mashup you&#8217;ve been waiting for? But remember to keep your audience in mind. If you&#8217;re coding for a client (and if you have a full-time job, your client is your employer) you need to make code that&#8217;s first maintainable, second performant, and, as a distant third, ground-breaking and full of awesome tech.</p>

<p>Your time to shine &#8211; your opportunity to cut yourself on the bleeding edge &#8211; is with your own private projects. And if you&#8217;re lucky and good, and the final product is really neat, thousands of people will adopt it for their use. Then, and only then, you can use it in production projects and feel like an awesome success&#8230; and without falling into one of the pitfalls of overengineering.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pricing Popular Hosting Options (With Devops Time)]]></title>
    <link href="http://joshsymonds.com/blog/2013/04/17/pricing-popular-hosting-options-with-devops-time/"/>
    <updated>2013-04-17T18:16:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/04/17/pricing-popular-hosting-options-with-devops-time</id>
    <content type="html"><![CDATA[<p>Recently I compared the major Rails hosting providers &#8211; but as opposed to most price breakdowns I&#8217;ve read on the Internet, I opted to include provisional hourly devops time to set up and perform maintenance on the servers. For the purposes of this comparison, I only selected four providers: AWS, RackSpace, BlueBox and Heroku, and I&#8217;m assuming you use all their services (rather than combining two, say Heroku Postgres with AWS EC2 instances). I found the resulting price breakdown instructive, though interpreting them (and disagreeing with the provided hours) are left as an exercise for the reader.</p>

<!-- more -->


<h2>Comparisons</h2>

<p>Any of these configurations should be adequate to support roughly a million requests a month (assuming throughput of 5 requests a second), provided most of the requests served aren&#8217;t that complicated. We&#8217;ll go for a medium database instance and aggressively cache as much as possible, thus we&#8217;ll also need to provide memcached room somewhere.</p>

<p>The big differentiator in my comparison (as opposed to others&#8217;) is certainly a devops contractor at $150 an hour. I&#8217;ll include the hours as I would estimate them personally, but for other people it might take longer or shorter &#8211; and the price could go up if there&#8217;s a ton of other software to go in the server. (For example, this theoretical application would probably eventually want redis and some sort of asynchronous worker system.)</p>

<p>So let&#8217;s get down to the details!</p>

<h3>Amazon Web Services</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>1 medium EC2 instance (1 year contract, medium utilization)</h4>
      6 unicorn workers<br/>
      1 nginx reverse proxy<br/>
      memcached
    </td>
    <td>$277.00</td>
    <td>$30.74</td>
  </tr>
  <tr>
    <td>
      <h4>1 medium RDS instance (1 year contract, medium utilization)</h4>
    </td>
    <td>$500.00</td>
    <td>$40.26</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      10 hours setup<br />
      5 hours maintenance
    </td>
    <td>$1500.00</td>
    <td>$750.00</td>
  </tr>
  <tr class='highlighted'>
    <th>Total</th>
    <th>$2277.00</th>
    <th>$821.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$12129.00</th>
  </tr>
</table>


<p>No surprises here: if you&#8217;re using AWS, the hardware is ridiculously cheap. Most of your cost is going to be engineering time to get the instance up and running and then perform maintenance and add additional features to it. That said, I&#8217;ve had an EC2 instance going for about 8 months now with no maintenance at all on my part (laziness!), so if you don&#8217;t need any additional server setup you can probably omit the maintenance time, for a monthly cost of $71.00 and a yearly cost of $3129.00.</p>

<h3>RackSpace</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>1 4GB managed cloud instance</h4>
      6 unicorn workers<br/>
      1 nginx reverse proxy<br/>
      memcached
    </td>
    <td>$0.00</td>
    <td>$262.80</td>
  </tr>
  <tr>
    <td>
      <h4>1 4GB cloud database instance</h4>
    </td>
    <td>$0.00</td>
    <td>$321.20</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      10 hours setup<br />
      2 hours maintenance
    </td>
    <td>$750.00</td>
    <td>$300.00</td>
  </tr>
  <tr class='highlighted'>
    <th>Total</th>
    <th>$750.00</th>
    <th>$884.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$11358.00</th>
  </tr>
</table>


<p>RackSpace&#8217;s managed cloud offerings are more expensive than AWS, but the theory is you can omit server-related maintenance (since they&#8217;ll keep services running and your servers themselves operational) and that&#8217;s reflected in a lowered monthly devops cost. They don&#8217;t do maintenance or improvements on your application proper, however, so I built a rather modest two hours a month in for simple tasks like upgrading Rails or performing minor server optimizations. You can once again probably ignore the monthly devops cost if you like, but that won&#8217;t have nearly the impact on the final price that it did for AWS, with a new monthly of $584.00 and a final year total of $7758.00.</p>

<h3>BlueBox</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>1 4GB cloud instance</h4>
      6 unicorn workers<br/>
      1 nginx reverse proxy<br/>
      memcached
    </td>
    <td>$0.00</td>
    <td>$385.00</td>
  </tr>
  <tr>
    <td>
      <h4>1 4GB cloud database instance</h4>
    </td>
    <td>$0.00</td>
    <td>$385.00</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      0 hours setup<br />
      0 hours maintenance
    </td>
    <td>$0.00</td>
    <td>$0.00</td>
  </tr>
  <tr class='highlighted'>
    <th>Total</th>
    <th>$0.00</th>
    <th>$770.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$9240.00</th>
  </tr>
</table>


<p>BlueBox&#8217;s claim to fame is that they perform server, application, and database setup, maintenance, and integration. Thus the need for a devops engineer is completely obviated (as reflected in the final totals). Obviously this price point is extremely attractive if you&#8217;d otherwise have to pay a server administrator and engineer, but if you have one on staff already then BlueBox&#8217;s product is easily the most expensive. You&#8217;re paying for their expertise much more than their hardware.</p>

<h3>Heroku</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>4 dynos</h4>
      12 unicorn workers<br/>
    </td>
    <td>$0.00</td>
    <td>$143.00</td>
  </tr>
  <tr>
    <td>
      <h4>memcached addon (500 MB)</h4>
    </td>
    <td>$0.00</td>
    <td>$40.00</td>
  </tr>
  <tr>
    <td><h4>Fugu database instance</h4></td>
    <td>$0.00</td>
    <td>$400.00</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      2 hours setup<br />
      0 hours maintenance
    </td>
    <td>$300.00</td>
    <td>$0.00</td>
  </tr>
    <tr class='highlighted'>
    <th>Total</th>
    <th>$300.00</th>
    <th>$583.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$7296.00</th>
  </tr>
</table>


<p>I&#8217;m always somewhat mystified by Heroku&#8217;s pricing &#8211; their database offerings are incredibly expensive, especially compared to their incredibly cheap dynos. Anyway, they provide the least expensive option for purely hosting an application, but this cheapness comes with a hidden price. Being unable to control your production environment can be a frightening proposition and exposes you to potential hidden vagaries of Heroku&#8217;s internals (such as the latest flap about their routing mesh). And the fact that their addons are third-party products means that if they go down, you have no ability to expedite their repair. I would deploy a small or medium app to Heroku (which might be perfect for this theoretical application), but for a bigger one I would definitely be hesitant.</p>

<h2>Conclusions</h2>

<p>I don&#8217;t think any of these prices are particularly surprising. For knowledgeable server engineers, AWS is indeed a tremendous bargain. For those with little or no infrastructure knowledge, Heroku or BlueBox would be a much better choice. And keep in mind these are the hours it would take me to set up these instances; the times might not be representative of another engineer. I think they&#8217;re reasonable though, and that the comparison is an interesting one to draw, even if not a tremendous revelation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I'm Not Applying to 37Signals (But Why You Should)]]></title>
    <link href="http://joshsymonds.com/blog/2013/03/19/why-im-not-applying-to-37signals-but-why-you-should/"/>
    <updated>2013-03-19T13:16:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/03/19/why-im-not-applying-to-37signals-but-why-you-should</id>
    <content type="html"><![CDATA[<p>In case you haven&#8217;t heard&#8230;</p>

<p><img src="http://f.cl.ly/items/2t3d0J0z3045350b1j2d/Screenshot_3_19_13_1_23_PM.png" alt="Rails Programmer: 37Signals" /></p>

<p>Yes, it&#8217;s true: <a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson">Willy Wonka</a> is going to grant one lucky golden ticket holder a tour of the chocolate factory. And then you get to stay there until you somehow get tired of working at one of the coolest companies on planet Earth &#8211; which, to carry my analogy, would probably be as likely to happen as getting bored of eating chocolate. If you&#8217;re into Rails, you&#8217;d have to be stupid to not at least consider such an amazing opportunity.</p>

<p>So I did, and because I&#8217;m a programmer I carefully enumerated my thoughts. If you&#8217;re on the fence at all about taking the plunge, maybe my reasoning will help you. Or horrify you &#8211; either way, you&#8217;ll have an opinion!</p>

<!-- more -->


<h2>Why You Should Apply</h2>

<ol>
<li><h3>They&#8217;ve literally written books about how great it is to work there.</h3>

<p>If you haven&#8217;t read <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745">Rework</a> you probably should. 37signals is immune to typical corporate bullshit: you won&#8217;t find stupid meetings, outside investors, or anyone burning the midnight oil here. You&#8217;ll find work. Great, meaningful, empowering work. When you get right down to it, isn&#8217;t that what people actually want out of their jobs? And you know 37signals is 100% dedicated to keeping it that way, since, well, as I said, they literally wrote the book on their business practices. They&#8217;re committed not only to the customer experience, but the employee experience. And that counts for a lot.</p></li>
<li><h3><a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson">The Man Himself</a>.</h3>

<p>For those who think that intellect is at least as sexy as looks, this man would be the January pinup for the Men of 37Signals wall calendar I&#8217;ve been lobbying so hard for them to make. He&#8217;s the inventor of Rails, he&#8217;s highly opinionated, and he even drives race cars! Assuming he takes a shine to you, what&#8217;s not to like? I imagine that, if you announced to a room of programmers, &#8220;I work with DHH,&#8221; there would be a brief hush and then everyone would be talking over each other. One would say, &#8220;That man is a crazy person!&#8221; And another, &#8220;He&#8217;s the greatest programmer to ever draw breath!&#8221; There&#8217;s not a lot of people in the world you can work with who are smart, polarizing, and have invented the application framework you use in your day-to-day job. (And drive race cars.) You should jump at the opportunity to work with DHH.</p></li>
<li><h3>Fame &amp; fortune await.</h3>

<p>Or, well, at least fame does. I have no idea what 37signals would offer for this job, though I bet they aren&#8217;t stingy on the paychecks. But being part of 37signals (while once again polarizing) ensures you notoriety in the world of Rails in particular and programmers in general. Most people you&#8217;ll talk to will know where you work. Your title and position will be meaningful &#8211; and also note that your personal fame will skyrocket. If you wanted to suddenly gain a few thousand Twitter followers (without having to pay $5.00), getting this job would be a great way to do it. Keep in mind too that, when you&#8217;re a 37signals alum (unless you intend to be a lifer), having &#8220;Programmer at 37signals&#8221; on your resume will look even more stellar than all those follower numbers.</p></li>
<li><h3>Work with the best &#8211; and be the best.</h3>

<p>37signals&#8217; programming team is the crème de la crème of the Rails world. You&#8217;ll be challenged constantly to be just as great as they are. Imagine an environment where you might be the weakest link &#8211; doesn&#8217;t that thought thrill you? To work with the smartest, most dedicated people in the business? People who are at the apex of their field? You&#8217;ll grow and change and learn in ways you probably never expected, all because 37signals is a team of the best. And you can also take secret joy in the thought that, since they accepted you, they must see some of the same greatness in you as well.</p></li>
</ol>


<h2>Why You Shouldn&#8217;t</h2>

<ol>
<li><h3>You&#8217;re not the best.</h3>

<p>But in a team of greats, even being great is not enough &#8211; or, to use a more colorful metaphor, in a constellation with stars as bright as 37signals, you have little hope of shining brighter. I hear Google engineers suffer from similar problems, and also University of Chicago undergraduates. Coming from places where you were the best, now you&#8217;ll be just another programmer. For some, the knowledge that they&#8217;re there is enough: but there are lots of places with amazing teams, and some where the teams have more room for you to stand out than in 37signals (or Google or the U of C). These places are waiting for you, though they don&#8217;t yet have the fame and reach of 37signals. It&#8217;s up to you to find them!</p></li>
<li><h3>While it&#8217;s a great company, it&#8217;s still a company.</h3>

<p>I love startups. In a startup I&#8217;m not just a programmer: I do lots and lots of work with computers, it&#8217;s true, and most of that is programming. But I&#8217;m also responsible for marketing, design, number crunching, tech support, user experience, and when you get right down to it a little bit of everything else too. In a small group you must be a talented polymath, and what you don&#8217;t know how to do you learn quickly. 37signals is 36 people big and they were founded in 1999. Personally speaking I like growing outside of my computer-walled comfort zone. How much of that would you get at 37signals? That&#8217;s not an easy question to answer, but I would bet not a whole lot &#8211; or, at least, less than you would somewhere else.</p></li>
<li><h3>Go do it yourself.</h3>

<p>While 37signals is a great company, there&#8217;s nothing inherently special about it. They make CRM software, and while that&#8217;s an interesting problem space, there&#8217;s tons of fascinating questions to answer out there &#8211; questions that can only be answered through excellent software! The point of Rework is that there&#8217;s no real magic in 37signals that people who are smart and dedicated can&#8217;t create themselves. In my heart, I feel like DHH would look down on you for joining a corporation instead of becoming an awesome entrepreneur yourself. Sure, you&#8217;d be joining his company, but ultimately, if you&#8217;re so great, why aren&#8217;t you out there making a name of your own, rather than riding on someone else&#8217;s coattails? Even if they&#8217;re his.</p></li>
<li><h3>Fame &amp; fortune await!</h3>

<p>If you&#8217;re a gainfully employed Rails programmer, most likely you make a comparable amount to what 37signals could offer you, unless they&#8217;re dramatically out of line with what the market pays. And while they&#8217;re famous (and you would become more so, too, if you joined them), if you want to be a programming luminary in your own right, you can&#8217;t join stars that have already risen. Do you really want fame and fortune? Then you don&#8217;t want to join 37signals. They&#8217;ve already arrived there, and while there&#8217;s money to be made and people to impress, if you want to to make it big you need to take a risk and not join an established, successful company&#8230; regardless of how awesome they are.</p></li>
</ol>


<h2>In The End</h2>

<p>At the point I&#8217;m at in my career, 37signals &#8211; while incredibly appealing &#8211; isn&#8217;t the right choice for me. I hope to conquer the world myself, rather than join victorious conquerers. But where I was at five years ago? I would have moved heaven and earth to swing an interview there. If you haven&#8217;t picked this up already, they&#8217;re my programming heroes: and they should be yours too, because they care about everything that&#8217;s important in this industry. So if you&#8217;re at all interested in being a programmer among programmers, then 37signals is calling you.</p>

<p>If not, I look forward to seeing what you create in the future, because I bet it&#8217;ll be stellar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Existing Rails API Solutions Suck]]></title>
    <link href="http://joshsymonds.com/blog/2013/02/22/existing-rails-api-solutions-suck/"/>
    <updated>2013-02-22T11:00:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/02/22/existing-rails-api-solutions-suck</id>
    <content type="html"><![CDATA[<p>In the past two months, since joining <a href="http://everest.com">Everest</a>, I&#8217;ve spent quite a lot of time and effort researching and reviewing the various Rails API gems and I&#8217;ve come to a startling and disheartening conclusion.</p>

<p>They all suck.</p>

<p>In different ways, sure. And many have redeeming characteristics. But overall none of them do what I would consider the three most important parts of supporting a Rails API:</p>

<ol>
<li>Be DRY. I need versioning without copy and pasting huge swathes of code. If I want to make a query optimization in an API endpoint I shouldn&#8217;t need to browse through every version of the API, applying it to each file.</li>
<li>Support views (or something like them). Rendering JSON in controllers and models is inappropriate. JSON is a representation of data: a representation of data is a view of a model. You can argue this is a presenter or serializer or whatever, and that&#8217;s fine. There are clearly places where this logic should <strong>not</strong> be, though.</li>
<li>Integrate with Rails. I have an existing and complicated web application that I want to provide an API for. Probably I want to leverage the power of the Rails stack and everything I&#8217;ve installed in it, like logging, error reporting, performance metrics and so on.</li>
</ol>


<p>Taken in that light, then, here are mini-reviews for every existing Rails API Gem I could find. And believe me, I think I found most of them. (Spoiler alert: they suck.)</p>

<!-- more -->


<h2><a href="https://github.com/intridea/grape">grape</a></h2>

<p>grape has some really cool features. Being able to define params and a description before an endpoint, rake-style, makes it incredibly obvious what you&#8217;re doing and what you&#8217;re expecting. Also it makes generating documentation quick and easy. If I were doing an incredibly small Sinatra-only API, I would choose grape to do it in every time.</p>

<p>Unfortunately that&#8217;s where the great stuff ends. For Rails applications &#8211; assuming you actually want to use grape with Rails &#8211; it is really an unpleasant solution, since it just doesn&#8217;t play nicely with Rails.</p>

<p>First, its error handling, logging, and most of its middleware stack are entirely divorced from the rest of your Rails application. I hope you don&#8217;t want to use <a href="http://newrelic.com">NewRelic</a> or <a href="http://ratchet.io">Ratchet.io</a> with grape, because if you do you&#8217;re on your own, buddy. Sure, you can get it in manually. Hooray for manual labor. In order to provide unified Graylog2 logging, statsd statistics, and error reporting for Rails and grape, I extracted the common bits into a middleware that sits in front of both of them. This was ugly and unpleasant, and frankly seemed really unnecessary.</p>

<p>Second, and for those of you already gearing up to say &#8220;but grape isn&#8217;t FOR Rails&#8221;, you end up duplicating a lot of Rails&#8217; structure inside it anyway, even in small applications. If you don&#8217;t want your API file to be two thousand lines long, you end up including endpoint modules that smell suspiciously like controllers, except with inline routing. In an actual Rails application, this separate but similar structure is by tradition hidden in the <code>lib/</code> directory, where nothing at all integral to your application ordinarily resides.</p>

<p>Third, if you want to version your API, you get to copy and paste the entire thing. To prevent us doing this every time at Everest, I implemented a module inheritance system for the API versions, but frankly it feels hacky and was difficult to get grape to support properly.</p>

<p>Fourth, its caching support is pathetic. You have to install a completely separate gem (<a href="https://github.com/artsy/garner">garner</a>) if you want any kind of caching at all. Do people who use grape not experience any sort of load? Do their APIs not engage in any sort of database querying? Why is this a tacked-on side project instead of a core feature?</p>

<p>And of course it has no view support. If you want to reuse data representations, define a method in the base API and call it all over the place. It&#8217;s like a view, but more hidden!</p>

<p>I assume some people must use grape for at least as complicated an app as I do. When I was Googling how to do versioning without copy pasting, I came across numerous slideshows from various Rails conferences discussing how great it is. None of them address any of these problems, so I&#8217;m curious how the really big players make grape work without these difficulties. (My suspicion is they don&#8217;t use grape.)</p>

<h2><a href="https://github.com/fabrik42/acts_as_api">acts_as_api</a></h2>

<p>Who thought that putting data representations inside a model was a good idea? Data representations go inside a view &#8211; that&#8217;s what views are for. You don&#8217;t see rules for coercing models to HTML inside a model. Why should JSON then be allowed? Well, to answer my rhetorical question, it shouldn&#8217;t.</p>

<p>This gem leads to really horrible uses like this when you version an API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">api_accessible</span> <span class="ss">:public</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:first_name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:last_name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:real_name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:gender</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">api_accessible</span> <span class="ss">:with_timezone</span><span class="p">,</span> <span class="kp">extend</span><span class="p">:</span> <span class="ss">:public</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:timezone</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a versioned resource. You don&#8217;t want to change the existing representation and break clients that already use the API, so instead you extend it and add in a field. The old representation has to live in your model forever, a silent sentry to the history of your mistakes, bloating your model until the day you finally get fed up with lines and lines of this and switch to actually using views for their intended purpose.</p>

<h2><a href="https://github.com/filtersquad/rocket_pants">rocket_pants</a></h2>

<p>rocket_pants actually does quite a lot right (besides having a sweet name): it&#8217;s fairly DRY and it integrates with Rails pretty well.</p>

<p>That said, versioning is still a tremendous pain in the butt. Routing allows you to at least select which controller your requests are sent to, but this quickly gets complicated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#item&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#item2&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">2</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#override&#39;</span> <span class="c1"># how does this interact with the line above?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#item3&#39;</span> <span class="c1"># x now does something different for only versions 2 and 4</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Confusing!</p>

<p>Why not have a simple fallback method where you define the highest version of your API, and the router checks to see which controllers exist in that version, moving back to an earlier version until it finds a defined controller? You could even have the router detect this on application load to prevent increased loading times. Then you don&#8217;t need any sort of fooling around with complicated routing rules. Instead you just define the basic structure of your API and your application correctly infers versions from it, and if you have specific overrides you can address them in the routing file.</p>

<p>Wishing aside, rocket_pants also doesn&#8217;t use views, instead encouraging you to use a model&#8217;s <code>serializable_hash</code> method to instruct it how to convert the model to JSON. Let&#8217;s hope you don&#8217;t have more than one representation of your model.</p>

<h2><a href="https://github.com/bploetz/versionist">versionist</a></h2>

<p>versionist supports views correctly but it suffers from a tremendously overwhelming amount of copy/pasting. It you want to version your API, it copies not only the routes inside your routes.rb, but also:</p>

<ul>
<li>Your controllers and controller specs</li>
<li>Your presenters and presenter specs</li>
<li>Your helpers and helper specs</li>
<li>Your docs</li>
</ul>


<p>To a new location. These are just copies: in all likelihood they&#8217;ll end up largely exactly the same as the previous version. It provides a Rails generator that does this automatically. I&#8217;m on the fence as to whether great support for poor design patterns is unironically helpful though.</p>

<h2><a href="https://github.com/erichmenge/api-versions">api-versions</a></h2>

<p>Though it&#8217;s practically unknown, in all my searching this is the gem that really got closest to what I was looking for. By default, it uses this heretofore unseen programming concept called &#8220;inheritance&#8221; to prevent code duplication from one version of your API to the next.</p>

<p>Unfortunately, when you use its helpfully-provided Rails generator <code>api_versions:bump</code> it still creates a new controller for each of your old controllers. While they inherit code, which is nice, why do you have an empty controller just to provide inheritance to a previous version of the API? Still, this is definitely the least amount of copy/pasting we&#8217;ve seen up until this point, and I sincerely appreciate the author&#8217;s attempt to remain DRY in the very wet API landscape.</p>

<h2>So what should I do if I&#8217;m making a Rails API?</h2>

<p>Use <a href="https://github.com/rails/jbuilder">jbuilder</a> (or <a href="https://github.com/nesquena/rabl">rabl</a>) to create views. If you have a tremendous hatred of views, use <a href="https://github.com/rails-api/active_model_serializers">active_model_serializers</a> instead to achieve the same goal. Your controllers should be pretty much like regular Rails ActionControllers. Feel free to include an extremely low-touch library like <a href="https://github.com/bploetz/versionist">versionist</a> or <a href="https://github.com/erichmenge/api-versions">api-versions</a>. Put most of your controller code in modules and include it in the actual controllers to prevent copy and pasting everywhere for the first. For the latter, not much you can do. Suck it up and copy and paste in your routes for both. Unfortunately, that&#8217;s the best solution I can come up with.</p>

<h2>Stop whining and do something about it!</h2>

<p>You know what? I think I will.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Automation With Phillips Hue &amp; Huey]]></title>
    <link href="http://joshsymonds.com/blog/2013/02/20/home-automation-with-phillips-hue-and-huey/"/>
    <updated>2013-02-20T19:32:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/02/20/home-automation-with-phillips-hue-and-huey</id>
    <content type="html"><![CDATA[<p>I released v1.0.0 of <a href="https://github.com/Veraticus/huey">huey</a> today, adding some exciting new features: specifically, light groups and group events. Using them enabled me to quickly and easily set up a light timing schedule from one of my home machines, managed with cron (through the excellent <a href="https://github.com/javan/whenever">whenever</a> gem). In case you too would like awesome automatic light magic, here&#8217;s how to make it work.</p>

<!-- more -->


<h2>Huey v1.0.0</h2>

<p>New in huey v1.0.0 are light groups: arbitrary collections of bulbs on which you can run commands simultaneously. Getting them to work is ridiculously simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Living Room&#39;</span><span class="p">)</span> <span class="c1"># Contains all bulbs that have &#39;Living Room&#39; in their name</span>
</span><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Living Room&#39;</span><span class="p">,</span> <span class="s1">&#39;Foyer&#39;</span><span class="p">)</span> <span class="c1"># All bulbs that have either &#39;Living Room&#39; or &#39;Foyer&#39; in their name</span>
</span><span class='line'><span class="n">g</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span> <span class="c1"># A group specifically containing bulbs 1 and 3</span>
</span><span class='line'><span class="n">g</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;My Bulbs&#39;</span> <span class="c1"># Name your group to find it later</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have a group set up, you can act on all its bulbs simultaneously as you would on any individual bulb.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;My Bulbs&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">bri</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">on</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">save</span> <span class="c1"># All changes you&#39;ve made are committed to all the bulbs in a group</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">bri</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="n">ct</span><span class="p">:</span> <span class="mi">500</span><span class="p">)</span> <span class="c1"># Set and save in one step</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you probably want to do the same actions to groups over and over again: for example, dimming all your lights at night and brightening them in the morning. For that we have a shorthand called events:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">event</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Event</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;All Lights Off&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="n">group</span><span class="p">,</span> <span class="n">actions</span><span class="p">:</span> <span class="p">{</span><span class="n">on</span><span class="p">:</span> <span class="kp">false</span><span class="p">})</span>
</span><span class='line'><span class="n">event</span><span class="o">.</span><span class="n">execute</span> <span class="c1"># All lights turn off</span>
</span></code></pre></td></tr></table></div></figure>


<h2>YAML Setup</h2>

<p>Huey can read your groups and events from YAML configuration files. Here&#8217;s a sample from my setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># groups.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">Study</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;Study</span><span class="nv"> </span><span class="s">Side&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Study</span><span class="nv"> </span><span class="s">Ceiling&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">Bedroom</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;Bedroom</span><span class="nv"> </span><span class="s">Left&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Bedroom</span><span class="nv"> </span><span class="s">Right&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">Living Room</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;Living</span><span class="nv"> </span><span class="s">Room</span><span class="nv"> </span><span class="s">Front&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Living</span><span class="nv"> </span><span class="s">Room</span><span class="nv"> </span><span class="s">Center&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Living</span><span class="nv"> </span><span class="s">Room</span><span class="nv"> </span><span class="s">Back&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># events.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">Wakeup</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Bedroom</span>
</span><span class='line'>  <span class="l-Scalar-Plain">actions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;on&quot;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">bri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">255</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ct</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">200</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Sunset</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Bedroom</span>
</span><span class='line'>  <span class="l-Scalar-Plain">actions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;on&quot;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">bri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">255</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ct</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">350</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s1">&#39;groups.yml&#39;</span><span class="p">)</span> <span class="c1"># Import groups</span>
</span><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Event</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s1">&#39;events.yml&#39;</span><span class="p">)</span> <span class="c1"># Import events</span>
</span><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Event</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;Wakeup&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">execute</span> <span class="c1"># Run an event on a group</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m setting up three groups here, called Study, Bedroom, and Living Room. I have a lot of potential events and I selected two to show here: what happens when we wake up, and the corresponding later afternoon setup. (If we end up hating this it&#8217;s likely to change, but it gives you an idea how this is supposed to work, anyhow.) Once everything is slurped in, running an event is simple.</p>

<h2>Whenever</h2>

<p>Finally, I have it all stitched together through whenever, because who likes reading crontabs? When you set up whenever, it creates a file called config/schedule.rb that it uses to read the crontab. I altered mine to include this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">job_type</span> <span class="ss">:event</span><span class="p">,</span> <span class="sx">%Q(cd /directory/to/huey_control &amp;&amp; ruby -e &quot;require &#39;huey&#39;; Huey::Group.import(&#39;groups.yml&#39;); Huey::Event.import(&#39;events.yml&#39;); Huey::Event.find(&#39;:task&#39;).execute(true)&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="ss">:weekday</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span> <span class="s1">&#39;9:30AM&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">event</span> <span class="s2">&quot;Wakeup&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To install your new crontab, use <code>whenever --update-crontab</code>.</p>

<p>That&#8217;s all there is to it! Now your Hue lights will work in perfect synchronization with the schedule you&#8217;ve provided, allowing you to set up your home lighting system however you like, and alter it easily from cron.</p>

<p>But there&#8217;s a lot more you can do with huey if you&#8217;d like. Why not make an event that&#8217;s triggered by an incoming email or phone call? Or set your door bell to flash your lights instead of ring a chime? With events and light groups, setting up this kind of awesome automation functionality is easier than ever. So go do something cool with it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reachability with RubyMotion]]></title>
    <link href="http://joshsymonds.com/blog/2013/02/04/reachability-with-rubymotion/"/>
    <updated>2013-02-04T17:55:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/02/04/reachability-with-rubymotion</id>
    <content type="html"><![CDATA[<p>A couple days ago I shared with a friend my code to quickly and easily do reachability checks in RubyMotion, and I figured I would post the code on my blog as well. In addition to detecting network reachability, this code suspends the operation queue when the target host is unreachable, allowing you to continue appending requests and ensuring that they will be delivered in the order they were queued.</p>

<p>There might be a more efficient way to do something similar, but this works for me.</p>

<!-- more -->


<h2>Rakefile</h2>

<p>Add the really awesome <a href="https://github.com/tonymillion/Reachability">Reachability</a> Pod to your project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Motion</span><span class="o">::</span><span class="no">Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">pods</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">pod</span> <span class="s1">&#39;Reachability&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AFNetworking AFHTTPClient Subclass</h2>

<p>I also use the super convenient AFNetworking library to quickly and easily do REST-compliant requests to my servers. This is the code I stick in my AFHTTPClient:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ServerClient</span> <span class="o">&lt;</span> <span class="no">AFHTTPClient</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Singleton!</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">instance</span>
</span><span class='line'>    <span class="vc">@@instance</span> <span class="o">||=</span> <span class="kp">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hostname</span>
</span><span class='line'>    <span class="s1">&#39;http://yourhosthere.com&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setupReachability</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">maxConcurrentOperationCount</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">suspended</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@reachability</span> <span class="o">=</span> <span class="no">Reachability</span><span class="o">.</span><span class="n">reachabilityWithHostname</span><span class="p">(</span><span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">hostname</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@reachability</span><span class="o">.</span><span class="n">reachableBlock</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">reachable</span><span class="o">|</span> <span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">suspended</span> <span class="o">=</span> <span class="kp">false</span><span class="p">}</span>
</span><span class='line'>    <span class="vi">@reachability</span><span class="o">.</span><span class="n">unreachableBlock</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">reachable</span><span class="o">|</span> <span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">suspended</span> <span class="o">=</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>    <span class="vi">@reachability</span><span class="o">.</span><span class="n">startNotifier</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>app_delegate.rb</h2>

<p>Finally, call the setupReachability method in your app delegate and you&#8217;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span><span class="ss">:launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">setupReachability</span>
</span><span class='line'>    <span class="no">AFNetworkActivityIndicatorManager</span><span class="o">.</span><span class="n">sharedManager</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Cookbooks for Rails]]></title>
    <link href="http://joshsymonds.com/blog/2013/01/22/chef-cookbooks-for-rails/"/>
    <updated>2013-01-22T12:36:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/01/22/chef-cookbooks-for-rails</id>
    <content type="html"><![CDATA[<p>I spent awhile trying to find other people&#8217;s Chef cookbook collections for deploying Rails applications. In the absence of anything other than old GitHub repositories, I decided to write a quick post summarizing the cookbooks I used and a few settings that made them work as I expected. I&#8217;ll go by the roles that I created to organize the cookbooks, starting with the most basic: base.</p>

<!-- more -->


<h2>base</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run_list</span> <span class="sx">%W(</span>
</span><span class='line'><span class="sx">  recipe[chef-client::delete_validation]</span>
</span><span class='line'><span class="sx">  recipe[chef-client::config]</span>
</span><span class='line'><span class="sx">  recipe[chef-client::service]</span>
</span><span class='line'><span class="sx">  recipe[apt]</span>
</span><span class='line'><span class="sx">  recipe[monit]</span>
</span><span class='line'><span class="sx">  recipe[postfix]</span>
</span><span class='line'><span class="sx">  recipe[openssh]</span>
</span><span class='line'><span class="sx">  recipe[ntp]</span>
</span><span class='line'><span class="sx">  recipe[vim]</span>
</span><span class='line'><span class="sx">  recipe[build-essential]</span>
</span><span class='line'><span class="sx">  recipe[user::data_bag]</span>
</span><span class='line'><span class="sx">  recipe[logrotate]</span>
</span><span class='line'><span class="sx">  recipe[ohai]</span>
</span><span class='line'><span class="sx">  recipe[ruby_build]</span>
</span><span class='line'><span class="sx">  recipe[rbenv::system]</span>
</span><span class='line'><span class="sx">  recipe[sudo]</span>
</span><span class='line'><span class="sx">  recipe[zsh]</span>
</span><span class='line'><span class="sx">  recipe[oh-my-zsh]</span>
</span><span class='line'><span class="sx">  recipe[collectd]</span>
</span><span class='line'><span class="sx">  recipe[collectd::attribute_driven]</span>
</span><span class='line'><span class="sx">  recipe[htop]</span>
</span><span class='line'><span class="sx">  recipe[runit]</span>
</span><span class='line'><span class="sx">  recipe[rsyslog::client]</span>
</span><span class='line'><span class="sx">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the run list I&#8217;m using as the base for all the servers. I don&#8217;t think there&#8217;s anything surprising here, but I do want to point out a few things:</p>

<ul>
<li><strong>openssh</strong> should be configured like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">default_attributes</span> <span class="s1">&#39;openssh&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;permit_root_login&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;no&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;password_authentication&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;no&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You don&#8217;t want to allow root logins or password logins. It is also probably worthwhile to delete any preexisting sudoer for your AMI image if one exists (like ubuntu for example), using&#8230;</p>

<ul>
<li><p><strong>user::data_bag</strong> from <a href="http://github.com/fnichol/chef-user">this cookbook</a>. It allows you to have data bags for your users that get automatically added (or removed) from every server. It&#8217;s really helpful.</p></li>
<li><p>I went back and forth on <strong>ruby_build and rbenv</strong> in the base cookbook. Compiling your own Ruby takes significantly longer than installing Ruby from a package, and I could just compile Ruby on the application servers and use the Ruby package on everything else. Ultimately I decided to keep compiled Ruby in the base list &#8211; it seems slightly faster than the package and allows me to apply performance patches, and since I made an AMI of the base role the speed difference didn&#8217;t matter a whole lot to me. But I can definitely see taking this out.</p></li>
<li><p><strong>zsh and oh-my-zsh</strong> are obviously just silly nice-to-haves. Use a zsh theme that says the server name or else you&#8217;ll get confused.</p></li>
</ul>


<h2>statistics</h2>

<p>I&#8217;m running Graylog2 and Graphite to compile logs and interesting statistics from our servers. This is the runlist that establishes the role dedicated to these two pieces of software, which I called <code>statistics</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run_list</span> <span class="sx">%W(</span>
</span><span class='line'><span class="sx">  recipe[ebs]</span>
</span><span class='line'><span class="sx">  recipe[apache2]</span>
</span><span class='line'><span class="sx">  recipe[statsd]</span>
</span><span class='line'><span class="sx">  recipe[python]</span>
</span><span class='line'><span class="sx">  recipe[graphite]</span>
</span><span class='line'><span class="sx">  recipe[graylog2]</span>
</span><span class='line'><span class="sx">  recipe[graylog2::apache2]</span>
</span><span class='line'><span class="sx">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I use <a href="https://github.com/titanous/chef-ebs">this EBS cookbook</a> with this configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_attributes</span> <span class="s1">&#39;ebs&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;volumes&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;/data&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;fstype&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xfs&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This server saves and compiles enormous amounts of data, and in order to hold it all correctly I provision an external EBS drive to contain it. I&#8217;m actually not even sure 100 gigs is enough space but it seems good for now. elasticsearch, mongodb, and graphite are all set up to save their data to subdirectores in /data. While I could easily have made this a RAID array instead, persistence of this data is not super important to me right now: while it would suck to lose all our analytics information, given our traffic it would rebuild into something useful very quickly anyway.</p>

<p>I would use nginx instead of Apache2, but for a server only accessible internally that will probably not see a lot of traffic, it was much easier and faster to just set up Apache2 and passenger than start unicorns for the Graphite and Graylog web interfaces.</p>

<h2>app</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run_list</span> <span class="sx">%W(</span>
</span><span class='line'><span class="sx">  recipe[imagemagick]</span>
</span><span class='line'><span class="sx">  recipe[nginx]</span>
</span><span class='line'><span class="sx">  recipe[unicorn]</span>
</span><span class='line'><span class="sx">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Probably among the least surprising roles. The application servers use nginx and unicorn for blazingly fast speed. Make sure to add the nginx collectd plugin to this server for additional metrics and monitoring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_attributes</span> <span class="s1">&#39;collectd&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;plugins&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;nginx&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And those are the basic roles I developed. Because Everest is a complicated application there are a number of roles that I don&#8217;t discuss here, but this should be more than enough to get anyone started for some good, sensible Chef cookbooks to use with Rails.</p>

<h1>Security &amp; Safety</h1>

<p>Before you deploy a server using any of these roles, make sure to keep security and safety in mind. A lot of these tools (like Graphite and Graylog2) allow web access and run servers with potential security vulnerabilities. Lock them behind Apache2 basic access, change your EC2 security group settings to allow only certain IP addresses access, and establish a VPN for your internal network. With logs, statistics, and other business-sensitive information, you can never be too security-conscious.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Chose Chef Over Rubber]]></title>
    <link href="http://joshsymonds.com/blog/2013/01/18/why-i-chose-chef-over-rubber/"/>
    <updated>2013-01-18T14:34:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/01/18/why-i-chose-chef-over-rubber</id>
    <content type="html"><![CDATA[<p>One of my mandates at Everest has been to sanitize the server build and deploy process. Provisioning every server individually with the same bash script was not exactly the height of extensibility and maintainability, and unfortunately had resulted in an enormous cluster that was very opaque: there was nearly no visibility into what the servers were actually doing. When I evaluated options to create a better process I looked at my go-to configuration management tool, <a href="https://github.com/wr0ngway/rubber">rubber</a>, in addition to <a href="http://en.wikipedia.org/wiki/Chef_(software)">Chef</a> and <a href="http://en.wikipedia.org/wiki/Puppet_(software)">Puppet</a>. As a result of this evaluation &#8211; and surprising even myself &#8211; I ended up choosing Chef as our solution. Here&#8217;s why.</p>

<!-- more -->


<h2>Collaboration</h2>

<p>One of rubber&#8217;s weaknesses is it is not a particularly great collaborative tool. If both you and someone else are provisioning a new server simultaneously, you&#8217;ll get a merge conflict in your server yaml file: you really don&#8217;t want to make a mistake resolving <em>that</em> merge conflict.</p>

<p>By contrast, it&#8217;s really easy for multiple people to work together in Chef. You can be working in the same cookbook, even, and just altering different recipes. Bootstrapping several servers simultaneously couldn&#8217;t be easier. And treating the Chef server as the central authority for cookbooks is also extremely helpful for keeping everyone on the same page with regards to what&#8217;s actually going into the servers.</p>

<p>Chef is just a better tool for teams of people.</p>

<h2>Extensibility &amp; Community Support</h2>

<p>For the tools that rubber provides in its stack &#8211; and it provides a lot &#8211; it&#8217;s an excellent solution. But adding additional facilities into rubber is a pain. You either have to come up with recipes on your own, or hope that someone has a semi-active fork with what you want in it. There&#8217;s no real extensibility, and while it&#8217;s easy enough to roll your own recipes, it&#8217;d definitely be ideal not to repeat work if you&#8217;re fairly confident someone else has already done it.</p>

<p>Enter Chef cookbooks. There are a frightening amount of active cookbooks on Github for every need imaginable. Many are actively supported, and even if they&#8217;re not precisely what you&#8217;re looking for, they provide an excellent jumping-off point for creating your own solutions.</p>

<p>We&#8217;re using the excellent <a href="https://github.com/applicationsonline/librarian">librarian</a> gem to manage our external cookbooks and the source cookbooks I&#8217;ve been developing internally for us. It&#8217;s a great way to treat cookbooks like any other dependency to resolve, and will save you a lot of time in git cloning repositories.</p>

<h2>More Granularity</h2>

<p>rubber allows you to control a lot, on a per-server basis. But it has no real equivalent to data bags or even environments. Adding a user&#8217;s SSH key to my deploy recipe used to be an unpleasant process. Now I can just update the users data bag with a new entry and instruct my servers to pull it: tada, new user on the servers.</p>

<p>Similarly changing postfix configuration on a per-environment basis is a snap.</p>

<h1>But Rubber is a Great Tool</h1>

<p>Don&#8217;t get me wrong: I still really like rubber. It doesn&#8217;t fit for Everest&#8217;s use case, definitely &#8211; with so many servers and so much going on behind the scenes, we really needed more granularity, control, and power. But if I were provisioning just one server, or even three or four, then rubber would still be my go-to tool.</p>

<p>Why? It&#8217;s just a whole lot faster to get started with than Chef. It makes tons of sensible default decisions that simplify your life really significantly. You don&#8217;t have to go searching for good recipes or the right way to do things. Just like Rails, rubber <strong>knows</strong> the right way to do things. As long as you take its advice you&#8217;ll go far, but trying to work against its defaults will be really painful.</p>

<h2>Final Word on Chef vs. Puppet</h2>

<p>Doesn&#8217;t matter, choose whichever you like more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking Up With GirlsGuideTo]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/27/breaking-up-with-girlsguideto/"/>
    <updated>2012-12-27T19:40:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/27/breaking-up-with-girlsguideto</id>
    <content type="html"><![CDATA[<p>It&#8217;s never easy to decide to move on, particularly when you&#8217;re a cofounder. It definitely feels less like a business shakeup and more like a real breakup.</p>

<p>But I must announce that my time at GirlsGuideTo has officially ended.</p>

<p>I&#8217;m proud of the work I&#8217;ve done for GirlsGuideTo. I took a <a href="http://old.girlsguideto.com/home">decrepit, slow PHP Drupal installation</a> and turned it into a <a href="http://girlsguideto.com/">speedy, modernized Rails application</a>. The new GirlsGuideTo uses some incredibly modern technologies to be fast, while still being maintainable and consistent. The pages load near-instantly thanks to <a href="http://joshsymonds.com/blog/2012/12/18/making-your-web-pages-ridiculously-fast-without-breaking-them/">head.js and Turbolinks</a>, and the Rails code is well-separated and highly tested thanks to some awesome concerns and really nifty Rack middleware.</p>

<p>It also features a really kickass design from my friend <a href="https://twitter.com/LukesBeard">@LukesBeard</a>, so it also looks great in addition to feeling great.</p>

<p>Though I&#8217;m moving to greener pastures, I&#8217;m sure GirlsGuideTo has a bright future ahead of them. As for me, I&#8217;m doing some work for <a href="http://everest.com/">Everest</a> &#8211; they&#8217;re really awesome people that need their backend scaled right into infinity, and I think I&#8217;m the guy to do it for them. In fact, if you download the <a href="https://itunes.apple.com/us/app/everest-live-your-dreams-achieve/id581016826?mt=8">super cool free app</a> or have downloaded it at launch, you&#8217;ve already touched some of my code! The best part about onboarding quickly is having code live in production almost immediately.</p>

<p>So keep on watching this spot for more of the same that you&#8217;ve come to expect &#8211; adrenaline-filled posts on the exciting world of server scalability and optimization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Huey Gem Release]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/21/huey-gem-release/"/>
    <updated>2012-12-21T01:53:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/21/huey-gem-release</id>
    <content type="html"><![CDATA[<p>I pushed the first version of <a href="https://github.com/Veraticus/huey">Huey</a> to <a href="http://rubygems.org/gems/huey">RubyGems</a> (calling it 0.1.0).</p>

<p>It&#8217;s in a really good state right now, actually &#8211; in addition to a rather full and complete set of tests, I added a couple neat new features:</p>

<ul>
<li><p>Now you can make as many changes as you like to a bulb, and then commit them all at once with <code>save</code> (alias as <code>commit</code> for your convenience).</p></li>
<li><p>Ability to set colors as a RGB hex. So you can do <code>bulb.rgb  = '#8FF1F5'</code> to get your bulb to be colored aqua. Colors in Hue are a little more pastel than you might expect, though, so exact shade matching might take a bit of experimentation.</p></li>
<li><p>Copyright and license information.</p></li>
</ul>


<p>I&#8217;ll be adding more features as I use it more, so watch <a href="https://github.com/Veraticus/huey">the repository</a> for changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making your Web Pages Ridiculously Fast (Without Breaking Them)]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/18/making-your-web-pages-ridiculously-fast-without-breaking-them/"/>
    <updated>2012-12-18T10:28:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/18/making-your-web-pages-ridiculously-fast-without-breaking-them</id>
    <content type="html"><![CDATA[<p>I spent a lot of time optimizing page loading speed on GirlsGuideTo. The result is pages that load almost instantly initially and on subsequent loads; and while I&#8217;m proud of the work I&#8217;ve done in getting these pages zippy, there was no real secret sauce involved. Here I&#8217;ll discuss techniques anyone can use to make their web pages load with amazing rapidity, all without breaking Google Analytics and other scripts you might already have installed.</p>

<!-- more -->


<h2>Speed It Up</h2>

<p>There are two JavaScript additions to your page I&#8217;ll be discussing here: head.js and Turbolinks.</p>

<h3>Head.js</h3>

<p>The first ingredient in our speed cake is <a href="http://headjs.com/">head.js</a>. While head.js has a number of components &#8211; media queries and dynamic CSS among them &#8211; the reason it initially became popular, and the reason I&#8217;m talking about it now, is its basic, core functionality. Head.js allows you to asynchronously load your page&#8217;s scripts. This might not sound like an enormous time savings, but consider this: do you use <a href="http://www.google.com/webfonts">Google Web Fonts</a> or <a href="https://typekit.com/">Adobe&#8217;s TypeKit</a>? Chances are you do, since everyone loves fonts. But fonts must be downloaded by the client browser, a process that usually occurs in the page&#8217;s head (before dom rendering has even begun), slowing down the rest of the page load while it waits.</p>

<p>And your user sees an empty browser while they&#8217;re waiting. That&#8217;s unacceptable.</p>

<p>Head.js alleviates this problem by giving you asynchronous script loading. Your application JavaScript, your fonts, jQuery, Google Analytics&#8230; everything that got put into your head that stopped your page from loading now loads at the same time as the rest of your content. Your user sees a page faster and is happier as a result.</p>

<p>Here&#8217;s what the code looks like for GirlsGuideTo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">head</span><span class="p">.</span><span class="nx">js</span><span class="p">(</span> <span class="p">{</span> <span class="s1">&#39;application&#39;</span><span class="o">:</span> <span class="s1">&#39;//girlsguideto.cloudfront.net/assets/application.js&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">&#39;typekit&#39;</span><span class="o">:</span> <span class="s1">&#39;//use.typekit.net/typekit.js&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">&#39;ga&#39;</span><span class="o">:</span> <span class="s1">&#39;//www.google-analytics.com/ga.js&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">&#39;jquery.embedly-2.1.7&#39;</span><span class="o">:</span> <span class="s1">&#39;//scripts.embed.ly/jquery.embedly-2.1.7.min.js&#39;</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course I didn&#8217;t hand-code that myself, I used the super helpful <a href="https://github.com/muitocomplicado/headjs-rails">headjs-rails</a> Gem to put this in my application.html.erb&#8217;s head:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= javascript_include_tag &quot;head.js&quot; %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">headjs_include_tag</span> <span class="s2">&quot;application&quot;</span><span class="p">,</span> <span class="s1">&#39;//use.typekit.net/typekit.js&#39;</span><span class="p">,</span> <span class="s1">&#39;//www.google-analytics.com/ga.js&#39;</span><span class="p">,</span> <span class="s1">&#39;//scripts.embed.ly/jquery.embedly-2.1.7.min.js&#39;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty easy, huh? Give it a shot and you&#8217;ll see your page load times start really blazing.</p>

<h3>Turbolinks</h3>

<p>Playing off of Defunkt&#8217;s amazing <a href="http://pjax.heroku.com/">pjax</a>, <a href="https://github.com/rails/turbolinks">Turbolinks</a> speeds up your pageloads by making every page request Ajax-y (or more accurately Pjax-y). When you click on a link, Turbolinks will fetch the page you requested and replace the existing document&#8217;s body with its content. No CSS or JavaScript loading occurs, making each page load blazingly fast &#8211; and thanks to the magic of pushState, your back button and everything else you&#8217;d expect on the page still work.</p>

<p>Turbolinks is ridiculously easy to install. Simply add it to your Gemfile and then, in your application.js, add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require turbolinks</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Now Fix It</h2>

<p>If you followed my advice up until this point, you might be stunned to discover your Google Analytics and <code>$(document).ready()</code> stuff has completely broken. No worries! We&#8217;ll fix it, and it&#8217;ll be quick and easy to do so.</p>

<h3>$(document).ready()</h3>

<p>This is the easiest thing to correct. <code>$(document).ready()</code> now fires before all your scripts have finished loading, since each script is loaded asynchronously and separately. So you&#8217;ll either see weird behavior from it, or it won&#8217;t execute at all (since $ will be undefined, as jQuery has yet to load). Simply replace all instances of <code>$(document).ready()</code> with <code>head()</code>. <code>head()</code> is called by head.js when your scripts have loaded. Something like this would make sense:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">head</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Load Typekit</span>
</span><span class='line'>  <span class="k">try</span><span class="p">{</span><span class="nx">Typekit</span><span class="p">.</span><span class="nx">load</span><span class="p">();}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Load Google Analytics</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_gaq</span> <span class="o">=</span> <span class="nx">_gaq</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">_gaq</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;_setAccount&#39;</span><span class="p">,</span> <span class="s1">&#39;UA-XXX-1&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">_gaq</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;_trackPageview&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Google Analytics</h3>

<p>Google Analytics will load correctly on your initial page load, now. But unfortunately it won&#8217;t load on any subsequent pages, since additional pages are called via Ajax. We need to hook into one of Turbolink&#8217;s events to correctly record users visiting our site:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">head</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;page:change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_gaq</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;_trackPageview&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>page:change</code> is called every time Turbolinks fetches and renders a page: when it does so, we call Google analytics manually to inform it to track the current page view.</p>

<h3>Other Scripts</h3>

<p>This should get you 95% of the way to having pages that are incredibly fast and work very well. One last caveat is that any script that loads on <code>$(document).ready()</code> must now also load on <code>page:change</code> as well: ready is not called when the page is already loaded, after all. So if you have CoffeeScript like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">doExcitingThings</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll want to add this as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">doExcitingThings</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="s">&#39;page:change&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">doExcitingThings</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember this is only for scripts that you&#8217;re sure are loaded after jQuery &#8211; scripts loaded asynchronously need to use <code>head()</code> instead of <code>$(document).ready()</code>.</p>

<p>And that&#8217;s all there is to it! With these simple tips (and simple fixes) your pages will be incredibly, ridiculously fast. The only downside to these techniques relates to Turbolinks. If you have a lot of script-specific state on your pages, clearing it out between page loads will probably be a big headache. For most of us, without highly stateful JavaScript applications, all you&#8217;ll see are massive speed improvements. Your users won&#8217;t believe how fast your site is, and best of all, these changes are really easy to implement. So what&#8217;re you waiting for? Get JavaScripting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Want for Christmas]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/12/what-i-want-for-christmas/"/>
    <updated>2012-12-12T16:08:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/12/what-i-want-for-christmas</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working super hard recently, though not blogging about it, and meanwhile a lot of people have been asking me what I want for the holiday season.</p>

<p>Thus I&#8217;m taking a massive departure from the normal, professional tone of this blog and publishing a list of the holiday presents that would just bowl me over with joy. If you know and love me, feel free to buy any item from this list &#8211; or multiple ones if you know and love me that much.</p>

<p>If you don&#8217;t, then don&#8217;t worry about it! I&#8217;ll be back soon with real content that will hopefully be both pithy and edifying.</p>

<!-- more -->


<p>This is roughly in order of how strongly I desire the item in question.</p>

<ol>
<li>New pair of high-quality in-ear headphones with a microphone (iPhone compatible)</li>
<li><a href="http://www.nest.com/">Nest Thermostat</a></li>
<li><a href="https://jawbone.com/up">Jawbone Up</a></li>
<li>His &amp; his iPhone 5s</li>
<li>An awesome new logo from the amazing <a href="http://dribbble.com/jose_josedesign">Jose</a> that looks like <a href="http://dribbble.com/shots/480635-she">She</a> but says &#8220;Josh Symonds&#8221;</li>
<li><a href="https://itunes.apple.com/us/app/baldurs-gate-enhanced-edition/id515114051?mt=8">Baldur&#8217;s Gate: Enhanced Edition for the iPad</a></li>
<li><a href="http://www.gamestop.com/wii/games/xenoblade-chronicles-gamestop-exclusive/98535">Xenoblade Chronicles for the Wii</a></li>
<li>A new day of the week</li>
<li><a href="https://itunes.apple.com/us/app/punch-quest/id554223561?mt=8">Punch Quest for the iPhone</a></li>
<li><a href="http://smbc.myshopify.com/collections/shirts/products/save-yourself-mammal-shirt-s">&#8220;Save Yourself, Mammal!&#8221; t-shirt</a></li>
<li><a href="http://store.xkcd.com/products/tech-support">&#8220;Tech Support Flowchart&#8221; t-shirt</a></li>
<li><a href="http://www.thinkgeek.com/product/aaa5/?pfm=computing_featured_aaa5_2">Bag of Holding</a></li>
<li><a href="http://www.thinkgeek.com/product/c3bd/">Darth Vader USB Stick</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Huey, for Controlling Phillips Hue Lightbulbs]]></title>
    <link href="http://joshsymonds.com/blog/2012/11/28/huey-for-controlling-phillips-hue-lightbulbs/"/>
    <updated>2012-11-28T01:08:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/11/28/huey-for-controlling-phillips-hue-lightbulbs</id>
    <content type="html"><![CDATA[<p>I just authored a cool little Gem that allows for automatic discovery of, and control over, the pretty nifty <a href="http://meethue.com">Phillips Hue lightbulbs</a>. I decided to name it <a href="https://github.com/Veraticus/huey">Huey</a>, since I love nothing more than cute and silly names. I only spent a few hours tonight hacking it together, so I&#8217;m sure there&#8217;s a lot of room for improvement, but it works and does everything it&#8217;s supposed to and seems fairly fault tolerant; so I thought, why not announce it and fix problems when I wake up tomorrow?</p>

<!-- more -->


<p>Huey uses <a href="http://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol">SSDP</a> to discover the IP of the Hue hub the first time the code is run. I wish I could take credit for the EventMachine code that went into making this work correctly, but actually I largely cribbed it from Turboladen&#8217;s <a href="https://github.com/turboladen/upnp">upnp library</a>. I would&#8217;ve just included it as a Gem dependency but for some reason it&#8217;s not released as a Gem, which is pretty frustrating for situations like this.</p>

<p>I chose a pretty boring UUID for Huey to use: <code>'0123456789abdcef0123456789abcdef'</code>. This works just fine, but if you want to change it Huey is ultra-configurable and you can do so either in a block or directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Huey</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="s1">&#39;0123456789abdcef0123456789abcdef&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># or</span>
</span><span class='line'>  <span class="no">Huey</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="s1">&#39;0123456789abdcef0123456789abcdef&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first time you issue a request to the Hue hub, you&#8217;ll likely see an attractive error message like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Huey</span><span class="o">::</span><span class="no">Errors</span><span class="o">::</span><span class="no">PressLinkButton</span><span class="p">:</span> <span class="s1">&#39;Press the link button and try your request again&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, the first time any request is sent, Hue needs to validate the new client by you actually walking over and touching the link button on the hub. But once you do that, you can just resend the request and it should work fine. Then you can use the whole gamut of the Hue API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">all</span> <span class="c1"># Returns an array of your bulbs</span>
</span><span class='line'>
</span><span class='line'><span class="n">bulb</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># Finds the bulb with the ID of 1</span>
</span><span class='line'><span class="n">bulb</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;Living Room&#39;</span><span class="p">)</span> <span class="c1"># Finds the bulb with the name &#39;Living Room&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">alert!</span> <span class="c1"># Flashes the bulb in question once, useful for checking connectivity</span>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">on</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1"># Turn the bulb off</span>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">bri</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1"># Dim the bulb a little bit</span>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">ct</span> <span class="o">=</span> <span class="mi">500</span> <span class="c1"># Change the bulb&#39;s color</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think Huey is pretty cool and I definitely intend to make a lot of use out of it. I&#8217;ll be updating it constantly as I do so to support more and better features, so follow the repository and let me know what you think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Cache Counters in Rails]]></title>
    <link href="http://joshsymonds.com/blog/2012/10/29/dynamic-cache-counters-in-rails/"/>
    <updated>2012-10-29T17:55:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/10/29/dynamic-cache-counters-in-rails</id>
    <content type="html"><![CDATA[<p>I spent a frustrating hour today searching for a way to do dynamic cache counters in Rails.</p>

<p>The problem is best summed up in a use case. I have a model called votes. A vote can be an upvote or a downvote; I set a column called <code>type</code> indicating what it is. Though I call the column <code>type</code> there&#8217;s no need for STI here &#8211; there&#8217;s really only one model, after all. However, it is polymorphic. You can vote up any kind of content on the site. I want to cache the number of upvotes and downvotes separately for that content. Unfortunately, the out-of-the-box Rails counter mechanism doesn&#8217;t let you do this. According to the <code>counter_cache</code> documentation, you must either specify <code>true</code> or the name of the column you&#8217;re caching under. You&#8217;re out of luck if you want to change it dynamically.</p>

<p>This, then, is the solution I came up with to allow dynamic cache counters.</p>

<!-- more -->


<p>The most ideal way to do this is to hook into the existing <a href="http://api.rubyonrails.org/classes/ActiveRecord/CounterCache.html">ActiveRecord CounterCache</a> module. Given that, the code is quite simple, really:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vote</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:voteable</span><span class="p">,</span> <span class="n">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">touch</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:increment_counters</span>
</span><span class='line'>  <span class="n">after_destroy</span> <span class="ss">:decrement_counters</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="ss">:increment</span><span class="p">,</span> <span class="ss">:decrement</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">type</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">_counters&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">voteable_type</span><span class="o">.</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">_counter&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">type</span><span class="si">}</span><span class="s2">votes_count&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">voteable_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The CounterCache module has two methods we care about here: <code>increment_counter</code> and <code>decrement_counter</code>. We manually trigger these methods on the parent object&#8217;s class after a vote is created or destroyed; note that I don&#8217;t intend to change the type of the vote, but if you do, you&#8217;ll also need an after_save callback to decrement one counter and increment another. So with these callbacks, if I have a vote with type <code>up</code>, it will call <code>increment_counter</code> on the column <code>upvotes_count</code> with the ID of the saving object.</p>

<p>This code assumes that the parent model will correctly have a counter column of the appropriate type defined.</p>

<p>Instead of this quasi-hack, I briefly investigated patching Rails to allow the <code>counter_cache</code> option to accept a lambda or proc, but doing so would have involved a lot of changes and would probably be stuck forever in Github issues. This change, while not exactly as clean and portable, does the job with a minimum of fuss.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Concerns V: Searchable with Elasticsearch]]></title>
    <link href="http://joshsymonds.com/blog/2012/10/25/rails-concerns-v-searchable-with-elasticsearch/"/>
    <updated>2012-10-25T12:50:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/10/25/rails-concerns-v-searchable-with-elasticsearch</id>
    <content type="html"><![CDATA[<p>I use the wonderful <a href="http://www.elasticsearch.org/">elasticsearch</a> for my searching needs. I described in <a href="http://joshsymonds.com/blog/2012/03/25/elasticsearch-and-percolation-in-rails/">previous</a> <a href="http://joshsymonds.com/blog/2012/04/15/testing-elasticsearch-in-rails-with-tire/">posts</a> how I use and test elasticsearch in general; but in my current project, I found myself using elasticsearch in a very similar way across all my models. Call me crazy, but that sounds like a concern to me!</p>

<p>As a result of this concern, I ended up having a really neat abstraction that allowed me to search across all my models using elastcisearch&#8217;s <a href="http://www.elasticsearch.org/guide/reference/api/multi-index.html">multi-index search functionality</a>. The end result of this concern was not only less duplicated code; it was a useful utility function that acted on all the models that implemented it.</p>

<!-- more -->


<h2>The Setup</h2>

<p>I have multiple models that are searchable, all of which are searchable in somewhat similar ways. For example, users need left-handed ngram indexing for their names (for autocompletion), but also full searching on the same field; similarly, the titles of content work almost exactly the same way. The only difference between the two was the weights they should use, so I set them up similarly in tire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">settings</span> <span class="no">ElasticSearchAnalysis</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">mapping</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">indexes</span> <span class="ss">:name</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="s1">&#39;multi_field&#39;</span><span class="p">,</span> <span class="n">fields</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">name</span><span class="p">:</span> <span class="p">{</span><span class="n">type</span><span class="p">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="n">analyzer</span><span class="p">:</span> <span class="s1">&#39;full&#39;</span><span class="p">,</span> <span class="n">boost</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>        <span class="n">partial</span><span class="p">:</span> <span class="p">{</span><span class="n">type</span><span class="p">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="n">search_analyzer</span><span class="p">:</span> <span class="s1">&#39;full&#39;</span><span class="p">,</span> <span class="n">index_analyzer</span><span class="p">:</span> <span class="s1">&#39;partial&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ElasticSearchAnalysis</code> is a constant that contains the settings for the partial and full analyzers referenced in the mappings. Of course, I index more fields for content, but ultimately I was using the searchers in the two models in a very similar way: a boolean should of all the different mappings conjoined together. As I was working on the code for the two different models, it was looking more and more similar&#8230; and then when I added in searching to tags and it was just about the same thing, I figured it was time to come up with a concern. I elected to call it <code>searchable</code> and wanted it to look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Searchable</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">settings</span> <span class="no">ElasticSearchAnalysis</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># elasticsearch settings here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">searchable</span> <span class="ss">:name</span><span class="p">,</span> <span class="s1">&#39;name.partial&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where I could simply list all the fields I wanted to search.</p>

<h2>The Module</h2>

<p>This is the module I came up with to express this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Searchable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">searchable</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@search_fields</span> <span class="o">=</span> <span class="n">fields</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">searcher</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="ss">:text</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">searcher</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">field_options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">fields</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="vi">@search_fields</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="nb">load</span><span class="p">:</span> <span class="kp">true</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">boolean</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">fields</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span>
</span><span class='line'>              <span class="n">should</span> <span class="p">{</span><span class="nb">send</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="n">field_options</span><span class="p">)}</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">results</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;ve been following my series on concerns, this shouldn&#8217;t be very surprising stuff. When you call searchable, the fields are added to an instance variable: then, when you call search on the model, we concatenate all the fields together and boolean search across on each of them. So once this is all set up, you&#8217;d use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;Josh Symonds&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will generate a tire query like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="nb">load</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">boolean</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">should</span> <span class="n">text</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;Josh Symonds&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">should</span> <span class="n">text</span><span class="p">(</span><span class="s1">&#39;name.partial&#39;</span><span class="p">,</span> <span class="s1">&#39;Josh Symonds&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Extending to More Like This</h2>

<p>Of course, that <code>searcher</code> private method is just begging for another use. Why abstract it out so cleverly and not do something with it? Let&#8217;s use elasticsearch&#8217;s <a href="http://www.elasticsearch.org/guide/reference/query-dsl/mlt-query.html">more like this query</a> so we can quickly find objects like each other (to display in an attractive sidebar, for example). <strong>For this to work, in addition to having tire in your Gemfile, you&#8217;ll also need tire-contrib</strong>. So make sure you have it there or else this will explode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Searchable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">more_like</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">searcher</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="ss">:more_like_this_field</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="p">{</span><span class="n">min_term_freq</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">min_doc_freq</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can say <code>User.more_like('Josh Symonds')</code> and it&#8217;ll find all documents with a more_like_this query for my name. Clever!</p>

<h2>Searching Across Multiple Models</h2>

<p>If you have a single search field on your site (like in the top navbar), most likely you&#8217;ll want to search across multiple models with it: the user could be searching for a person, or a piece of content, or a tag. There&#8217;s no easy way to know for sure what it is they want, so we should search across all of the fields and order the results by their relevance. Though this sounds complicated, with this concern, this is actually surprisingly easy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Searchable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">searchable</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@search_fields</span> <span class="o">=</span> <span class="n">fields</span>
</span><span class='line'>      <span class="no">Searchable</span><span class="o">.</span><span class="n">loaded_classes</span><span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">=</span> <span class="n">fields</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">loaded_classes</span>
</span><span class='line'>    <span class="vi">@loaded_classes</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="no">Tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="no">Searchable</span><span class="o">.</span><span class="n">loaded_classes</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">pluralize</span><span class="p">}</span><span class="o">.</span><span class="n">reverse</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="nb">load</span><span class="p">:</span> <span class="kp">true</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">boolean</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">Searchable</span><span class="o">.</span><span class="n">loaded_classes</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span>
</span><span class='line'>            <span class="n">should</span> <span class="p">{</span><span class="n">text</span> <span class="n">field</span><span class="p">,</span> <span class="n">term</span><span class="p">}</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">results</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We changed the <code>searchable</code> method slightly. Now, in addition to adding to an instance variable, it adds to a hash that the module itself keeps track of: this hash contains all the models as keys, and all their fields as values. Then, when we use it, it constructs a search across all those models&#8217; indexes for all the fields those models should be searching. To give a concrete example, let&#8217;s say we use <code>Searchable.search('Josh Symonds')</code> and we have indexes on content titles and user names. This is what the resulting tire query will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;contents&#39;</span><span class="o">]</span><span class="p">,</span> <span class="p">{</span><span class="nb">load</span><span class="p">:</span> <span class="kp">true</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">boolean</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">should</span> <span class="n">text</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;Josh Symonds&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">should</span> <span class="n">text</span><span class="p">(</span><span class="s1">&#39;name.partial&#39;</span><span class="p">,</span> <span class="s1">&#39;Josh Symonds&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">should</span> <span class="n">text</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;Josh Symonds&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">should</span> <span class="n">text</span><span class="p">(</span><span class="s1">&#39;title.partial&#39;</span><span class="p">,</span> <span class="s1">&#39;Josh Symonds&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have some models that should be more relevant (like an exact tag match should be the most relevant result), give those mappings an appropriate boost inside the tire mappings for the model. Also keep in mind this will return an array of potentially very different objects: users and contents, in this case. You should either make sure they&#8217;re all duck-typed correctly together, or check their type before acting on them. Finally, this will only work in development if you load each model before calling <code>Searchable.search</code>. Just entering the constant name of the model should be enough, but if you don&#8217;t, then the module won&#8217;t know to search with that model. Such is the danger of lazy loading in development.</p>

<h2>The Final Module</h2>

<p>For your reference, this is the final module with all code included.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Searchable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">searchable</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@search_fields</span> <span class="o">=</span> <span class="n">fields</span>
</span><span class='line'>      <span class="no">Searchable</span><span class="o">.</span><span class="n">loaded_classes</span><span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">=</span> <span class="n">fields</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">searcher</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="ss">:text</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">more_like</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">searcher</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="ss">:more_like_this_field</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="p">{</span><span class="n">min_term_freq</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">min_doc_freq</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">searcher</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">field_options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="n">fields</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="vi">@search_fields</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="nb">load</span><span class="p">:</span> <span class="kp">true</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">boolean</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">fields</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span>
</span><span class='line'>              <span class="n">should</span> <span class="p">{</span><span class="nb">send</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="n">field_options</span><span class="p">)}</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span><span class="o">.</span><span class="n">results</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">loaded_classes</span>
</span><span class='line'>    <span class="vi">@loaded_classes</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="no">Tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="no">Searchable</span><span class="o">.</span><span class="n">loaded_classes</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">pluralize</span><span class="p">}</span><span class="o">.</span><span class="n">reverse</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="nb">load</span><span class="p">:</span> <span class="kp">true</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">boolean</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">Searchable</span><span class="o">.</span><span class="n">loaded_classes</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="o">|</span>
</span><span class='line'>            <span class="n">should</span> <span class="p">{</span><span class="n">text</span> <span class="n">field</span><span class="p">,</span> <span class="n">term</span><span class="p">}</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">results</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Concerns IV: Class Methodable]]></title>
    <link href="http://joshsymonds.com/blog/2012/10/22/rails-concerns-iv-class-methodable/"/>
    <updated>2012-10-22T14:27:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/10/22/rails-concerns-iv-class-methodable</id>
    <content type="html"><![CDATA[<p>In my application, seed data is an unfortunate necessity. I don&#8217;t like it but it&#8217;s there, and it&#8217;s tightly integrated into many parts of the app (dropdowns, navigational links, and so on). Finding that seed data also tends to be rather ugly and long, unfortunately. Who wants to type <code>Tag.find_by_name('Health &amp; Wellness')</code> or one of the finder variations every time you&#8217;re looking for something? Not me, that&#8217;s for sure. I found myself aliasing these finders constantly as class methods: so, the above would be much more easily referenced as <code>Tag.health_wellness</code>.</p>

<p>Once I started duplicating this functionality across models I knew I had a concern. This is the module I came up with to encapsulate it.</p>

<!-- more -->


<h2>Methodizing Names</h2>

<p>The first problem with a concern like this is that it&#8217;s no easier to call class methods that have weird characters in them. You can do <code>Tag.send('Health &amp; Wellness')</code> but the goal here is to eliminate intervening calls, so that we end up with <code>Tag.health_wellness</code>. Having <code>send</code> in there looks weird and doesn&#8217;t seem very clean.</p>

<p>I opted to fix this with a new String method I called <code>methodize</code>. Put it in your lib folder and Rails will load it when the application starts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">methodize</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[^a-z0-9]/</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setting a Scope</h2>

<p>The models that employ this concern will probably have different columns you&#8217;ll want to find them by. One might be called &#8216;name&#8217;, whereas another might be &#8216;title&#8217; or &#8216;slug&#8217;. To get around these differences, our concern will assume that each model will have a scope that smooths over these differences. I called that scope &#8216;named&#8217;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tag</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:named</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">n</span><span class="o">.</span><span class="n">downcase</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Creating the Concern</h2>

<p>The concern itself is quite simple. It consists of one method, <code>class_methodable</code>. We call that with an array of names that we want to turn into class methods. For each of those, we define a singleton method that sets or gets a class variable of the value we&#8217;re looking for. The code itself follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ClassMethodable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">class_methodable</span><span class="p">(</span><span class="nb">methods</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">methods</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span>
</span><span class='line'>        <span class="n">define_singleton_method</span><span class="p">(</span><span class="nb">method</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">methodize</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">v</span> <span class="o">=</span> <span class="s2">&quot;@@</span><span class="si">#{</span><span class="nb">method</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">methodize</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="n">class_variable_defined?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>            <span class="n">class_variable_get</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="n">class_variable_set</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">named</span><span class="p">(</span><span class="nb">method</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using It</h2>

<p>Now that everything&#8217;s in place, actually using the concern is quite simple. In our class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tag</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ClassMethodable</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">class_methodable</span> <span class="s1">&#39;Health &amp; Wellness&#39;</span><span class="p">,</span> <span class="s1">&#39;Relationships&#39;</span><span class="p">,</span> <span class="s1">&#39;Other Stuff&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tag</span><span class="o">.</span><span class="n">relationships</span> <span class="c1"># =&gt; Tag.named(&#39;Relationships&#39;)</span>
</span><span class='line'><span class="no">Tag</span><span class="o">.</span><span class="n">health_wellness</span> <span class="c1"># =&gt; Tag.named(&#39;Health &amp; Wellness&#39;)</span>
</span><span class='line'><span class="no">Tag</span><span class="o">.</span><span class="n">other_stuff</span> <span class="c1"># =&gt; Tag.named(&#39;Other Stuff&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can reference our seed data quickly and cleanly, without having to resort constantly to finders.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unobtrusive JavaScript Facebook-Style More Button]]></title>
    <link href="http://joshsymonds.com/blog/2012/10/14/unobtrusive-javascript-facebook-style-more-button/"/>
    <updated>2012-10-14T21:20:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/10/14/unobtrusive-javascript-facebook-style-more-button</id>
    <content type="html"><![CDATA[<p>I spent awhile yesterday Googling for a Facebook-style more button with a graceful fallback: something where, if the user didn&#8217;t have JavaScript, they&#8217;d still see something sensible&#8230; but if they did, they&#8217;d get a sweet fade-in of more content appended right to the content container. Oh, and I also didn&#8217;t want to write separate views for JSON returns, so it had to deal with HTML returns and strip out the unnecessary bits.</p>

<p>I didn&#8217;t find anything, so I took a crack at creating it myself. This is the result.</p>

<!-- more -->


<h2>How to Use It</h2>

<p>Before coding I sat down and tried to figure out how this beast would work.</p>

<p>Because it was unobtrusive, it should work on standard links, replacing them with an AJAX-y alternative if they have appropriate attributes. I hit on a link that looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= link_to &#39;More...&#39;.html_safe, root_path(page: @page + 1),</span>
</span><span class='line'><span class="sx">    class: &#39;next_page&#39;, &#39;data-selector&#39; =</span><span class="o">&gt;</span> <span class="s1">&#39;.articles .article&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;data-container&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;.articles&#39;</span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the link has <code>data-selector</code> and <code>data-container</code> attributes, it&#8217;s supposed to be an AJAX more button. The selector tells the script what to look for in the new page; the container tells it where to append the newly found elements. With this use case in hand, I proceeded to coding.</p>

<h2>The Code</h2>

<p>I apologize in advance if there&#8217;s a cleaner way to do this. My CoffeeScript is pretty weak.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&#39;[data-selector]&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">(event) -&gt;</span>
</span><span class='line'>    <span class="nv">element = </span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">url = </span><span class="nx">element</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;href&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span> <span class="nx">unless</span> <span class="nx">url</span>
</span><span class='line'>    <span class="nv">container = </span><span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;data-container&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">selector = </span><span class="nx">element</span><span class="p">.</span><span class="nx">attr</span> <span class="s">&#39;data-selector&#39;</span>
</span><span class='line'>    <span class="nv">more = </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>      <span class="nv">url: </span><span class="nx">url</span>
</span><span class='line'>      <span class="nv">success: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>        <span class="nv">elements = </span><span class="nx">$</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>          <span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s">&#39;All content loaded&#39;</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s">&#39;done&#39;</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nx">container</span><span class="p">.</span><span class="nx">append</span> <span class="nx">elements</span>
</span><span class='line'>          <span class="nx">elements</span><span class="p">.</span><span class="nx">css</span> <span class="nv">opacity: </span><span class="mi">0</span>
</span><span class='line'>          <span class="nx">elements</span><span class="p">.</span><span class="nx">imagesLoaded</span> <span class="nf">(event) -&gt;</span>
</span><span class='line'>            <span class="nx">elements</span><span class="p">.</span><span class="nx">animate</span> <span class="nv">opacity: </span><span class="mi">1</span>
</span><span class='line'>            <span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s">&#39;[data-selector]&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;href&#39;</span><span class="p">)).</span>
</span><span class='line'>                    <span class="nx">html</span><span class="p">(</span><span class="s">&#39;More &amp;raquo;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="nx">container</span><span class="p">.</span><span class="nx">masonry</span> <span class="s">&#39;appended&#39;</span><span class="p">,</span> <span class="nx">elements</span><span class="p">,</span> <span class="kc">true</span> <span class="k">if</span> <span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;data-masonry&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">beforeSend: </span><span class="o">-&gt;</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s">&#39;Loading more...&#39;</span><span class="p">)</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s">&#39;loading&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should be pretty straightforward: we find the URL of the next page from the href of the link itself, and also the container we&#8217;re adding elements to and the selector. We make an AJAX request for the new page and parse it for the selector, appending each result to the container and fading them in once all the images have loaded. Afterwards, we update the URL to request the next new page of content if someone clicks on the &#8220;More&#8221; button again &#8211; or we disable the &#8220;More&#8221; button if we found no content.</p>

<p>Overall pretty simple but I was satisfied with this solution. Oh, and there&#8217;s a line there for integration into the really excellent <a href="http://masonry.desandro.com/">jQuery Masonry</a> script, if you include a data-masonry attribute on your link element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seamless POST Logins with Rack Middleware]]></title>
    <link href="http://joshsymonds.com/blog/2012/10/10/seamless-post-logins-with-rack-middleware/"/>
    <updated>2012-10-10T18:47:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/10/10/seamless-post-logins-with-rack-middleware</id>
    <content type="html"><![CDATA[<p>It&#8217;s not uncommon to have login-required forms accessible to users who aren&#8217;t logged in &#8211; for example, maybe you&#8217;re trying to encourage someone to start writing some content without having to bother logging in first. Of course, they have to log in before they can post, but what happens when they push that big &#8220;post&#8221; button? Or take another example: you have a button to thumbs-up some content. Only logged-in users should be able to thumbs-up any content, but you always want to display the button. But then what happens when someone who&#8217;s not logged in presses the button? In most Rails applications, they&#8217;d be logged in, redirected back to the page they were referred from, and they&#8217;d have to click the thumbs-up again.</p>

<p>That sort of sucks. They already clicked it once. Why can&#8217;t we remember that?</p>

<p>I ran into this problem myself today in the context of the thumbs-up button. After doing some research and realizing there was no great Rails 3 solution to the problem, I decided I would roll one myself. The result is some complicated but awesome Rack middleware that I think would be pretty handy for most Rails developers.</p>

<!-- more -->


<h2>Pre-Controller Setup</h2>

<p>This method is rather login-agnostic; it should work if you&#8217;re using <a href="https://github.com/plataformatec/devise">Devise</a>, <a href="https://github.com/intridea/omniauth">OmniAuth</a>, <a href="https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview">both</a>, or neither. For the purposes of my examples, however, I&#8217;m using OmniAuth.</p>

<p>First, put some code wherever you redirect to force login. I do that when I see a <code>CanCan::AccessDenied</code> error, but you should do it wherever makes sense for you. Here&#8217;s an example method very similar to the one I use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">redirect_to_login</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">login_path</span><span class="p">(</span><span class="n">return_to</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">return_post_params</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span> <span class="n">return_method</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>login_path</code> should redirect somewhere sensible: I chose sessions#new. Once there, we reset the session (to prevent any funny business) and then assign a bunch of attractive new session variables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="n">reset_session</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span><span class="p">,</span> <span class="n">session</span><span class="o">[</span><span class="ss">:return_post_params</span><span class="o">]</span><span class="p">,</span> <span class="n">session</span><span class="o">[</span><span class="ss">:return_method</span><span class="o">]</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:return_post_params</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:return_method</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="s2">&quot;/auth/facebook&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I&#8217;m using OmniAuth and Facebook, this will result in the user being logged in. In the login callback &#8211; I chose sessions#create &#8211; we need to do some special detection and redirection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Hi &lt;b&gt;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&lt;/b&gt;, you are now logged in.&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:return_method</span><span class="o">]</span> <span class="o">!=</span> <span class="s1">&#39;GET&#39;</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="s1">&#39;/redirect_back&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="n">session</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="n">flash</span><span class="p">:</span> <span class="p">{</span><span class="n">error</span><span class="p">:</span> <span class="s1">&#39;You could not be logged in.&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interesting portion is <code>redirect_to '/redirect_back'</code>. That&#8217;s our middleware hook: when the session variables are set correctly, and you go to <code>/redirect_back</code>, the middleware will activate and do a POST to the application. So, in essence, <code>/redirect_back</code> stands in for whatever request you just tried to go. That&#8217;s why this doesn&#8217;t work with GET requests: with a GET, the new URL for the page will be <code>/redirect_back</code> regardless of what the page is, which looks pretty weird.</p>

<h2>The Middleware</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RedirectBack</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Request</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">path</span> <span class="o">==</span> <span class="s1">&#39;/redirect_back&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">[</span><span class="ss">:return_method</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">[</span><span class="ss">:return_post_params</span><span class="o">]</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">env</span><span class="o">[</span><span class="s1">&#39;CONTENT_TYPE&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;application/x-www-form-urlencoded&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">env</span><span class="o">[</span><span class="s1">&#39;REQUEST_METHOD&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:return_method</span><span class="p">)</span>
</span><span class='line'>      <span class="n">env</span><span class="o">[</span><span class="s2">&quot;rack.input&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rack</span><span class="o">::</span><span class="no">Utils</span><span class="o">.</span><span class="n">build_nested_query</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">[</span><span class="ss">:return_post_params</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>      <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:return_post_params</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">param</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="n">params</span><span class="o">[</span><span class="n">param</span><span class="o">]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">new_url</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:return_to</span><span class="p">)</span>
</span><span class='line'>      <span class="o">[</span><span class="s1">&#39;REQUEST_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;REQUEST_URI&#39;</span><span class="p">,</span> <span class="s1">&#39;PATH_INFO&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">req</span><span class="o">|</span>
</span><span class='line'>        <span class="n">env</span><span class="o">[</span><span class="n">req</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_url</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">req</span><span class="o">.</span><span class="n">session</span><span class="o">[</span><span class="ss">:redirected</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whole idea of this middleware is to reformat the path and add in all the appropriate params from the session variables, and then call the Rails application with it. Rails believes that &#8211; despite the URL being <code>redirect_back</code> &#8211; we&#8217;ve made a correctly-formatted post and processes it correctly, sending another redirect to the client when it&#8217;s completed.</p>

<h2>Post-Controller Setup</h2>

<p>The only problem is that, since we&#8217;re dealing with forms here, Rails needs a CSRF token. Without it, it&#8217;ll purge the session at the beginning of the request and we&#8217;ll end up in a redirect loop.</p>

<p>However, remember how we <code>reset_session</code> at sessions#new? We can be confident that this session is not fixated; we cleaned it before entering the middleware, and the middleware only deals with session variables. Provided you don&#8217;t use the cookie session storage mechanism (and you should not be), you can be sure enough of the user&#8217;s identity to ignore the authenticity token on this one request.</p>

<p>We also need to ensure that Rails places a new, correct CSRF token into the session. Otherwise users&#8217; sessions will be deleted by the CSRF handlers upon their next post, which will seem to have an invalid, old token.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">protect_from_forgery</span>
</span><span class='line'>  <span class="n">skip_before_filter</span> <span class="ss">:verify_authenticity_token</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:redirected?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">redirected?</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:redirected</span><span class="o">]</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">.</span><span class="n">keep</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:return_to</span><span class="o">]</span><span class="p">,</span> <span class="n">session</span><span class="o">[</span><span class="ss">:return_post_params</span><span class="o">]</span><span class="p">,</span> <span class="n">session</span><span class="o">[</span><span class="ss">:return_method</span><span class="o">]</span><span class="p">,</span> <span class="n">session</span><span class="o">[</span><span class="ss">:redirected</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">form_authenticity_token</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a bonus we also clean out the session a little bit so that <code>/redirect_back</code> won&#8217;t work again.</p>

<p>And that&#8217;s that! Now a user can initiate a POST and be automatically logged in, see the POST completed, and be redirected to the output &#8211; all with just one little button press. Though the Rails 2 method of doing this was substantially easier, I think this middleware method has an elegance to it. And the usability certainly can&#8217;t be beat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kinotify, a RubyMotion App]]></title>
    <link href="http://joshsymonds.com/blog/2012/08/31/kinotify-a-rubymotion-app/"/>
    <updated>2012-08-31T20:03:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/08/31/kinotify-a-rubymotion-app</id>
    <content type="html"><![CDATA[<p>Today, I&#8217;d like to announce the official release of my first RubyMotion app &#8211; <a href="http://itunes.apple.com/us/app/kinotify/id551361006">Kinotify</a>! Kinotify is a simple app with a lofty goal: to notify you of the release of upcoming movies, either in theaters or on DVD. You can search for movies &#8211; in case you have something you really want to be notified of in the future, say a rerelease of Dirty Dancing or the future release of Avatar II &#8211; or just see all upcoming releases. Notifications you set will arrive at 2PM local time on your phone, and you can set the app to remind you of a release a month, week, three days, and/or one day in advance.</p>

<p>The UI, icon, and website were all designed by my good friend and super-talented dude <a href="https://twitter.com/lukesbeard">Luke Beard</a>, so they all look totally awesome. And on the flipside, the Rails server and RubyMotion app were all done by yours truly&#8230; so any faults (and I&#8217;m sure there are some I haven&#8217;t found) are mine and mine alone.</p>

<p>It was a long road to actually releasing this app. I started designing Kinotify with a good friend of mine (who had the original idea and inspiration for the application) way back in March, so it&#8217;s been months of labor, testing, asset acquisition, releasing and refining and coding. But I think the results speak for themselves: Kinotify is a pretty awesome application, and even better I think it&#8217;s a great example of what RubyMotion is capable of. It uses remote notifications, core data, Twitter/Facebook sharing, networking and reachability&#8230; and thanks to RubyMotion it was all pretty painless to get it working together.</p>

<p>This week I&#8217;ll make another blog post describing what took so long, where my time and energy were spent, and the general process of releasing a RubyMotion app on the iTunes store. But I just got the approval email from Apple so I wanted to unleash Kinotify on the world officially. So what are you waiting for? It&#8217;s only 99 cents! <a href="http://itunes.apple.com/us/app/kinotify/id551361006">Go get Kinotify already!</a></p>

<p>And if you have any problems or want new features, the best way to contact me is on <a href="https://twitter.com/Veraticus">Twitter</a>. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Programming III]]></title>
    <link href="http://joshsymonds.com/blog/2012/08/21/introduction-to-programming-iii/"/>
    <updated>2012-08-21T10:56:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/08/21/introduction-to-programming-iii</id>
    <content type="html"><![CDATA[<p>Another in the exciting introduction to programming series! This is looking like it&#8217;ll be a four-part series; at least, I think I&#8217;m running into a wall in terms of complexity that I think defines the end of &#8220;introduction.&#8221; Still, I hope it&#8217;ll be helpful to someone, and it&#8217;ll hopefully be a popular class at the Center on Halsted.</p>

<!-- more -->


<h2>Flow Control</h2>

<p>In this lesson, we&#8217;re going to learn how to give our programs some structure. While your very first program was pretty exciting, it also left a little to be desired. What if you wanted to change what we said based on the person&#8217;s name or hobby? And how do we make Ruby keep repeating the program without manually pressing the &#8220;play&#8221; button by ourselves?</p>

<p>We&#8217;re about to learn the means to do that, and we&#8217;ll start with a fundamental concept in computer programming: comparisons.</p>

<h3>Comparisons</h3>

<p>Many programs rely on comparisons of data to execute properly. For example, consider y. If you put in your email address and password, it has to figure out if those are actually equivalent to what&#8217;s been stored on the website. As another example, think of an mp3 player. When the song has played the entire length of its track, it has to automatically move to the next track. To do that sort of thing, computer programs rely on comparisons.</p>

<p>All comparisons return <code>true</code> or <code>false</code>. <code>true</code> and <code>false</code> are special objects in Ruby: we use them all the time, as you&#8217;ll see very shortly. Let&#8217;s learn about comparisons in an exciting <em>*exercise</em>.</p>

<ol>
<li><p>Type <code>1 == 1</code>. This is the equality comparison. It checks if two objects are exactly equal to each other. We use two equals here, instead of one, because one equal is for variable assignment (as we learned last lesson). Two equals are for equality comparison.</p></li>
<li><p>Try <code>'string' == 'other string'</code>. Obviously these two strings are different: the comparison returns false.</p></li>
<li><p>Try <code>'mary' == 'mary'</code>. Since these two strings are the same, we get true.</p></li>
<li><p>Try <code>1 &gt; 2</code>. Greater than and less than are other comparison operators: they tell you when numbers are, obviously, greater than or less than other numbers.</p></li>
<li><p>Try <code>2 &lt; 2</code>. Two is not less than two, it is equal to two; so this comparison returns false.</p></li>
<li><p>Try <code>2 &lt;= 2</code>. This is the less than or equal to operator: it has an equivalent greater than or equal to operator, <code>&gt;=</code>.</p></li>
<li><p>Try <code>'cat' &lt; 'dog'</code>. This part is a litle confusing: when you compare strings, it compares the actual byte values of the first differing letters. Thus, on most computers, <code>'z' &gt; 'a'</code> will be true! This can be very unexpected and is a reason why you generally don&#8217;t use greater than or less than on strings.</p></li>
<li><p>Instead, a common string method that returns <code>true</code> or <code>false</code> is <code>include?</code>. Try <code>'zookeeper'.include?('zoo')</code>. This returns true, because the string &#8216;zookeeper&#8217; does indeed contain the substring &#8216;zoo.&#8217;</p></li>
</ol>


<p>As I said before, we use <code>true</code> and <code>false</code> all the time: and their primary use is for branching.</p>

<h3>Branching</h3>

<p>Very frequently, you&#8217;ll want to vary what your program does based on a comparison. If the user enters in the word &#8216;dog&#8217;, you want to print our &#8216;bark&#8217;: but if they enter in &#8216;cat&#8217;, you want to print out &#8216;meow&#8217;. We already know how to compare the strings &#8216;dog&#8217; and &#8216;cat&#8217;: but how do we change what our program does based on the result of comparisons?</p>

<p>We use branching! Branching is a simple concept but very powerful. Let&#8217;s write our second program to understand how we can use branching in Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;What animal do you want to hear?&quot;</span>
</span><span class='line'><span class="n">animal</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">animal</span> <span class="o">==</span> <span class="s1">&#39;cat&#39;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Meow!&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">animal</span> <span class="o">==</span> <span class="s1">&#39;dog&#39;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Bark.&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Moo...&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember <code>puts</code> and <code>gets</code> from our last lesson, along with <code>chomp</code> to get rid of newlines? We&#8217;re using them again: <code>puts</code> outputs information to the console, whereas <code>gets</code> gets it in. But the new and exciting stuff here is the <code>if</code> statement.</p>

<p>An <code>if</code> statement in Ruby allows us to change what our program does on the fly. When you type <code>if</code>, the first thing afterwards has to be a conditional that evaluates to <code>true</code> or <code>false</code>. If the statement is true, the very next line is executed; in this case, we puts &#8220;Meow!&#8221;.</p>

<p>If that conditional isn&#8217;t <code>true</code>, however, we skip that line entirely and move along. In this case, the computer moves to the next statement: <code>elsif</code>. As you might have guessed, <code>elsif</code> is computer speak for &#8220;else if.&#8221; In other words, if the first if statement is false, try this one instead. Just like <code>if</code>, <code>elsif</code> takes one condition that must evaluate to <code>true</code> or <code>false</code>, and just like <code>if</code>, if the statement isn&#8217;t true, it moves on to the next one. We can have as many <code>elsif</code>s as we like after an initial <code>if</code>: the first one that is true, though, will cause the other ones to all be skipped. It&#8217;s an &#8220;else if&#8221;, after all, not an &#8220;and if!&#8221;</p>

<p>The final piece of this conditional puzzle is <code>else</code>. If all the previous conditions have been false, then what we&#8217;ve provided in <code>else</code> will be executed. In this case, if you didn&#8217;t enter in &#8216;cat&#8217; or &#8216;dog,&#8217; then we assume you must want a cow and we put out &#8220;Moo&#8230;&#8221;.</p>

<p>All <code>if</code> statements have to end with an <code>end</code>. A lot of multi-line programming needs an <code>end</code> at the very end: otherwise the computer won&#8217;t know where the <code>if</code> terminates.</p>

<p>Let&#8217;s try another new program &#8211; except this time you&#8217;ll make it on your own. Let&#8217;s use a new string method, called <code>capitalize</code>. Ask what the user&#8217;s name is, and then get it from the command line. Check if what they typed is equal to what they typed, capitalized. If it is, then welcome them to Introduction to Programming. If it isn&#8217;t, ask them to try again with a capitalized name&#8230; since the most important part of programming is correct capitalization!</p>

<h3>Looping</h3>

<p>Of course, running this program over and over again isn&#8217;t exactly the most fun thing in the entire universe. I bet you&#8217;ve heard that computers are great at mindless, repetitive tasks&#8230; but here, it&#8217;s you clicking on that little &#8220;play&#8221; button making the program run. Doesn&#8217;t that seem like an injustice?</p>

<p>Happily, we can fix this problem. Let&#8217;s try another program to illustrate how easy it is to repeat stuff in Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;I love programming!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should probably leave you breathless, saying &#8220;I love programming!&#8221; a hundred times. What exactly happened here, though?</p>

<p><code>times</code> is a method on integers that takes a new kind of Ruby construct: a block. A block is a small, encapsulated bit of code that a lot of Ruby methods accept. These methods that want blocks always do something with the code in the block. In this case, <code>times</code> simply repeats the block over and over, for as many times as the integer it was called on.</p>

<p><code>do</code> defines the start of a block; <code>end</code> is, obviously, the end. Everything between the <code>do</code> and the <code>end</code> is part of the block, and in this case will be repeated 100 times.</p>

<p>What if we don&#8217;t want to repeat this merely 100 times, though? What if we want to repeat something endlessly? For that, let&#8217;s make a completely new program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;This is an endless loop! Type &#39;q&#39; to quit.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">response</span> <span class="o">==</span> <span class="s1">&#39;q&#39;</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">response</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This program uses a block to do most of its work: but the method we&#8217;re using to start that block is <code>loop</code>. As you probably guessed, <code>loop</code> will repeat the programming inside the block endlessly, never exiting if it can help it. The special method <code>break</code> that we use inside the block is one of only two ways to exit a loop that is permanently repeating.</p>

<p>Let&#8217;s try another loop, but this time, let&#8217;s &#8220;forget&#8221; to include a break statement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Sayonara repl.it&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That sleep method commands the computer to wait for 1 second whenever it encounters it: in this case, the computer will output &#8220;Sayonara repl.it&#8221;, wait one second, and then do it all again.</p>

<p>Oh no! We forgot to include a break statement, and now our computer will repeat this poor program forever. What are we supposed to do?</p>

<h3>The End of Repl.it</h3>

<p>Unfortunately, there&#8217;s not a whole lot we can do&#8230; on repl.it.</p>

<p>We&#8217;ve learned about the basic types of Ruby: integers, strings, and floats. We&#8217;ve learned how to use methods on them, and we&#8217;ve learned about Ruby&#8217;s basic data structures &#8211; arrays and hashes. We&#8217;ve even learned about variables and comparisons. And through it all, repl.it has been our constant ally and friend.</p>

<p>Now we have to abandon it.</p>

<p>That might sound harsh, but remember that repl.it is only a tool for learning Ruby. Real computer programming takes place not in a browser, but on your own computer. When a program goes haywire on our own computer, we have special tools for terminating it and restoring the system&#8217;s functionality. But on repl.it, those tools don&#8217;t work. So as we get into more complicated programming, we&#8217;ll have to migrate away from repl.it and onto some more complicated tools: but along with additional complexity comes greater power.</p>

<h3>Installing Ruby Locally</h3>

<p>For the purposes of this class, I&#8217;ve installed Ruby on all the computers beforehand. But if you ever want to install Ruby on your own computer at home, it&#8217;s really simple. Instructions for downloading Ruby can be found on the official Ruby website at ruby-lang.org: just click on the &#8220;Download Ruby&#8221; button in the upper-right to get started, and the downloader will walk you through the installation process.</p>

<p>To verify that we&#8217;ve installed Ruby correctly, let&#8217;s open up an important tool that we&#8217;ll be using a lot during programming: the command prompt. A command prompt is part of an operating system. It lets you type commands into the computer directly: they&#8217;re powerful but also rather opaque, because you need to know the commands and what they do beforehand.</p>

<p>To start the command prompt, click on the &#8220;Start&#8221; menu. Then click &#8220;Run&#8230;&#8221;, type in &#8220;cmd&#8221;, and press enter.</p>

<p>Welcome to the command prompt.</p>

<p>There are a number of commands you can type here, but we want to start interactive Ruby. Interactive Ruby is the right-hand side of repl.it: a window where we can type Ruby commands and see them executed immediately. To start interactive Ruby, type <code>irb</code> into the command prompt and press &#8220;enter.&#8221; You&#8217;ll see a window very similar to the one on the right side of repl.it.</p>

<p>Now, let&#8217;s try that last program again, this time on our own local computer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Sayonara repl.it&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh no, we forgot to put in a break again! But this time we can fix our out-of-control program. Press &#8220;Ctrl&#8221; and &#8220;C&#8221; simultaneously to break the program. &#8220;Ctrl-C&#8221; is a shortcut for programs in the command prompt that instructs them to exit immediately. Computer programmers call this &#8220;breaking&#8221; or &#8220;aborting&#8221; the program.</p>

<p>Now we have Ruby on our computer. Interactive Ruby is a great way of writing short snippets of code and testing functionality, and you&#8217;ll use it frequently for smaller, simpler applications.</p>

<h3>Coding Locally</h3>

<p>Now we understand how to get interactive Ruby back. But being able to write programs and then execute them afterwards was actually pretty helpful too. How do we get back the left-hand side of repl.it, the one that let us write code and then run it all at once?</p>

<p>Most computer programs are actually just text files, so we can just use our favorite text editor! The hard work of converting the text into computer instructions is handled by the language itself, so theoretically you could write a computer program in Microsoft Word if you wanted to. But there are way better programs for programming: they provide shortcuts to run the program, help you remember method names, and provide syntax correction if you get something wrong. Let&#8217;s use one of those instead.</p>

<p>I&#8217;ve already installed a free program called Notepad++ onto your computers. It does a lot of what I&#8217;ve said above, and as a bonus doesn&#8217;t cost a dime. You can find out more about it (and download it at home) at its <a href="http://notepad-plus-plus.org/">website</a>. We&#8217;ll be using Notepad++ to program Ruby, so double click its icon on your desktop to start it up. Let&#8217;s write a simple program to test it out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;What&#39;s your name?&quot;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="s2">&quot;Josh&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;You&#39;re teaching a class!&quot;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="nb">name</span> <span class="o">==</span> <span class="s2">&quot;Alisa&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;That&#39;s Josh&#39;s sister&#39;s name.&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hi, &quot;</span> <span class="o">+</span> <span class="nb">name</span><span class="o">.</span><span class="n">capitalize</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The content of this program should be fairly familiar to you by now. Save it and give it a filename of <code>name.rb</code>. .rb is the extension for Ruby programs: it tells the computer that the text file you saved is intended to be run by the Ruby interpreter. Now, just double-click the file in the location you saved it and you&#8217;ll see it run. Magical!</p>

<p>You can also run the program manually from the command-line. To do so, navigate to the folder in which you saved it by using <code>cd</code> (the command line instruction to change directories). So if you saved it in a folder called &#8220;My Documents&#8221;, you&#8217;d use <code>cd "My Documents\"</code> to navigate there. Once you&#8217;re in the same folder as the program, type <code>ruby name.rb</code> to run the program. This is exactly the same as double-clicking on the program icon as above, except by doing it through the command line you&#8217;re doing it like a programming pro!</p>

<h3>Next Time</h3>

<p>In our next and last class, we&#8217;ll learn more about flow control using Ruby&#8217;s powerful and expressive enumerators. We&#8217;ll learn about classes, how to write our own classes and methods, and write a couple exciting and awesome programs.</p>
]]></content>
  </entry>
  
</feed>
