<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hi, I'm Josh Symonds]]></title>
  <link href="http://joshsymonds.com/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2015-06-10T11:22:57-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Packaging Anything with Chef and fpm]]></title>
    <link href="http://joshsymonds.com/blog/2015/06/10/packaging-anything-with-chef-and-fpm/"/>
    <updated>2015-06-10T10:33:45-05:00</updated>
    <id>http://joshsymonds.com/blog/2015/06/10/packaging-anything-with-chef-and-fpm</id>
    <content type="html"><![CDATA[<p>Compiling software takes a long time. The worst offender, for us, is usually Ruby, but it could be anything &ndash; recently we had a client that wanted to install ffmpeg on each server, with compilation times upwards of five minutes. The answer to getting around long compilation times in a standardized server environment is, of course, packages! So we developed a Chef-based solution to create packages with the really excellent <a href="https://github.com/jordansissel/fpm">fpm</a>, upload them to S3, and then download them on target servers: all without needing anything other than a few gems.</p>

<p>Want to do it yourself? Then read on.</p>

<!-- more -->


<h2>Creating Packages</h2>

<p>There are two parts to this setup: first, compiling the software and creating packages from it. Then, downloading it on client servers. For the purposes of this cookbook, I&rsquo;ll be referring to the former as &ldquo;creating,&rdquo; and the latter as &ldquo;installing.&rdquo;</p>

<p>Creating is pretty easy. We&rsquo;ll have one generic <code>create</code> recipe that all the other recipes can include, and a provider that does most of the heavy lifting. First, let&rsquo;s set up some cookbook attributes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># symondsandson_packages/attributes/default.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Compile extensions immediately</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;build-essential&#39;</span><span class="o">][</span><span class="s1">&#39;compile_time&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;xml&#39;</span><span class="o">][</span><span class="s1">&#39;compiletime&#39;</span><span class="o">]</span>              <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># fpm settings</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;fpm&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;1.3.3&#39;</span>
</span><span class='line'><span class="n">set</span><span class="o">[</span><span class="s1">&#39;fpm_tng&#39;</span><span class="o">][</span><span class="s1">&#39;exec&#39;</span><span class="o">]</span>                       <span class="o">=</span> <span class="s1">&#39;/opt/chef/embedded/bin/fpm&#39;</span>
</span><span class='line'><span class="n">set</span><span class="o">[</span><span class="s1">&#39;fpm_tng&#39;</span><span class="o">][</span><span class="s1">&#39;gem&#39;</span><span class="o">]</span>                        <span class="o">=</span> <span class="s1">&#39;/opt/chef/embedded/bin/gem&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># S3 settings</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;bucket&#39;</span><span class="o">]</span>            <span class="o">=</span> <span class="s1">&#39;packages&#39;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;download_path&#39;</span><span class="o">]</span>     <span class="o">=</span> <span class="s1">&#39;production&#39;</span> <span class="c1"># By default, download from production</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;upload_path&#39;</span><span class="o">]</span>       <span class="o">=</span> <span class="s1">&#39;development&#39;</span>  <span class="c1"># By default, upload to development</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;access_key_id&#39;</span><span class="o">]</span>     <span class="o">=</span> <span class="s1">&#39;XXX&#39;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;secret_access_key&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;YYY&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Download settings</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;download&#39;</span><span class="o">][</span><span class="s1">&#39;cache_directory&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;/usr/local/symondsandson/cache/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve pegged our package creation to fpm 1.3.3, which has worked extremely well for us. Remember to include your actual access key and secret access key to actually upload this to S3! Also note the cache directory location. We&rsquo;ll be using that down below.</p>

<p>Now the base create recipe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># symondsandson_packages/recipes/create.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Install everything we need to create packages.</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;apt&#39;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;build-essential&#39;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;xml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;zlib-devel compiletime install wget liblzma-dev libssl-dev libyaml-dev libreadline6-dev&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">chef_gem</span> <span class="s1">&#39;fpm&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">version</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;fpm&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:upgrade</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">chef_gem</span> <span class="s1">&#39;fog&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">version</span> <span class="s1">&#39;1.25.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re just installing a bunch of packages that will be necessary for compiling whatever software we choose. And finally, let&rsquo;s create a version of Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># symondsandson_packages/recipes/create_ruby.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Pull in package creation prerequisites.</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;symondsandson_packages::create&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Pull in Ruby prerequisites</span>
</span><span class='line'><span class="sx">%w(libffi6 libffi-dev)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">package</span><span class="o">|</span>
</span><span class='line'>  <span class="n">apt_package</span> <span class="n">package</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Install rbenv</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;custom_ruby::rbenv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">rbenv_ruby</span> <span class="s1">&#39;2.2.0&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">environment</span><span class="p">({</span>
</span><span class='line'>    <span class="s1">&#39;CONFIGURE_OPTS&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;--enable-shared --with-opt-dir=/usr/local/rbenv/versions/2.2.0&quot;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w(bundler backup puma nokogiri)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">rbenv_gem</span> <span class="n">g</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rbenv_version</span> <span class="s1">&#39;2.2.0&#39;</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">symondsandson_packages</span> <span class="s1">&#39;ruby&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">version</span> <span class="s1">&#39;2.2.0&#39;</span>
</span><span class='line'>  <span class="n">input_args</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>  <span class="n">prefix</span> <span class="s2">&quot;/usr/local/rbenv/versions/2.2.0&quot;</span>
</span><span class='line'>  <span class="n">chdir</span> <span class="s2">&quot;/usr/local/rbenv/versions/2.2.0&quot;</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, we&rsquo;re just installing package prerequisites, compiling Ruby and a few gems, and then using a provider called <code>symondsandson_packages</code> to do the real work. The provider is quite special, so let&rsquo;s dig into it in a little bit more detail.</p>

<h2>The Package Provider</h2>

<p>Of course, the package provider does most of the heavy lifting. In addition to creating the packages, it also supports installing them. Before we get to it though, let&rsquo;s implement a little bit of abstraction so we can DRY up the provider a bit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># symondsandson_packages/libraries/packages_helper.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># A few DRY helpers.</span>
</span><span class='line'><span class="k">module</span> <span class="nn">SymondsandsonPackages</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">package</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">package</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">.deb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">download_path</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">package</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;download_path&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">package</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">package</span><span class="p">,</span> <span class="n">version</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">upload_path</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">package</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;upload_path&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">package</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">package</span><span class="p">,</span> <span class="n">version</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shouldn&rsquo;t exactly be surprising stuff, and we&rsquo;re about to use it extensively!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># symondsandson_packages/providers/default.rb</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;chef/mixin/shell_out&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;chef/mixin/language&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Chef</span><span class="o">::</span><span class="no">Mixin</span><span class="o">::</span><span class="no">ShellOut</span>
</span><span class='line'>
</span><span class='line'><span class="n">use_inline_resources</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_current_resource</span>
</span><span class='line'>  <span class="vi">@package_name</span> <span class="o">=</span> <span class="o">::</span><span class="no">SymondsandsonPackages</span><span class="o">.</span><span class="n">name</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@download_path</span> <span class="o">=</span> <span class="o">::</span><span class="no">SymondsandsonPackages</span><span class="o">.</span><span class="n">download_path</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@upload_path</span> <span class="o">=</span> <span class="o">::</span><span class="no">SymondsandsonPackages</span><span class="o">.</span><span class="n">upload_path</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@cache_directory</span> <span class="o">=</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">cache_directory</span> <span class="o">||</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;download&#39;</span><span class="o">][</span><span class="s1">&#39;cache_directory&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">action</span> <span class="ss">:install</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run_context</span><span class="o">.</span><span class="n">include_recipe</span> <span class="s1">&#39;apt&#39;</span>
</span><span class='line'>  <span class="n">run_context</span><span class="o">.</span><span class="n">include_recipe</span> <span class="s1">&#39;symondsandson_packages::default&#39;</span>
</span><span class='line'>  <span class="n">run_context</span><span class="o">.</span><span class="n">include_recipe</span> <span class="s1">&#39;s3_file&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">s3_file</span><span class="p">(</span><span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="vi">@cache_directory</span><span class="p">,</span> <span class="vi">@package_name</span><span class="p">))</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">bucket</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;bucket&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">aws_access_key_id</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;access_key_id&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">aws_secret_access_key</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;secret_access_key&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:nothing</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="ss">:@remote_path</span><span class="p">,</span> <span class="s2">&quot;/</span><span class="si">#{</span><span class="vi">@download_path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="c1"># Instance variables do not enter a lwrp setting block</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">run_action</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">dpkg_package</span><span class="p">(</span><span class="vi">@package_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:nothing</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">d</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="ss">:@source</span><span class="p">,</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="vi">@cache_directory</span><span class="p">,</span> <span class="vi">@package_name</span><span class="p">))</span> <span class="c1"># Instance variables still do not enter a lwrp setting block</span>
</span><span class='line'>  <span class="n">d</span><span class="o">.</span><span class="n">run_action</span><span class="p">(</span><span class="ss">:install</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new_resource</span><span class="o">.</span><span class="n">updated_by_last_action</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">updated_by_last_action?</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="o">.</span><span class="n">updated_by_last_action?</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">action</span> <span class="ss">:create</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">run_context</span><span class="o">.</span><span class="n">include_recipe</span> <span class="s1">&#39;fpm-tng::default&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fpm_tng_package</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">name</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">input_type</span> <span class="s1">&#39;dir&#39;</span>
</span><span class='line'>    <span class="n">output_type</span> <span class="s1">&#39;deb&#39;</span>
</span><span class='line'>    <span class="n">version</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">version</span>
</span><span class='line'>    <span class="n">prefix</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">prefix</span>
</span><span class='line'>    <span class="n">chdir</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">chdir</span>
</span><span class='line'>    <span class="n">input_args</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">input_args</span>
</span><span class='line'>    <span class="n">provides</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">provides</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ruby_block</span> <span class="s2">&quot;upload </span><span class="si">#{</span><span class="n">new_resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> package&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">block</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">require</span> <span class="s1">&#39;fog&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">connection</span> <span class="o">=</span> <span class="no">Fog</span><span class="o">::</span><span class="no">Storage</span><span class="o">.</span><span class="n">new</span> <span class="ss">provider</span><span class="p">:</span>              <span class="s1">&#39;AWS&#39;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="ss">aws_access_key_id</span><span class="p">:</span>     <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;access_key_id&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                    <span class="ss">aws_secret_access_key</span><span class="p">:</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;secret_access_key&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">bucket</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">directories</span><span class="o">.</span><span class="n">get</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;symondsandson_packages&#39;</span><span class="o">][</span><span class="s1">&#39;s3&#39;</span><span class="o">][</span><span class="s1">&#39;bucket&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">file</span> <span class="o">=</span> <span class="n">bucket</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span> <span class="ss">key</span><span class="p">:</span>  <span class="o">::</span><span class="no">SymondsandsonPackages</span><span class="o">.</span><span class="n">upload_path</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">new_resource</span><span class="o">.</span><span class="n">version</span><span class="p">),</span>
</span><span class='line'>                                 <span class="ss">body</span><span class="p">:</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;/opt/fpm-pkgs/</span><span class="si">#{</span><span class="n">new_resource</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">new_resource</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2">.deb&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a lot of stuff going on here, so let&rsquo;s take it piece by piece.</p>

<p>First, we set some instance variables for use throughout the provider. We use them almost immediately in the <code>install</code> action with the excellent <a href="https://github.com/adamsb6/s3_file">s3_file</a> Chef provider, which allows us to easily download files from S3. Tragically we are forced to do some Ruby gymnastics to set instance variables for the providers, since instance variables do not enter blocks appropriately in Chef&hellip; but once the file is downloaded from S3, we use dkpg_package on it to install it. If both the files was downloaded and installed, then the <code>install</code> action updated its resource.</p>

<p>The <code>create</code> action is just as easy. We pass in a bunch of arguments that fpm expects: here we make extensive use of the <a href="https://github.com/hw-cookbooks/fpm-tng">fpm_tng</a> provider, which wraps the installation and use of fpm. Finally, we manually upload the created package file using Fog directly.</p>

<p>Using this provider and the <code>create</code> recipes above, you should be able to start up a vagrant or test-kitchen instance using a recipe like <code>symondsandson_packages::create_ruby</code> and have it automatically compile and upload Ruby to an S3 bucket of your choosing.</p>

<h2>Installing Packages</h2>

<p>Now that we have the provider out of the way, installing packages is simplicity itself!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># symondsandson_packages/recipes/install_ruby.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Do common basics.</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;apt&#39;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;build-essential&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Install necessary packages</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;zlib-devel compiletime install&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">package_name</span> <span class="s1">&#39;zlib1g-dev&#39;</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">run_action</span><span class="p">(</span><span class="ss">:install</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Install rbenv to manage the Ruby versions</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;custom_ruby::rbenv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Install libyaml so Ruby can function</span>
</span><span class='line'><span class="n">package</span> <span class="s1">&#39;libyaml-dev&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">symondsandson_packages</span> <span class="s2">&quot;ruby-2.2.0&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;ruby&#39;</span>
</span><span class='line'>  <span class="n">version</span> <span class="s1">&#39;2.2.0&#39;</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:install</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Make sure rbenv detects and sets shims for this Ruby</span>
</span><span class='line'><span class="n">rbenv_global</span> <span class="s1">&#39;2.2.0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple and robust system has allowed us to package up any kind of software in a repeatable, efficient manner and then deploy it to multiple servers quickly. It&rsquo;s saved our clients tons of time wasted in compilation, and was pretty interesting and fun to code besides. Hopefully you&rsquo;ll find it useful as well!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Cookbook Continuous Integration]]></title>
    <link href="http://joshsymonds.com/blog/2015/02/04/chef-cookbook-continuous-integration/"/>
    <updated>2015-02-04T11:37:38-06:00</updated>
    <id>http://joshsymonds.com/blog/2015/02/04/chef-cookbook-continuous-integration</id>
    <content type="html"><![CDATA[<p>Testing infrastructure is as crucial to the success of a business as testing applications. Yet most infrastructure is untested and validated only occasionally, and only by hand &ndash; this is especially a tragedy when chef is used, because chef has many high-quality tools to provide testing coverage from <a href="https://foodcritic.io">static analysis</a> to <a href="https://github.com/sethvargo/chefspec">unit testing</a> and even <a href="http://kitchen.ci/">full convergence runs</a>.</p>

<p>At Symonds &amp; Son, we spent a lot of time and energy integrating our tests on <a href="https://circleci.com">CircleCI</a> into a continuous deployment process that begins with three layers of testing and ends with automated cookbook deployment to the chef servers we manage. I&rsquo;ll discuss chef continuous deployment in a later article; here, I&rsquo;ll cover how we got Foodcritic, ChefSpec, and Test Kitchen all running seamlessly in Circle.</p>

<!-- more -->


<blockquote><p>My good friend and coworker, <a href="https://twitter.com/chrislopresto">Chris LoPresto</a>, contributed greatly to the engineering innovations discussed here.</p></blockquote>

<p>CircleCI has a number of great integrations: here we&rsquo;ll use their docker service to create docker instances and automatically converge them with Test Kitchen. Before we do so, we&rsquo;ll run foodcritic and ChefSpec on them as well just to make sure everything works as we would expect.</p>

<h2>Get Tested</h2>

<p>You&rsquo;ll need to actually set up tests and get them running before getting them into continuous integration! Happily the process of testing cookbooks is relatively fast and easy: all three software tools Symonds &amp; Son uses have great documentation and tons of examples on the Internet. Here&rsquo;s how we set them up.</p>

<h3>Foodcritic</h3>

<p>Running Foodcritic is pretty simple. Simply add the foodcritic gem to your <code>Gemfile</code> and execute a command like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>foodcritic . -X spec -f any -t ~FC003
</span></code></pre></td></tr></table></div></figure>


<p><code>~FC003</code> instructs Foodcritic not to use a rule that guards for chef-solo. We intentionally do not obey rule FC003 as we use chef-zero locally and chef-server remotely.</p>

<h3>ChefSpec</h3>

<p>ChefSpec is slightly more complicated. Your best bet is to follow the excellent installation guide at the <a href="https://github.com/sethvargo/chefspec">ChefSpec README</a>, since we don&rsquo;t really do any customization on top of that: our ChefSpec tests are rather traditional. Here&rsquo;s a sample from our cookbook that updates aptitude:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;chefspec&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;custom_apt::default&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="n">stub_recipes</span> <span class="sx">%w(apt)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:chef_run</span><span class="p">)</span> <span class="p">{</span> <span class="no">ChefSpec</span><span class="o">::</span><span class="no">Runner</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">converge</span><span class="p">(</span><span class="n">described_recipe</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;upgrades upstart&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">chef_run</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">upgrade_package</span><span class="p">(</span><span class="s1">&#39;upstart&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Test Kitchen</h3>

<p>The most complicated of the chef testing suites, Test Kitchen performs actual convergence on a platform of your choice and then will run automated tests on the created instance. Test Kitchen is also the most essential of the suites, in my opinion &ndash; performing static analysis and unit tests are all well and good, but the only way to definitively determine if your cookbook works is to actually ensure servers converge and that their internal state is correct.</p>

<p>Most of our cookbooks use <a href="https://docker.com">Docker</a> containers to perform testing. This has downsides: docker containers will not allow you to modify important files in their <code>/etc</code> directory. For example, you cannot change iptables rules in a docker container. Additionally Upstart does not work at all in docker-land. Despite drawbacks like this, docker has many advantages. It is extremely fast and well-supported across testing providers. In fact, our continuous integrator of choice, Circle, provides first-class support for docker containers on their test VMs &ndash; allowing you to run docker Test Kitchen convergences directly on Circle.</p>

<p>Happily, the <code>.kitchen.yml</code> that supports this is rather standard:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">docker</span>
</span><span class='line'>  <span class="l-Scalar-Plain">privileged</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">provisioner</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">chef_zero</span>
</span><span class='line'>  <span class="l-Scalar-Plain">require_chef_omnibus</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">11.16.4</span>
</span><span class='line'>  <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">test-kitchen</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">platforms</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ubuntu-14.04</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">suites</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span><span class='line'>    <span class="l-Scalar-Plain">run_list</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">recipe[cookbook::default]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only special section to note here is the driver configuration: we&rsquo;re using docker and setting it to privileged mode, which enables it to more exactly match a cloud VM.</p>

<p>Just for completeness&#8217; sake, here&rsquo;s a simple test from the afore-mentioned aptitude cookbook testing for the proper version of Upstart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;serverspec&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:backend</span><span class="p">,</span> <span class="ss">:exec</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">command</span><span class="p">(</span><span class="s1">&#39;apt-cache policy upstart | grep Installed&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:exit_status</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:stdout</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;1.12.1&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have your three testing suites set up, all that remains is to integrate them into Circle.</p>

<h2>Circle Continuous Integration</h2>

<p><a href="https://circleci.com">CircleCI</a> is my favorite continuous integration tool. It has a great UI and is really simple to set up with GitHub: it also has great support for third-party plugins, and even better, lets you SSH into a failed instance to run tests yourself and figure out exactly what went wrong.</p>

<p>For our purposes, we need CircleCI to properly install chef and then run all the tests on our cookbook. As it turns out this is not all that difficult to set up: you&rsquo;ll want a <code>circle.yml</code> that looks a little like this&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">machine</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span>
</span><span class='line'><span class="l-Scalar-Plain">dependencies</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pre</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">if ! chef -v; then</span>
</span><span class='line'>        <span class="l-Scalar-Plain">if ! [ -f chefdk_0.3.5-1_amd64.deb ]; then</span>
</span><span class='line'>          <span class="l-Scalar-Plain">wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chefdk_0.3.5-1_amd64.deb;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">fi;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">sudo dpkg -i chefdk_0.3.5-1_amd64.deb;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">fi</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chef gem install specific_install</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo chef gem specific_install kitchen-docker -l http://github.com/peterabbott/kitchen-docker.git -b v1.6.4</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo chef gem uninstall chefspec</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chef gem install chefspec:4.0.1</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mkdir ~/.chef</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cp ~/${CIRCLE_PROJECT_REPONAME}/test/circle/knife.rb ~/.chef/knife.rb</span>
</span><span class='line'>  <span class="l-Scalar-Plain">cache_directories</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./chefdk_0.3.5-1_amd64.deb</span>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">override</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chef exec berks install</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chef exec rspec -P spec/**/*_spec.rb --tty --color</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chef exec foodcritic . -X spec -f any -t ~FC003</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">chef exec kitchen test</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a lot going on here, so let&rsquo;s dive in at the top!</p>

<p>First, the <code>machine.services</code> directive informs CircleCI we want docker to start on our Circle test VMs. Without this, the kitchen specs won&rsquo;t work at all.</p>

<p>Next comes the dependencies directive. Chef provides the excellent <a href="https://downloads.chef.io/chef-dk/">ChefDK</a> download which bundles everything we care about: chef&rsquo;s own command-line interface, <a href="https://berkshelf.com">Berkshelf</a> (for managing cookbook dependencies), and all three testing tools we&rsquo;re using. We&rsquo;re installing the official Chef <code>.deb</code> distribution of ChefDK onto the Circle machine to get around downloading each tool individually.</p>

<p>Next comes a bit of gem back-and-forth. Until very recently, the GitHub <a href="https://github.com/portertech/kitchen-docker">kitchen-docker main fork</a> was not kept up-to-date: we manually install a version of kitchen-docker that actually works, and then reinstall a better version of chefspec.</p>

<p>Finally, we copy a stub <code>knife.rb</code> to <code>~/.chef/knife.rb</code>. You&rsquo;ll need to set this file up yourself, but it&rsquo;s intentionally pretty small. If you&rsquo;re downloading any cookbooks from a Berkshelf-API server, you&rsquo;ll probably need to include a valid private key for that server either in the <code>knife.rb</code> (bad) or include it as an environment variable in Circle (good). Here&rsquo;s what the <code>knife.rb</code> should look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># A knife.rb for Circle</span>
</span><span class='line'>
</span><span class='line'><span class="n">node_name</span> <span class="s1">&#39;circleci&#39;</span>
</span><span class='line'><span class="n">chef_server_url</span> <span class="s1">&#39;https://your.chef.url&#39;</span>
</span><span class='line'><span class="n">client_key</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;CIRCLE_CI_MACHINE_USER_CHEF_KEY&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once all the setup is done, running the tests is by comparison quite simple! We perform a <code>berks install</code> and then run each test command individually. If you have your tests working locally, this should get them working properly in Circle as well.</p>

<p>Of course, even if you are testing your cookbooks, you&rsquo;re really only half-way to heaven. After testing comes deployment: and this can be a little difficult with chef&rsquo;s complicated keying and validation structure. In my next post I&rsquo;ll detail how we automatically release and deploy cookbooks to their destination chef servers&hellip; stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Numbers Behind Consulting in 2014]]></title>
    <link href="http://joshsymonds.com/blog/2015/01/06/the-numbers-behind-consulting-in-2014/"/>
    <updated>2015-01-06T14:10:38-06:00</updated>
    <id>http://joshsymonds.com/blog/2015/01/06/the-numbers-behind-consulting-in-2014</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always loved reading behind-the-scenes articles about people&rsquo;s businesses: where their money came from, where it went, and what they learned from operating their companies. Since I recently finished closing the books on my business for 2014, I thought I&rsquo;d make that sort of post for my own company &ndash; real numbers and real thoughts from a real business.</p>

<!-- more -->


<p>My consultancy, <a href="https://symondsandson.com">Symonds &amp; Son</a>, has had a successful year. In 2014 we grossed almost quadruple what we did in 2013 &ndash; which makes sense, since it was pretty me just me and some part-time contractors back then. While I very much hope we experience similar success in 2015, I&rsquo;m not exactly projecting continued growth of that magnitude &ndash; I think it&rsquo;s likely Symonds &amp; Son will finish next year in a similar place to this one, given my clients&#8217; burn rates and my excellent client retention numbers. But I&rsquo;m getting ahead of myself&hellip; let&rsquo;s start digging into the nitty gritty of my books.</p>

<h2>Expenses</h2>

<p>Symonds &amp; Son has three full-time employees: me, my mother, and my father. If you&rsquo;re curious how that works I made an <a href="http://joshsymonds.com/blog/2014/03/12/interviewing-symonds-and-son/">earlier post about working with your family</a>. We paid twelve contractors in 2014 for work as diverse as Rails application development, devops chef help, postgresql optimizations, iOS app creation, web and app design, and lots of accounting. Almost all (more than 96%) of our 2014 expenses were payroll and contractor payments:</p>

<div id="expenses_overview" style="min-width: 310px; height: 400px; max-width: 800px; margin: 0 auto 20px auto"></div>




<script>
$(function () {
    $('#expenses_overview').highcharts({
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false
        },
        title: {
            text: 'Symonds & Son 2014 Expenses'
        },
        tooltip: {
            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>: {point.percentage:.1f}%',
                    style: {
                        color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                    }
                }
            }
        },
        series: [{
            type: 'pie',
            name: 'Expenses',
            data: [
                {
                  name: 'Contractors & Payroll',
                  y: 96.5,
                  sliced: true,
                  selected: true
                },
                ['Hardware', 1.8],
                ['Software', 0.9],
                ['Operations', 0.7],
                ['Marketing', 0.2]
            ]
        }]
    });
});
</script>


<p>Operations is how I&rsquo;ve bucketed AWS, DigitalOcean, CircleCI, RackSpace, CodeClimate and GitHub subscriptions. Software, by contrast, is one-time license payments (for Adobe Photoshop, for example), and hardware is all my visits to the nearest Apple store or authorizing hardware purchases for contractors/employees.</p>

<p>See that 0.2% marketing expense? That was a very modest Google AdWords campaign. The result of that campaign was a reasonably good client lead that we were unable to follow up on, due to my inability to staff up quickly enough to satisfy it. In general, figuring out how to properly market Symonds &amp; Son has been my biggest challenge&hellip; but more on that below.</p>

<p>The 96.5% contractors &amp; payroll number might initially appear surprising, but I think in a consultancy it makes sense. My entire business relies on the strength of my employees &ndash; I&rsquo;m literally converting hours into software, when you get down to it, and my clients expect excellent quality and superior craftsmanship from my company. Also there&rsquo;s a fair amount of stuff that&rsquo;s just not in my core competency: though I manage my business as best I can, I do not do our taxes or bookkeeping, and I&rsquo;m happy to pay a really excellent accountant to do it for me.</p>

<p>Ultimately consultancies are about people, and I&rsquo;m proud to say that my expenses reflect the value of my contractors.</p>

<p>But that sounds a little trite. This post is about showing the numbers, so let me prove how much I value the skills of those I pay. Here&rsquo;s a chart showing how my money was divided among contractors and payroll, by skill:</p>

<div id="skill_expenses" style="min-width: 310px; height: 400px; max-width: 800px; margin: 0 auto 20px auto"></div>




<script>
$(function () {
    $('#skill_expenses').highcharts({
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false
        },
        title: {
            text: 'Symonds & Son 2014 Contractor/Payroll Expenses by Skill'
        },
        tooltip: {
            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>: {point.percentage:.1f}%',
                    style: {
                        color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                    }
                }
            }
        },
        series: [{
            type: 'pie',
            name: 'Expenses',
            data: [
                {
                  name: 'Rails',
                  y: 65.5,
                  sliced: true,
                  selected: true
                },
                ['chef', 18.2],
                ['elasticsearch', 3.6],
                ['postgresql', 4.5],
                ['iOS', 4.5],
                ['Design', 1.8],
                ['Marketing', 0.9],
                ['Accounting', 0.5],
                ['Legal', 0.4]
            ]
        }]
    });
});
</script>


<p>By necessity, Rails includes a fair amount of JavaScript/HTML/CSS stuff that it would be pretty difficult to break out.</p>

<p>Marketing here is a social media marketer who&rsquo;s helping me with branding and strategy &ndash; a separate expense from directly paying for advertising, and one that has been more useful anyway, in my opinion. Perhaps most surprising from a personal perspective is costs spent on chef: those expenditures are internal, buying the time of some really excellent talent from the chef community to improve and build on my infrastructure cookbooks.</p>

<p>One of my goals for 2015 is to acquire new infrastructure clients and package my existing infrastructure services as a software product, which we&rsquo;re tentatively calling Cornerstone. More on that below, as well.</p>

<h2>Revenue</h2>

<p>We had ten clients during 2014 and an additional four client possibilities that we failed to land, giving my company a conversion rate of 71%. That&rsquo;s really good, but as you&rsquo;ll see it&rsquo;s only part of the story. Here&rsquo;s how most of those clients found Symonds &amp; Son:</p>

<div id="lead_generation" style="min-width: 310px; height: 400px; max-width: 800px; margin: 0 auto 20px auto"></div>




<script>
$(function () {
    $('#lead_generation').highcharts({
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false
        },
        title: {
            text: 'Symonds & Son 2014 Client Leads'
        },
        tooltip: {
            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b> ({point.y})'
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>: {point.percentage:.1f}% ({point.y})',
                    style: {
                        color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                    }
                }
            }
        },
        series: [{
            type: 'pie',
            name: 'Leads',
            data: [
                {
                  name: 'Blog Posts',
                  y: 10,
                  sliced: true,
                  selected: true
                },
                ['Friend Referrals', 3],
                ['Adwords', 1]
            ]
        }]
    });
});
</script>


<p>Nearly all of my clients find me through the very blog you&rsquo;re reading right now. (Do you need Rails development, application scaling, or devops services? <a href="mailto:josh@joshsymonds.com?Subject=Hi&amp;nbsp;Josh!">Email me, I&rsquo;m really good!</a>)</p>

<p>Of those leads, we did not convert two friend referrals, one blog post, and the only Adwords potentials. Overwhelmingly, clients find and stick with me because of my writing. I think the success of my blog as a marketing mechanic is rather self-explanatory: if someone sees something I&rsquo;ve written about that they really need help with, they&rsquo;re very likely to pursue me and almost usher themselves through my sales pipeline.</p>

<p>This has downsides though &ndash; it&rsquo;s not really scalable. Increasing the reach of my blog is difficult since it&rsquo;s hard to properly advertise a (mostly) technical blog. In 2015 I hope to find more clients in need of devops and development services, particularly those I might not ordinarily reach with an article on consul or elasticsearch: say, a Vice President of Engineering or a Director of Technology who knows in general they need help, but not that they need cloud-scale chef deployments or expert Rails consulting.</p>

<p>As part of this shift I&rsquo;ve spent some time redesigning and rebranding my own corporate website, trying to productize my core offerings as packages of services, rather than just services. Hopefully product clarity will allow Symonds &amp; Son to sell more of what we do best in the coming year. I&rsquo;m looking to roll out this redesign by the end of February, so that will give me 10 months to test it.</p>

<p>I&rsquo;m proud to say that of my 2014 clients, all except two will be continuing into 2015 with me, giving Symonds &amp; Son an 80% yearly retention rate. The ones who I&rsquo;ve parted ways with I hope to see again; both are startups with funding issues. Considering the sample size is a bit small this doesn&rsquo;t necessarily mean anything, but I like to think that our clients appreciate the services we continue to provide to them.</p>

<p>Speaking of services, here&rsquo;s a rather interesting breakdown of Symonds &amp; Son revenue by technology service:</p>

<div id="technology_service" style="min-width: 310px; height: 400px; max-width: 800px; margin: 0 auto 20px auto"></div>




<script>
$(function () {
    $('#technology_service').highcharts({
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false
        },
        title: {
            text: 'Symonds & Son 2014 Revenue by Service'
        },
        tooltip: {
            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>: {point.percentage:.1f}%',
                    style: {
                        color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                    }
                }
            }
        },
        series: [{
            type: 'pie',
            name: 'Leads',
            data: [
                {
                  name: 'Rails Development',
                  y: 66.7,
                  sliced: true,
                  selected: true
                },
                ['Devops', 29.1],
                ['iOS', 4.2]
            ]
        }]
    });
});
</script>


<p>Devops is always sort of a loose term &ndash; here I mean recurring and one-time revenue from customers who are enjoying our really excellent chef cookbooks and infrastructure administration, and those who paid us to set up cloud installations for them. This includes postgresql and elasticsearch design and development by experts, for example, if you&rsquo;re correlating this to the expenses by skill chart from earlier.</p>

<p>And this revenue breakdown rather closely mirrors that chart, which after all makes sense: I&rsquo;m trying to match customers&#8217; needs to the skills of my organizations, and if I were paying a ton for, say, elasticsearch but didn&rsquo;t have many customers utilizing my contractors with those skills, I&rsquo;d have some expensive people sitting around doing nothing&hellip; far from optimal!</p>

<p>Though I&rsquo;m really happy with the iOS apps Symonds &amp; Son developed in 2014, they unfortunately produce the least revenue of any of our services. And I&rsquo;m not sure I want to change that much: in 2015, what I&rsquo;d like to see is increased revenue from devops. I&rsquo;ve very much enjoyed the operations contracts we&rsquo;ve had, and we&rsquo;ve invested a ton in our own cookbooks and development processes around those cookbooks &ndash; a whole suite of software and processes that we&rsquo;re calling Cornerstone. Using Cornerstone more would be a tremendous victory (and would be super fun, besides).</p>

<h2>Looking Back &amp; Looking Forward</h2>

<p>2014 was a really great year for Symonds &amp; Son. But that sets up a certain expectation of more success and more growth, when in truth it&rsquo;s impossible to predict what the coming year will bring. I personally view our present clients as extremely stable and loyal, so hopefully there&rsquo;s nowhere to go but up &ndash; but overall I hope to chart a conservative course for my company, erring on the side of growing properly rather than overexpanding.</p>

<p>And that&rsquo;s what the internals of a small consultancy looks like! Hope you&rsquo;ve found this interesting &ndash; and if you&rsquo;re looking for Rails development or devops help, don&rsquo;t be afraid to <a href="mailto:josh@joshsymonds.com?Subject=Hi&amp;nbsp;Josh!">drop us a line</a>. I think you&rsquo;ll be very pleased with our services.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Deployments with Consul]]></title>
    <link href="http://joshsymonds.com/blog/2014/10/21/continuous-deployments-with-consul/"/>
    <updated>2014-10-21T17:13:30-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/10/21/continuous-deployments-with-consul</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve fallen in love with <a href="http://www.consul.io/">consul</a>. At first glance, it&rsquo;s a bit like <a href="http://zookeeper.apache.org/">zookeeper</a> or <a href="https://github.com/coreos/etcd">etcd</a> &ndash; it handles service discovery, health checking, and even features a very simple k/v store. But consul does much more than merely expose a lovely DNS interface: one of its more powerful features is its ability to do cluster orchestration, efficiently and effectively propagating messages to all nodes. One of my client projects runs on a dozen servers across two applications; here&rsquo;s how I integrated CircleCI, chef, and consul together to make any GitHub commit run a deploy only to the targeted application, without needing to know any application server&rsquo;s name or IP address.</p>

<!-- more -->


<h2>Your servers</h2>

<p>This setup assumes you have your servers connect to chef for both provisioning and deployment; additionally, that your servers are named at least partially after the applications they serve. (I find this to be good practice anyway &ndash; as cute as it is to have server names themed from Teenage Mutant Ninja Turtles, in practice you just end up getting confused about what they do.) All the servers should be able to communicate together on a secure network. That&rsquo;s what you&rsquo;ll run consul on!</p>

<h2>consul</h2>

<p>First, you need to <a href="http://www.consul.io/intro/getting-started/install.html">install consul</a> on your servers and get them <a href="http://www.consul.io/intro/getting-started/join.html">communicating together properly</a>. As you can tell from my links, the consul documentation is extremely well-equipped to get you a fully functional consul cluster: just follow it and you&rsquo;ll be fine. Once it&rsquo;s all installed, you&rsquo;ll want to drop a watch like this in your app server&rsquo;s consul config directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;run-deploy&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;handler&quot;</span><span class="p">:</span> <span class="s2">&quot;sudo /usr/bin/chef-client&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;event&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the sudo above: chef-client must be run as root, but this shouldn&rsquo;t be too big of a concern. Just make sure that your consul service is running as a sudoer that can execute only that one command and you&rsquo;ll be fine.</p>

<h2>CircleCI</h2>

<p>Getting CircleCI set up properly with your GitHub repository is covered in great detail <a href="https://circleci.com/docs/configuration">at CircleCI&rsquo;s documentation</a>. Make sure your tests pass on CircleCI before you continue.</p>

<p>In order for this to work, CircleCI will have to be able to propagate that event to all your servers. The easiest way for it to do this is to have it SSH into one server and run the <code>consul event</code> command. From there, consul takes over to make sure all the appropriate servers receive the message. So let&rsquo;s create an SSH key for our CircleCI user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -C <span class="s2">&quot;continuous_deployment@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the resulting private key to CircleCI and create a corresponding user on one of the central servers of your cluster. In my setup, I have three separate instances all running consul in server mode: I assigned one of them the DNS <code>consul.example.com</code> and created a user there to accept Circle&rsquo;s SSH key. Notably this user does not need any sort of permissions at all, so leave them off the sudoers.</p>

<h2>Your project</h2>

<p>Now you need to change your circle.yml in your project, so that after a build CircleCI will initiate the deploy. This is pretty simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">deployment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">production</span>
</span><span class='line'>    <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ssh example@ip &quot;consul event -node &lt;app_name&gt; -name run-deploy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>&lt;app_name&gt;</code> filter there for nodes. I find it a good practice to name a node after the application running on it; so I might have one called <code>app1-web</code> and another <code>app2-worker</code>. This is helpful for performing consul node filtering: by providing <code>-node &lt;app_name&gt;</code>, you&rsquo;re ensuring that the consul event is only propagated to servers that actually run the targeted application.</p>

<p>The next time you push a commit, CircleCI will automatically SSH into your server and execute that event. Your application servers with the watches on them will run <code>chef-client</code> and pull down the latest code, automatically deploying the most recent version of your application.</p>

<p>This is obviously a fairly simple application of consul, but I found it extremely easy to setup and drop into my existing application provisioning and deployment process. consul provides a lot of automation and power, however, and you&rsquo;ll find it perfect for helping to bridge the small gaps in your provisioning system.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windy City Rails, Day One]]></title>
    <link href="http://joshsymonds.com/blog/2014/09/04/windy-city-rails-day-one/"/>
    <updated>2014-09-04T09:34:52-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/09/04/windy-city-rails-day-one</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a few years since I last went to Windy City Rails, despite the fact that it&rsquo;s oh-so-convenient and there are so many high-quality Ruby and Rails developers in Chicago. I decided to go this year and, for those not able to come, provide small synopses of the presentations. So, without further ado, I present: Windy City Rails 2014, Day One.</p>

<!-- more -->


<h2>1. Rubinius X by <a href="https://twitter.com/brixen">Brian Shirai</a></h2>

<p>This was a really dense talk, as one would expect about a completely new implementation of Ruby. <a href="http://rubini.us/">Rubinius</a> aims to be a performant, compliant Ruby &ndash; Rubinius X means version 10 of Rubinius (8 versions ahead of MRI!), and has some very ambitious goals: perhaps the most interesting of which is ensuring the future of Ruby.</p>

<p>It&rsquo;s no secret that Ruby is old now. The question is, how do we keep it relevant even in its increasing age? Brian&rsquo;s hedge against winding up in a programmer nursing home is Rubinius X, which has a lot of interesting features:</p>

<ul>
<li>First-class network support, including better concurrency and easier communications. No more global interpreter lock problems! (Though whether any ordinary user of Ruby would ever really run into GIL issues is an open question&hellip;) No more shared memory! No more mutable strings! Wait, what was that last one? Well, we should ask ourselves, why is there a difference between strings and symbols at all? A reasonable question ask, and symbols vs. strings are certainly one of the first conceptual stumbling blocks to understanding Ruby. This led to this great line:</li>
</ul>


<blockquote><p>The greatest trick the devil ever pulled was to convince language designers that strings are arrays of characters. - Brian Shirai</p></blockquote>

<ul>
<li>Better performance. I rather think focusing on Ruby&rsquo;s performance is a red herring &ndash; it&rsquo;s generally fast enough for most of our purposes, and if you&rsquo;re doing scientific computing most likely you&rsquo;re optimizing C anyway. But Rubinius X has per-method compilation, allowing for significant bytecode performance increases&hellip; in addition to in-code type assertions and cost-free instrumenting. Faster is never a bad thing!</li>
<li>Capturing the program&rsquo;s runtime experience. Rubinius X allows us to see what lines of code were actually invoked, what arguments were passed to methods, and in general grants a really granular view on what code is actually being run in production.</li>
<li>Functional programming paradigms, including real functions as first-class citizens (not just <a href="http://apidock.com/ruby/Module/module_function">module_function</a>). You can declare dynamic or static types for these functions with type assertion checking.</li>
</ul>


<p>The claim is that Rubinius (and Rubinius X) are usable today, immediately, in your MRI app with only minor changes to your Gemfile.</p>

<p>As exciting as all this is, I am personally a little skeptical. Rubinius X promises the moon and stars but we saw little actual code demoed, so I&rsquo;m not sure how many of these features are actually available or how best to use them. I would be interested in performance comparisons to MRI and seeing an example of how this would improve my existing code and simplify my app&rsquo;s design patterns before I&rsquo;m totally sold.</p>

<h2>2. Recommendation Engines with Redis and Ruby by <a href="https://twitter.com/elight">Evan Light</a></h2>

<p>By comparison to the previous, this session was quite light. Extremely helpful for the Rubyist not yet familiar with <a href="https://github.com/resque/resque">resque</a> or <a href="redis.io">redis</a>, Recommendation Engines with Redis and Ruby focused on a specific case study for implementing a recommendation engine in redis.</p>

<p>While the talk was quite fascinating, I was personally hopeful it would focus on the statistical methods of recommendation (using something like k-clustering), which it did not. Instead, the case study discussed implementing a solid and performant recommendation engine taking advantage of redis&#8217; native features: inverted indexes, clever key TTL tricks, sorted sets, and queues, queues, queues!</p>

<p>resque workers performed the actual recommendation work, which was based purely on the relative apparent interest of users in tags, and bubbling up posts and users based on the users&#8217; own tagging behavior.</p>

<p>Though an interesting and conversational case study, and probably very informative for a beginning Rails user, this session did not really discuss anything revolutionary &ndash; probably because the sample app seemed to be a few years old at this point. resque is old news now, and redis even older, but the design patterns discussed were still universal and helpful.</p>

<h2>3. What Devise Does When You&rsquo;re Not Looking by <a href="https://twitter.com/lucasmazza">Lucas Mazza</a></h2>

<p><a href="https://github.com/plataformatec/devise">Devise</a> is the most popular Rails authentication framework, and this was a very useful presentation on what Devise actually does and how it does it. Significantly more interesting than just a read-through of the Devise README, this presentation was simply a walkthrough of the gem and how to customize it.</p>

<p>The foundation of Devise is <a href="https://github.com/hassox/warden">Warden</a>. If Rack is HTTP infrastructure or ActiveModel is ORM infrastructure, Warden is authentication infrastructure. Warden is Rails middleware that provides user session management, failure handling, and lifecycle callbacks. Devise integrates Warden&rsquo;s magic seamlessly with Rails, providing model, router, and controller/view patterns to handle almost all common authentication cases.</p>

<p>Of course, Device&rsquo;s Rails opt-in model integration is great. It provides modules such as session expiration, IP tracking, and account confirmation all in your user model, if you want it. And on top of that you have routing helpers and tons of default controller actions and views. Additionally, Devise is sensibly secure by default &ndash; after all, you don&rsquo;t want to be concerned with implementing security! Security experts should be taking care of that. So Devise uses bcrypt, encrypted tokens, and prevents timing attacks by default.</p>

<p>Devise is a set of reusable, extensible shortcuts for getting authentication cleanly and seamlessly into a Rails app, and honestly everyone should be using it in their app if they aren&rsquo;t already. This session was a concise overview of how best to implement it and configure it.</p>

<h2>4. Let&rsquo;s Do Some Upfront Design by <a href="https://twitter.com/mark_menard">Mark Menard</a></h2>

<p>Initially I was concerned this would be a session about visual design, but actually this was a very cogent presentation on code design, refactoring, and the proper way to structure code. That said, it started with a rather controversial question: who likes TDD? Who doesn&rsquo;t like it? Hands were raised and responses mixed, with most people falling somewhere in between.</p>

<p>Though doing upfront design has a reputation for not being particularly agile, <em>Let&rsquo;s Do Some Upfront Design</em> argued quite clearly that planning before starting a project can reap immense rewards down the road. Particularly using sequence diagrams and separating the coordinators (the what) from the processors (the how) can simplify your thinking about a system and lead to better abstractions and inheritance hierarchies.</p>

<p>While this was a really helpful talk from a design perspective, the focus on testing quickly became very abstract, disappearing into the realm of mock objects far too rapidly for my tastes. (What exactly is the value of tests if they&rsquo;re all testing mocks?) Still, for illustrative purposes the tests were very well-written, and seeing the value in both clear tests and clear models went a long way to showing the value of early planning.</p>

<p>The overall value that the upfront design achieved is undeniable, and the talk itself quite clearly illustrated that with many examples and clearly argued points.</p>

<h2>5. Protect Your Code by <a href="https://twitter.com/SaperLaw">Daliah Saper</a></h2>

<p>Of all the sessions on the first day, this was the one I was looking forward to most! My consulting business, <a href="https://symondsandson.com">Symonds &amp; Son</a>, has been quite successful, but success brings with it the reality of contract negotiations and the potential for legal difficulties, areas I am not yet too familiar with.</p>

<p>Though taking only half an hour, <em>Protect Your Code</em> summarized the main legal issues facing developers: copyright law, licensing, open source software, work for hire, licensing and assignment, trademarks, and contract law.</p>

<p>Perhaps the biggest take-away for me was understanding code ownership a little bit better. If you are an employee of an organization and you develop code in your day job, the company owns that code. You don&rsquo;t have to sign a piece of paper for this &ndash; it&rsquo;s just that way by default. As a private contractor, everything you create is yours &ndash; except work for hire, where you must assign copyright to the person hiring you.Either as an employee, employer, contractee or contractor it&rsquo;s vitally important to understand the ownership of created code and how contracts change that ownership.</p>

<p>And that led naturally into a discussion of licensing with open source software, particularly the tainting nature of the Gnu Public License. When used for hobbyist projects it&rsquo;s quite acceptable, but the fact that everything it touches becomes open-source can be quite a nuisance for enterprise-grade software.</p>

<p>While fascinating through and through, this presentation make me concerned to review the contracts I use in my business. Probably this is a sensible warning to all consultants: have a good lawyer look over your agreements. Hopefully it&rsquo;ll be wasted money, but if it&rsquo;s not, it&rsquo;ll have been a very worthwhile exercise.</p>

<h2>6. Domain Driven Rails by <a href="https://twitter.com/skwp">Yan Pritzker</a></h2>

<p><em>Domain Driven Rails</em> started with a boxing match between DHH and Uncle Bob.</p>

<p>Throughout the first day as a whole, there was definite tension between the simple, CRUD-based applications DHH advocates and the complicated, enterprise logic of Uncle Bob&rsquo;s hexagonal architecture. (To anyone who&rsquo;s been to Ruby conferences before this will probably come as no surprise.) Of course there&rsquo;s no resolution to be found between the two, and happily, this talk took a very sensible middle-ground.</p>

<p>It also included lots of actual code and many interesting statistics from Code Climate on a real, actual project: <a href="https://reverb.com/">reverb</a>, a guitar marketplace. Though the reverb app is monolithic by any definition of the word, with a thousand classes and a hundred models, it still manages to have low churn, high code quality, and quick development iterations. Indeed, they defended their huge application with a very sensible quote from Martin Fowler about the trend towards separating apps into distinct services:</p>

<blockquote><p>While small microservices are certainly simpler to reason about, I worry that this pushes complexity into the interconnections between services, where it&rsquo;s less explicit and thus harder to figure out when it goes wrong. - Martin Fowler</p></blockquote>

<p>reverb&rsquo;s refactoring secret? Plain old Ruby objects! The presentation argued quite convincingly in favor of rejecting &ldquo;skinny controller, fat model&rdquo; for &ldquo;skinny controller, skinny model, and skinny domain objects sitting between the two.&rdquo; This domain layer encapsulates specific kinds of behavior &ndash; say, a ReturnOrderMailer or a ProcessUserCreditCard &ndash; that can decorate models but are not necessarily part of them.</p>

<p>This definitely takes the better parts of DHH&rsquo;s philosophy of simple POROs while rejecting MVC as the be-all, end-all of Rails application design. Decorators, combined with events and event listeners, helped to significantly lower the architectural complexity of reverb without having to break it out into many disparate parts.</p>

<p>Overall a very solid argument, though I&rsquo;m still not completely on-board with the idea of hundreds of classes each controlling a minute part of a model&rsquo;s behavior. It clearly works for reverb, though.</p>

<h2>7. Go for Rubyists by <a href="https://twitter.com/lostghost">Ken Walters</a></h2>

<p>Providing a straightforward, sensible introduction to Go, <em>Go for Rubyists</em> gave us a glance at Go, complete with code samples and helpful walkthroughs. Once again, the keywords for this presentation were &ldquo;performance&rdquo; and &ldquo;concurrency,&rdquo; which should be no surprise to anyone who&rsquo;s even slightly familiar with Go.</p>

<p>And it&rsquo;s hard not to be seduced by the allure of Go. It&rsquo;s pretty great &ndash; fast compilation, statically linked, highly opinionated, lots of tooling, and all that while still human readable.</p>

<p>Concurrency is a first-class citizen in Go, based on routines and channels. A routine is sort of like a very, very lightweight thread. Routines communicate not by sharing memory, but by transferring data over channels. A very clear separation that makes it easy to reason about multi-threaded applications.</p>

<p>It&rsquo;s always interesting to see other perspectives and different languages. This was a well-done presentation filled with demos and language samples, so it was clear and obvious what the benefits of Go would be for a Rubyist. If you also find Go interesting, you should go to <a href="http://golang.org/">golang.org</a> and check it out yourself.</p>

<h2>8. Resolved: Your Local Government Runs on Rails by <a href="https://twitter.com/tiffani">Tiffani Bell</a></h2>

<p>A fascinating discussion about using software in the public sector, <em>Resolved</em> dealt mainly with the experience of programming for large government entities. Spoiler alert: it sounds pretty difficult.</p>

<p>Though governments make use of many of the same Rails tools any of us would find familiar &ndash; Heroku, postgres, jQuery &ndash; the talk dealt a lot with the many different data formats that bureaucracies seem to inevitably accrue. If you&rsquo;re lucky, your city might have a bunch of CSVs on-hand. But if you&rsquo;re not, you&rsquo;ll have a lot of scanned documents you&rsquo;ll likely need to parse for data.</p>

<p>The presentation had some code samples on how to do this via OCR with Google&rsquo;s Tesseract, falling back on Mechanical Turk in the case of ambiguity. Overall a clever solution that would probably prove extremely helpful for the (likely many) governments with legacy scanned data.</p>

<p>It&rsquo;s rare to hear about the use of Rails (or just software development in general) outside of the isolated bubbles of startups and the larger but still isolated bubbles of large corporations. <em>Resolved</em> had a lot of great insight into this underreported facet of Ruby usage.</p>

<h2>9. The Functional Web by <a href="https://twitter.com/sgrif">Sean Griffin</a></h2>

<p><em>The Functional Web</em> argued that Rails must evolve to meet the needs of a changing Internet: web sockets, streaming responses, and event-based connections all cry out for a Rails solution that ActionController and Rack cannot easily provide. While it&rsquo;s easy to agree that these are all things Rails is terrible at, I&rsquo;m not sure if Rails will ever be a great tool for solving these sorts of problems.</p>

<p>Ultimately Rails is intended to serve web applications, and thus must return a response within a reasonable period of time &ndash; as the presentation pointed out, unicorn and delayed_job (or preferentially sidekiq) can get you pretty far for both synchronous responses and asynchronous workers.</p>

<p>Once again, that bogeyman of Rails, concurrency, was evoked. But Rails is actually quite performant even in high-load situations with the proper application optimizations and server configurations. Concurrency issues, in my experience, primarily occur if you&rsquo;re doing something that should not really be done in the request lifecycle &ndash; like serving huge files or processing tons of data.</p>

<p>And as if to illustrate that the presentation started discussing the best way to spawn a thread in a Rails controller to do both those things. This is a pretty significant anti-pattern for the reasons the talk itself described; it&rsquo;s semantically unpleasant, incredibly slow, and generally just the wrong place to do this.</p>

<p>Criticism aside, <em>the Functional Web</em> sensibly pointed out that Ruby needs better thread implementation and support. But if Rails is ever going to be a sensible server for web sockets and streaming responses, it&rsquo;ll have to look very, very different than it does today&hellip; and I&rsquo;m not sure that&rsquo;s such a good thing, when excellent tools to accomplish these goals exist already.</p>

<h2>Side Thoughts</h2>

<ul>
<li>BrainTree&rsquo;s CryptoHunt is a cute idea, but I&rsquo;m willing to bet the prize is an employment offer from BrainTree. I would&rsquo;ve been more excited by a year of free credit card processing or something.</li>
<li>People seem to generally think DHH was very inflammatory at RailsConf with the whole &ldquo;TDD is dead&rdquo; keynote, though almost everyone agrees TDD should only be used when it makes sense.</li>
<li>VenueOne is actually pretty swanky and the food was reasonably good. Hors d&#8217;oeuvres during cocktails were tasty.</li>
<li>Everyone thinks concurrency is a big pain point for Rails. I find this point of view mysterious.</li>
<li><a href="https://twitter.com/RayHightower">Ray Hightower</a> is a super duper friendly guy.</li>
</ul>


<p>And that&rsquo;s all I have for day one of the conference! Tune in tomorrow though, there are a lot more presentations and I&rsquo;m quite excited about a few of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Turn Yourself Into a Programmer]]></title>
    <link href="http://joshsymonds.com/blog/2014/07/29/how-to-turn-yourself-into-a-programmer/"/>
    <updated>2014-07-29T15:25:14-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/07/29/how-to-turn-yourself-into-a-programmer</id>
    <content type="html"><![CDATA[<p>So you want to become a programmer, huh?</p>

<p>Maybe it&rsquo;s because President Obama <a href="https://www.youtube.com/watch?v=6XvmhE1J9PY">told you to learn computer science</a>, and you&rsquo;re not gonna argue with the President.</p>

<p>Or maybe it&rsquo;s because you hunger to make something &ndash; a product other people use &ndash; and you&rsquo;re tired of a job where, at the end of the day, you wonder what exactly you did or why it even mattered. And hey, making software is easier and cleaner than making furniture.</p>

<p>But realistically it&rsquo;s probably because of the money. Glassdoor claims that <a href="http://www.glassdoor.com/Salaries/software-engineer-salary-SRCH_KO0,17.htm">software engineers make a median salary of $85,000</a>, which is nothing to sneeze at. Even the lowliest programmers can look forward to taking home about $60k, and if you have a talent and drive for programming, then the only limit to your salary is your ambition.</p>

<p>All well and good. But how do you go from a casual smartphone owner and recreational computer user to actually making software? And then how do you turn making software into real money that appears in your wallet and bank account?</p>

<p>After my <a href="http://joshsymonds.com/blog/2014/01/14/rails-consulting-for-fun-and-profit/">article on consulting in Rails</a>, easily the most-asked question I received was: &ldquo;How do I become a programmer, and what do I do when I get there?&rdquo; No one is born with a keyboard strapped to their hands: every programmer you know learned how to do it. I did too. Here I&rsquo;ll describe what I found most helpful for getting into programming, how I&rsquo;d do it again if I had to, and what you should keep in mind if you decide to set off on the programmer&rsquo;s path.</p>

<p>This post is extremely long. But hopefully by the end of it, you&rsquo;ll have some clear ideas and inspirations for how to turn yourself into a real, honest-to-goodness programmer.</p>

<!-- more -->


<h2>Before You Start</h2>

<p>To become a programmer, you don&rsquo;t need a computer science degree, hipster glasses, youth, or even beauty. (You also don&rsquo;t need a particularly strong math background, in case you&rsquo;re concerned.) That said, there are some things you really do need &ndash; if you can&rsquo;t put a check-mark next to these prerequisites, you might want to seriously reconsider a journey into the realms of computer science.</p>

<ol>
<li><p><strong>A love for computers</strong>. If you can&rsquo;t see yourself working in front of a computer 8+ hours a day, happy as a clam, then I appreciate you reading this far, but this career path probably isn&rsquo;t for you.</p></li>
<li><p><strong>Sacrifice</strong>. Most software, tools, and books to learn computer programming are free. Some of the best ones, unfortunately, aren&rsquo;t. You won&rsquo;t have to spend thousands of dollars (unless you need to buy a computer), but it&rsquo;s probably reasonable to expect an outlay of a couple hundred to purchase books and software. And that doesn&rsquo;t even factor your time into it &ndash; you have to put in the work to get out the results, so expect late nights and early mornings.</p></li>
<li><p><strong>Drive</strong>. The going will likely get tough &ndash; really tough. When doing something outside of your comfort zone, it&rsquo;s easy to get disheartened and lose your way. How long you can stick it out and keep coming back will determine whether you end up with programming as a hobby, a mediocre skill, or a mastery. Unfortunately there&rsquo;s no shortcuts here. You just have to do it.</p></li>
</ol>


<h2>The Finish Line</h2>

<p>Still with me? Good.</p>

<p>Before you even set off on this journey, we should consider the end goal. Specifically, what do you need to know in order for a potential employer to consider you a viable candidate for a programming job?</p>

<p>This prospective employer will look for three things when evaluating you for a programming job:</p>

<ol>
<li><p><strong>Actual knowledge of the programming language.</strong> Your employer will vet your technical competency by examining your existing code and asking you specific technical questions: for Ruby, the classic chestnut is &ldquo;<a href="http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/">what&rsquo;s the difference between a block, a proc, and a lambda?</a>&rdquo; Though you&rsquo;ll get bonus points for knowing everything 100%, no one expects you to have your language memorized offhand or even know the minute details of its operation. They&rsquo;re looking for breadth of knowledge, where you&rsquo;d go to look stuff up if you didn&rsquo;t know it, and a general feeling you&rsquo;ve been around the block at least once or twice. In your code samples, they&rsquo;ll want to see competence and fluency in the language in question.</p></li>
<li><p><strong>Having used programming in a professional capacity.</strong> Even if you know your language, you&rsquo;re no good to anyone if you can&rsquo;t apply your skills and complete projects. An empty resume with a note at the top that you love to code won&rsquo;t get you hired anywhere. The unfortunate reality of the labor market is that everyone only wants to hire proven winners. You have to establish you are one if you want to be employable. That said, you needn&rsquo;t have created enterprise-level software as part of a twenty-person team &ndash; personal projects hosted on GitHub or Bitbucket are more than sufficient to get hired.</p></li>
<li><p><strong>Demonstrated ability to work with other human begins.</strong> Yes, you want to be a computer programmer, not a diplomat, and yes, <a href="http://joshsymonds.com/blog/2014/06/15/your-job-is-to-code/">your job is to code</a>: but you&rsquo;ll probably end up talking a lot to your boss, coworkers, and possibly even customers. You have to be able to put people at ease and make them like and trust you, or else your career won&rsquo;t go anywhere at all &ndash; and you certainly won&rsquo;t make it past even a casual interview.</p></li>
</ol>


<h2>What Language Should I Learn?</h2>

<p>Well, I like <a href="http://ruby-lang.org/">Ruby</a>. It&rsquo;s beautiful, functional, easy for beginners and powerful for experts. Professionally you&rsquo;ll use it either to create web and mobile applications (with <a href="http://rubyonrails.org/">Ruby on Rails</a> or <a href="http://www.rubymotion.com/">RubyMotion</a>, respectively). <a href="http://www.python.org/">Python</a> is also great for many of the reasons that Ruby is, and generally more popular for non-web purposes, so you can&rsquo;t go wrong with either.</p>

<p>Lots of people swear by Java, and if you&rsquo;re in a big company it&rsquo;s probably much easier for you to get buy-in for a language backed by Oracle than one created by a bunch of people on the Internet.</p>

<p>If you want to create graphically intensive computer games, you&rsquo;ll want to brush up your math a little bit and check out the grand-daddy of programming languages, C (and its offshoots and derivatives, C++, Objective-C, and C#, depending on your platform). C is hard to start with, though, and has a lot of complicated concepts &ndash; if you&rsquo;re just beginning, a language slightly friendlier to humans would smooth the learning curve.</p>

<p>It&rsquo;s hard to go wrong with any language, though, since most of the skills you&rsquo;ll learn in one will be more or less portable to another.</p>

<h2>Ready, Set, Go!</h2>

<p>With no further ado, a step-by-step list to go from zero to hero! If some steps are too remedial for you, just skip ahead until you get to a point where you think it&rsquo;s reasonable to follow along.</p>

<h3>1. Learn about computers</h3>

<p>Yes, you might use one every day and carry one around with you in your pocket. But what do you really know about these mysterious machines that make your life easier? Probably all too little!</p>

<p>Even the computer languages that look very much like English require you to know something about the interior operations of a computer: you don&rsquo;t have to be an expert, but a generalized idea of how things work will be necessary for you to get into programming. For example, if you don&rsquo;t know what files are, what memory is, or how to find your IP address, you should start doing a little research. I suggest <a href="http://en.wikibooks.org/wiki/Computers_for_Beginners">Computers for Beginners</a>, which can be dry at times but covers a lot of ground very efficiently.</p>

<p>It would probably also be helpful to learn a little bit about the structure of the Internet if you intend to do web programming of any sort&hellip; and these days, almost everything seems to involve a little bit of web programming. HowStuffWorks has a <a href="http://computer.howstuffworks.com/internet/basics/internet.htm">good explanation</a> of the general structure of the Internet that isn&rsquo;t too technical.</p>

<h3>2. Learn about computer programming</h3>

<p>Programming languages can be very different indeed; but at their heart, they&rsquo;re just instructions for telling a computer what to do. Since computers are quite similar, most programming languages rely on many of the same concepts.</p>

<p>This is where programmers start spouting jargon like recursion, iteration, and conditionals. Though those are relatively big words, the concepts underlying them are quite simple and learnable. There are a lot of great places to start learning the basics, but I have a soft spot for <a href="http://learn.code.org/hoc/1">code.org&rsquo;s basics lessons</a>. It might seem more like a game than programming&hellip; and that&rsquo;s a good thing.</p>

<p>Or, if you&rsquo;d prefer disconnecting from the computer for awhile, I would recommend taking a look at the fabulously fun <a href="http://en.wikipedia.org/wiki/RoboRally">RoboRally</a>. It gives players an idea of how computers actually process instructions &ndash; and how instructions that might initially seem perfectly reasonable can lead to horrible results.</p>

<h3>3. Start learning your programming language</h3>

<p>Now that you have a solid foundation, it&rsquo;s time to start learning your programming language!</p>

<p>There are likely a lot of extremely good resources out there already to help you. I learned from some of the classic books of Ruby programming: <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Web Development with Rails</a> and <a href="http://ruby-doc.com/docs/ProgrammingRuby/">Programming Ruby</a>.</p>

<p>Remember to consult the documentation! Almost every modern programming language has extremely extensive documentation, and probably a dedicated online following that love making those docs easier to read and understand. A little bit of Googling on even the silliest questions will probably yield a treasure trove of information&hellip; some useful, some not. (Try, for example, &ldquo;<a href="http://en.wikipedia.org/wiki/Ruby_(programming_language)#The_name_.22Ruby.22">why is Ruby named Ruby?</a>&rdquo;.)</p>

<p>And while you&rsquo;re learning programming&hellip;</p>

<h3>4. Start using it</h3>

<p>It&rsquo;s never too early to apply your skills, even if you feel you have no skills at all! Having a project in mind is great and will help direct and guide your learning. There&rsquo;s no such thing as &ldquo;too ambitious&rdquo; when it comes to a personal project &ndash; want to create the next Facebook, manually process credit cards, or keep track of millions of items in a warehouse? Well guess what, computers are great at almost every task imaginable and you&rsquo;re learning how to apply their incredible power to the problems of your choice. Go to it!</p>

<p>Yes, your code will be completely terrible. Yes, you&rsquo;ll probably grow bored or frustrated with the project and abandon it. Yes, the mere thought of these first steps will cause you great embarrassment in the future (or possibly present).</p>

<p>But using your code in a project will reveal aspects of your chosen language you&rsquo;d probably never discover through a book or a tutorial. This is the sort of battle-hardening that you only really get on the field: you have to be in the trenches to know this stuff. For a Ruby example, you might have to figure out <a href="https://github.com/mperham/sidekiq">asynchronous jobs</a> or how to <a href="http://whomwah.github.io/rqrcode/">create QR codes</a>.</p>

<p>Again, Google is your best friend here. One of the greatest triumphs and most unfortunate realities about programming is that someone else has already done what you&rsquo;re trying to do. You can learn quite a lot from their experiences and whatever code they&rsquo;ve created. Don&rsquo;t steal, that&rsquo;s incredibly unethical. But feel free to <a href="https://help.github.com/articles/fork-a-repo">fork</a>!</p>

<p>Finally, always keep in mind your goals. You need to prove that you know your language, you have to have a track-record of using it in the real world, and you have to show you can work reasonably and responsibly with people. This is where you start building your resume for your future career, so keep in mind your objectives and work towards them.</p>

<h3>5. Use it personally</h3>

<p>You might find yourself doing this as you get even slightly proficient: the adage that <a href="http://en.wikipedia.org/wiki/Law_of_the_instrument">when you have a hammer, everything looks like a nail</a> is very true. But that&rsquo;s not necessarily a bad thing!</p>

<p>When you create a program for yourself, don&rsquo;t hoard it. Release it on GitHub and include excellent documentation and concise tests. This is true even for what you&rsquo;d consider really minor pieces of code &ndash; it&rsquo;d probably help someone, and having open-source code allows potential employers (and potential clients) to see what you do, what your code looks like, and your process for creating it. More than anything else, GitHub has become my go-to tool for evaluating potential candidates for a position.</p>

<p>I don&rsquo;t mean to scare you away if you intend only to work on closed software, but having code out in the wild lets people get to know you and how you work. It speaks directly to the three objectives I mentioned at the beginning of this piece. You need to establish your bona fides, and using programming personally &ndash; and releasing the result into the world &ndash; will prove you know what you&rsquo;re talking about</p>

<h3>6. Use it professionally</h3>

<p>At this point your code still probably isn&rsquo;t anywhere near professional-caliber. Guess what? That&rsquo;s fine! As long as you can still use it to do things &ndash; even if it takes you awhile, or the result is unpleasant, or there are a lot of &ldquo;gotchas&rdquo; for your poor users &ndash; you&rsquo;re already a programmer. If you have a job, start trying to work coding into it.</p>

<p>When I was in college I had an internship where I was expected to go over huge CSV files by hand. It was a ridiculously unpleasant job&hellip; but a small amount of Ruby and a really ugly <a href="http://en.wikipedia.org/wiki/Regular_expression">regular expression</a> saved me an enormous amount of manual parsing and let me drill down to the problem spots immediately. When I gave the company my program, they in turn gave me a really stellar recommendation that started my career.</p>

<p>Unfortunately, right out of college, all that recommendation landed me was a job doing tech support, but I managed to use my bad programming abilities there, too! The company I was doing support for had a terrible process for dealing with data files &ndash; really big ones, gigabytes large. We&rsquo;d go on-site, burn the files we needed to a DVD, take them back to the office, analyze them there to find out what was wrong, load the fixed files back onto another DVD, then go all the way back to the client.</p>

<p>I wasn&rsquo;t a great programmer: in fact, I wouldn&rsquo;t even say I was a particularly good one. But I made a little Rails site that accepted enormous file uploads, so we could just upload the file and someone at the home office would download it. It crashed all the time, it took an eternity to upload, and it had the jankiest login system you&rsquo;d ever seen. But it saved me and all my coworkers a trip back and forth to the office&hellip; and it looked great on my resume when I decided to switch jobs.</p>

<h3>7. Turn it into your profession</h3>

<p>As your skills wax, you&rsquo;ll likely want to start finding real, professional opportunities to exercise them. It might be time to start interviewing for a new job &ndash; or, at the very least, changing your existing role to officially incorporate more of your hard-won programming abilities.</p>

<p>Once you get to this point, the only way to improve more is to shift programming from a side-project to your full-time gig. Your resume will likely be fairly scant for an engineering position. This is okay. You aren&rsquo;t looking to be a senior systems architect (yet): most likely you&rsquo;ll get something at the bottom of the coding totem pole. But this is your first step into the real world of employable programming skills! Be proud that you&rsquo;ve made it this far.</p>

<p>At this point in my career I worked at a very small Rails consultancy in Chicago&rsquo;s River North neighborhood. The pay was low but the coworkers were extremely friendly, and some were even minor Rails celebrities. It was a great lily pad for a year.</p>

<p>Take the opportunity to learn from your coworkers. Many of them probably won&rsquo;t be much better than you, which is also okay. Learn from their mistakes just as you learn from yours and always strive to better yourself. Keep reading books on programming, both your chosen language and general practice. For example, <a href="http://www.amazon.com/Smalltalk-Best-Practice-Patterns-Kent/dp/013476904X">Smalltalk Best Practice Patterns</a> is an invaluable programming resource even though you&rsquo;re likely to never use Smalltalk.</p>

<p>And always keep in mind your goals: knowledge of your language, proof of having used it professionally, and demonstrated ability to work in a team. Consider how your work will look on your resume or what ammunition it will give you during an interview. And aalways be on the look-out for excellent opportunities for yourself. You&rsquo;re the only one looking out for your own professional development, so take it seriously.</p>

<h3>8. Move up in the world</h3>

<p>One of the unfortunate realities of the job market is you&rsquo;re much more likely to get a raise and better responsibilities by switching jobs. (<a href="http://www.forbes.com/sites/cameronkeng/2014/06/22/employees-that-stay-in-companies-longer-than-2-years-get-paid-50-less/">It&rsquo;s depressing but true.</a>) Once you&rsquo;ve put in your time as a beginner programmer, it&rsquo;s time to spread your wings and fly to a company that has more challenges, better opportunities, and hopefully higher pay.</p>

<p>Briefly, I&rsquo;d like to mention that you&rsquo;ll probably experience some <a href="http://en.wikipedia.org/wiki/Impostor_syndrome">imposter syndrome</a> as you interview around. Your new skills are likely to feel fairly unfinished, so doubting yourself as you look around &ndash; and wondering whether or not you can accomplish what prospective employers ask of you &ndash; is natural.</p>

<p>Here&rsquo;s a little life pro tip: almost everyone suffers from the belief that they aren&rsquo;t as competent as they are. A good attitude, great ability to learn, and accomplished programming skills will get you much further than you think. Don&rsquo;t be afraid to take a chance on yourself. The likelihood you&rsquo;ll fail is very tiny, and the probability you&rsquo;ll succeed and learn a lot makes such a small risk worth it.</p>

<h3>9. Challenge yourself</h3>

<p>At this point this list is likely to become less useful for you, since, congratulations! You&rsquo;re pretty well a programmer. But, if you&rsquo;d like one piece of career advice from one programmer to another: continue to seek new and exciting challenges. Never rest on your laurels.</p>

<p>I mean this in a very practical way. As I mentioned, switching jobs is a great way to get a raise, but also it&rsquo;ll give you new problems to tackle. Never stop building your resume and you&rsquo;ll always have job security. More than that, continuing to grow your programming skills will provide a solid foundation for whatever you want to do with your life and provide intellectual stimulation for years to come.</p>

<p>And from here, your path is yours to follow. I&rsquo;d love to know how it goes though, so <a href="mailto:josh@joshsymonds.com">drop me a line as you progress</a>!
</li>
</ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your Job Is To Code]]></title>
    <link href="http://joshsymonds.com/blog/2014/06/15/your-job-is-to-code/"/>
    <updated>2014-06-15T00:47:57-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/06/15/your-job-is-to-code</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t usually call out articles on Hacker News for being exceptionally silly &ndash; if I did I wouldn&rsquo;t have the time to write about anything else &ndash; but I saw one in particular tonight that bugged me, titled <a href="http://www.andresosinski.com/you-job-is-not-to-code.html">Your Job Is Not To Code</a>. It was filled with the sort of engineering platitudes that one can reliably expect from HN: you must be an engineering ambassador to your company from the strange and incomprehensible Codingverse. It&rsquo;s up to you to interpret and reinterpret the requirements of your project, hopefully better than its stakeholders, and tell them what they&rsquo;re doing wrong. Your technical skills must be married to the sort of interpersonal skills that would make ambassadors and diplomats blush.</p>

<p>This is all bunk.</p>

<p>If you&rsquo;re an engineer, then your job is to code. Your job is to be good at it. No, more than that: your job is to be <strong>great</strong> at it. Anything less is a disservice to the people who&rsquo;ve hired you and a disservice to yourself. You should work constantly to succeed at your job. Working towards anything else is a distraction.</p>

<!-- more -->


<p>I find the point of view that creating code is the least of our concerns particularly troubling, since the skill our profession provides is so unique and valuable. Usually you don&rsquo;t see agile coaches, salespeople, or business development professionals jumping in and coding. And when they do, they&rsquo;re not great at it. Why should they be? Their talents are of a different sort. So why do we constantly receive exhortations to do their jobs? Does having the ability to code make us great at marketing? Or leading a team? Or being a chef?</p>

<p>I&rsquo;ll tell you what coding does make us great at: creating computer programs. I mean this unironically. Our applied skills produce amazing products, save hundred of hours of human labor, and make people laugh or cry. The knowledge that enables this is, for most of us, hard won. Retaining our engineering position is a lifelong process of learning, changing, and growing. It&rsquo;s the <a href="http://en.wikipedia.org/wiki/Red_Queen's_race">Red Queen&rsquo;s Race</a> to keep up with our peers and our changing world. The fastest we can run will result in us merely standing still&hellip; and if you don&rsquo;t run as fast as you can, you&rsquo;ll be left behind.</p>

<p>Of course we must communicate what we&rsquo;re doing to our bosses, our clients, and our process managers. But this doesn&rsquo;t make you a boss, a client, or a process manager. If they don&rsquo;t understand what you&rsquo;re doing, despite your communication, then that doesn&rsquo;t make you bad at your job. It makes them bad at theirs. This is a hard spot to be in, and while the solution might be to try to do their job for them, that doesn&rsquo;t change what your job is. (To reiterate: your job is to code.) If you&rsquo;ve taken their responsibilities on top of yours, that doesn&rsquo;t make you great. It means something has gone very wrong indeed.</p>

<p>Coding is a form of communication. As you become better at coding, hopefully your communication skills will follow &ndash; and this allows you to better interact with others. And while there&rsquo;s nothing wrong with using new skills, don&rsquo;t become distracted by them. You have a talent, a knowledge, a skill that others in your organization lack. Your job is to employ that skill as efficaciously, as completely as possible. And that should be taking up 99% of your time in any given day.</p>

<p>Leave the strategy to the generals and the garbage collecting to the janitors. Do what you do best, do what you love. That way lies success, self-actualization, and happiness. Become distracted and soon you will be a general or a janitor: there&rsquo;s nothing wrong with that, but their jobs aren&rsquo;t coding. And if you were hired to code, if you want to code, then your job is to code. It&rsquo;s as simple as that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Awesomeness with Prezto]]></title>
    <link href="http://joshsymonds.com/blog/2014/06/12/shell-awesomeness-with-prezto/"/>
    <updated>2014-06-12T16:56:11-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/06/12/shell-awesomeness-with-prezto</id>
    <content type="html"><![CDATA[<p>As developers, we spend a lot of time in our shells: making them fast and responsive improves our productivity. I play around with a lot of development tools (as I mentioned in <a href="http://joshsymonds.com/blog/2014/01/22/supercharge-your-rails-development-environment/">a previous post</a>) trying to find the best combination of intelligence, responsiveness, and fun. Recently I was investigating alternatives to <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>, which is a wonderful set of Zsh packages but suffers from weird slowdowns and, unfortunately, requires a lot of configuration. I stumbled upon <a href="https://github.com/sorin-ionescu/prezto">prezto</a> and I love it &ndash; originally an optimized fork of oh-my-zsh, it&rsquo;s now its own project, and it is fast, beautiful, and leverages the full power of Zsh. It looks like this:</p>

<p><img src="http://veratic.us/image/300y2o0a3t03/screenie.png" alt="Terminal" /></p>

<p>You should get it. And when you do, use these configuration settings to make your experience even better.</p>

<!-- more -->


<h2>Customize your .zpreztorc</h2>

<p>You&rsquo;ll want to enable a bunch of modules in your <code>.zpreztorc</code>, which is the configuration file for everything prezto. Here&rsquo;s my modules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Set the Prezto modules to load (browse modules).</span>
</span><span class='line'><span class="c"># The order matters.</span>
</span><span class='line'>zstyle <span class="s1">&#39;:prezto:load&#39;</span> pmodule <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;environment&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;terminal&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;editor&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;history&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;directory&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;spectrum&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;utility&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;ssh&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;completion&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;homebrew&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;osx&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;ruby&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;rails&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;git&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;syntax-highlighting&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;history-substring-search&#39;</span> <span class="se">\</span>
</span><span class='line'>  <span class="s1">&#39;prompt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>They&rsquo;re not kidding when they say the order matters: <code>prompt</code> must come last, <code>history-substring-search</code> must come before it, and <code>syntax-highlighting</code> must come before that. The result of messing this up will likely be a ton of Zsh errors output to your shell after every command.</p>

<p>Some highlights from this list:</p>

<ul>
<li><p><code>history</code> and <code>history-substring-search</code> work together to bring you one of the most awesome features of zprezto: when you type in a command and press up and down, you&rsquo;ll only get history results of you typing that command. Super helpful for typing in ssh, then going back in time to see your previous ssh servers.</p></li>
<li><p><code>syntax-highlighting</code> gives you some <a href="http://fishshell.com/">fish</a>-style highlights. Executable commands will turn blue, incomplete or unrecognized commands will turn red, folders get underlined&hellip; it provides immediate and visceral visual feedback to what you&rsquo;re entering.</p></li>
<li><p><code>directory</code> gives you some awesome shortcuts for the directory stack: <code>d</code> to see all the directories you&rsquo;ve entered, then the numbers <code>1</code> to <code>9</code> to jump to a previous directory you&rsquo;ve visited.</p></li>
</ul>


<p>And that&rsquo;s just a start. Visit the <a href="https://github.com/sorin-ionescu/prezto/tree/master/modules">prezto modules list</a> and view each individual module&rsquo;s README to learn more about them.</p>

<p>After modules are done, get your identities into the SSH agent! There&rsquo;s a configuration block for that later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Set the SSH identities to load into the agent.</span>
</span><span class='line'>zstyle <span class="s1">&#39;:prezto:module:ssh:load&#39;</span> identities <span class="s1">&#39;id_rsa&#39;</span> <span class="s1">&#39;id_rsa.github&#39;</span> <span class="s1">&#39;id_rsa.client1&#39;</span> <span class="s1">&#39;id_rsa.client2&#39;</span> <span class="c"># all the rest of your identities</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also set up a custom theme for myself, the source of which I&rsquo;ll include below. If you want to enable that theme (or a different one), you&rsquo;ll also need to specify it in your <code>.zpreztorc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Set the prompt theme to load.</span>
</span><span class='line'><span class="c"># Setting it to &#39;random&#39; loads a random theme.</span>
</span><span class='line'><span class="c"># Auto set to &#39;off&#39; on dumb terminals.</span>
</span><span class='line'>zstyle <span class="s1">&#39;:prezto:module:prompt&#39;</span> theme <span class="s1">&#39;josh&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the full text of my <code>.zpreztorc</code> <a href="https://gist.github.com/Veraticus/a1b5204d8f922de5ea88">as a gist</a>.</p>

<h2>Customize your .zshrc</h2>

<p><code>.zshrc</code> is loaded in every interactive shell: use it to set up your Ruby switcher, important aliases, and anything else you need for maximum awesomeness. Mine is fairly self-explanatory:</p>

<div><script src='https://gist.github.com/79ab3d262305ae2c5aeb.js?file=zshrc.zsh'></script>
<noscript><pre><code>#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu &lt;sorin.ionescu@gmail.com&gt;
#

# Source Prezto.
if [[ -s &quot;${ZDOTDIR:-$HOME}/.zprezto/init.zsh&quot; ]]; then
  source &quot;${ZDOTDIR:-$HOME}/.zprezto/init.zsh&quot;
fi

# Customize to your needs...

# Start rbenv
export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;
eval &quot;$(rbenv init -)&quot;

# Add homebrew to the completion path
fpath=(&quot;/usr/local/bin/&quot; $fpath)

# why would you type &#39;cd dir&#39; if you could just type &#39;dir&#39;?
setopt AUTO_CD

# Now we can pipe to multiple outputs!
setopt MULTIOS

# This makes cd=pushd
setopt AUTO_PUSHD

# This will use named dirs when possible
setopt AUTO_NAME_DIRS

# If we have a glob this will expand it
setopt GLOB_COMPLETE
setopt PUSHD_MINUS

# No more annoying pushd messages...
# setopt PUSHD_SILENT

# blank pushd goes to home
setopt PUSHD_TO_HOME

# this will ignore multiple directories for the stack.  Useful?  I dunno.
setopt PUSHD_IGNORE_DUPS

# 10 second wait if you do something that will delete everything.  I wish I&#39;d had this before...
setopt RM_STAR_WAIT

# use magic (this is default, but it can&#39;t hurt!)
setopt ZLE

setopt NO_HUP

# only fools wouldn&#39;t do this ;-)
export EDITOR=&quot;subl -n -w&quot;

setopt IGNORE_EOF

# If I could disable Ctrl-s completely I would!
setopt NO_FLOW_CONTROL

# Keep echo &quot;station&quot; &gt; station from clobbering station
setopt NO_CLOBBER

# Case insensitive globbing
setopt NO_CASE_GLOB

# Be Reasonable!
setopt NUMERIC_GLOB_SORT

# I don&#39;t know why I never set this before.
setopt EXTENDED_GLOB

# hows about arrays be awesome?  (that is, frew${cool}frew has frew surrounding all the variables, not just first and last
setopt RC_EXPAND_PARAM

# Who doesn&#39;t want home and end to work?
bindkey &#39;\e[1~&#39; beginning-of-line
bindkey &#39;\e[4~&#39; end-of-line

# Incremental search is elite!
bindkey -M vicmd &quot;/&quot; history-incremental-search-backward
bindkey -M vicmd &quot;?&quot; history-incremental-search-forward

# Search based on what you typed in already
bindkey -M vicmd &quot;//&quot; history-beginning-search-backward
bindkey -M vicmd &quot;??&quot; history-beginning-search-forward

bindkey &quot;\eOP&quot; run-help

# oh wow!  This is killer...  try it!
bindkey -M vicmd &quot;q&quot; push-line

# it&#39;s like, space AND completion.  Gnarlbot.
bindkey -M viins &#39; &#39; magic-space
</code></pre></noscript></div>


<h2>Select your theme</h2>

<p>There are a lot of cool themes out there. But I was pretty used to my old Zsh theme, which was simple, clean, and had an obvious indicator when your last command failed. For an example of what it looks like, see the screenshot at the start of this post.</p>

<p>The arrow on the left shows green when your last exit code was 0, and red when it was 1. It includes the branch you&rsquo;re on, with an indicator of whether you have uncommitted files on the right-hand side. It does a ton more as well, and here&rsquo;s the source for your use:</p>

<div><script src='https://gist.github.com/1b30a6b6cbe8dae57e9f.js?file=prompt_josh_setup.zsh'></script>
<noscript><pre><code>#
# A stripped-down sorin theme.
#
# Authors:
#   Sorin Ionescu &lt;sorin.ionescu@gmail.com&gt;
#   Josh Symonds &lt;josh@joshsymonds.com&gt;
#
# Screenshots:
#   http://i.imgur.com/nBEEZ.png
#

# Load dependencies.
pmodload &#39;helper&#39;

function prompt_josh_pwd {
  local pwd=&quot;${PWD/#$HOME/~}&quot;

  if [[ &quot;$pwd&quot; == (#m)[/~] ]]; then
    _prompt_josh_pwd=&quot;$MATCH&quot;
    unset MATCH
  else
    _prompt_josh_pwd=&quot;${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}&quot;
  fi
}

function prompt_josh_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  prompt_josh_pwd

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Get ruby information
  if (( $+functions[ruby-info] )); then
    ruby-info
  fi
}

function prompt_josh_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_josh_precmd

  # Set editor-info parameters.
  zstyle &#39;:prezto:module:editor:info:completing&#39; format &#39;%B%F{red}...%f%b&#39;
  zstyle &#39;:prezto:module:editor:info:keymap:primary&#39; format &#39;%B%(?;%{%F{green}%} ;%{%F{red}%} )❯%f%b&#39;
  zstyle &#39;:prezto:module:editor:info:keymap:primary:overwrite&#39; format &#39; %F{red}♺%f&#39;
  zstyle &#39;:prezto:module:editor:info:keymap:alternate&#39; format &#39; %B%F{green}❮%F{yellow}❮%F{red}❮%f%b&#39;

  # Set git-info parameters.
  zstyle &#39;:prezto:module:git:info&#39; verbose &#39;yes&#39;
  zstyle &#39;:prezto:module:git:info:action&#39; format &#39;:%%B%F{yellow}%s%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:added&#39; format &#39; %%B%F{green}✚%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:ahead&#39; format &#39; %%B%F{yellow}⬆%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:behind&#39; format &#39; %%B%F{yellow}⬇%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:branch&#39; format &#39;%F{green}%b%f&#39;
  zstyle &#39;:prezto:module:git:info:commit&#39; format &#39;:%F{green}%.7c%f&#39;
  zstyle &#39;:prezto:module:git:info:deleted&#39; format &#39; %%B%F{red}✖%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:modified&#39; format &#39; %%B%F{blue}✱%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:position&#39; format &#39;:%F{red}%p%f&#39;
  zstyle &#39;:prezto:module:git:info:renamed&#39; format &#39; %%B%F{magenta}➜%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:stashed&#39; format &#39; %%B%F{cyan}✭%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:unmerged&#39; format &#39; %%B%F{yellow}═%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:untracked&#39; format &#39; %%B%F{white}◼%f%%b&#39;
  zstyle &#39;:prezto:module:git:info:keys&#39; format \
    &#39;prompt&#39; &#39; $(coalesce &quot;%b&quot; &quot;%p&quot; &quot;%c&quot;)%s&#39; \
    &#39;rprompt&#39; &#39;%A%B%S%a%d%m%r%U%u&#39;

  # Define prompts.
  PROMPT=&#39;%F{cyan}${_prompt_josh_pwd}%f${git_info:+${(e)git_info[prompt]}}%(!. %B%F{red}#%f%b.)${editor_info[keymap]} &#39;
  RPROMPT=&#39;${editor_info[overwrite]}${VIM:+&quot; %B%F{green}V%f%b&quot;}${git_info[rprompt]}&#39;
  SPROMPT=&#39;zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? &#39;
}

prompt_josh_setup &quot;$@&quot;

</code></pre></noscript></div>


<p>Place this in <code>~/.zprezto/modules/prompt/functions/prompt_josh_setup</code> and then select it in your <code>.zpretorc</code> for best results.</p>

<p>prezto is easy to configure and presents a lot of powerful options: you&rsquo;ll want to spend some time getting used to it. But it&rsquo;s also really enjoyable. Once you start learning the power behind your shell and how easy it becomes to access, I guarantee that you&rsquo;ll never look back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With AWS OpsWorks]]></title>
    <link href="http://joshsymonds.com/blog/2014/06/11/getting-started-with-aws-opsworks/"/>
    <updated>2014-06-11T13:59:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/06/11/getting-started-with-aws-opsworks</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been creating a complicated OpsWorks server setup for a client, as I mentioned in <a href="http://joshsymonds.com/blog/2014/05/09/creating-an-aws-opsworks-instance-store-ami/">my last post</a>, and I&rsquo;ve been really enjoying the process. OpsWorks, while still a beta service, has a lot to recommend itself: it couples the best parts of chef to the power of the impressive AWS APIs. Using OpsWorks, it&rsquo;s easy to make processes that seem almost magical.</p>

<p>How magical? Well, imagine super-fast command line deploys, seamless cookbook updates, great chatbot and application integration, then marry all those things to AWS autoscaling via elastic load balancing. One use case for my client: <a href="https://travis-ci.org/">TravisCI</a> automatically creating servers, running remote acceptance tests on them, then destroying them afterwards &ndash; all while notifying chatrooms of its progress. Now that&rsquo;s assurance your code will work in production! Really, the sky&rsquo;s the limit here for awesome integrations.</p>

<p>I&rsquo;ve learned a lot in the process of implementing this setup. If you&rsquo;re looking to give OpsWorks a go for your next project, here&rsquo;s some hints and tips to make get started on the right path.</p>

<!-- more -->


<h2>1. Setup vagrant to be compatible with OpsWorks</h2>

<p>You&rsquo;ll want to test all of your OpsWorks recipes locally &ndash; how else can you be sure they&rsquo;ll work remotely? <a href="http://www.vagrantup.com/">Vagrant</a> is the ideal tool for making this happen. You&rsquo;ll want to download the same AMI and the same version of chef that OpsWorks is using: ubuntu 12.04 and chef 11.10 respectively, for me. Here&rsquo;s how to do that in your <code>Vagrantfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;ubuntu-precise64&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;https://opscode-vm-bento.s3.amazonaws.com/vagrant/opscode_ubuntu-12.04_provisionerless.box&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Specifies the chef version Opsworks is running</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">omnibus</span><span class="o">.</span><span class="n">chef_version</span> <span class="o">=</span> <span class="s2">&quot;11.10.0&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This requires the <code>vagrant-omnibus</code> plugin, which you can install with <code>vagrant plugin install vagrant-omnibus</code>.</p>

<h2>2. Use librarian-chef</h2>

<p>OpsWorks expects all of your recipes to be in one git repository that it can download. This may be bad practice for many chefs, but since it&rsquo;s required here and it&rsquo;s the cookbook repository format that <a href="https://github.com/applicationsonline/librarian-chef">librarian-chef</a> expects and supports, you&rsquo;ll want to download and configure librarian-chef.</p>

<p>Just the default librarian-chef configuration works, with one exception: you&rsquo;ll want to strip <code>.git</code> directories from the checked-out sources to prevent OpsWorks from becoming confused. That&rsquo;s relatively easy to set up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>librarian-chef config install.strip-dot-git <span class="m">1</span> --local
</span></code></pre></td></tr></table></div></figure>


<p>I store the source of my cookbooks in one repository and use an orphan branch of that same repository for the actual cookbooks that are installed and managed by librarian. This is pretty easy to set up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create the orphan branch</span>
</span><span class='line'>git checkout --orphan cookbooks
</span><span class='line'>git rm -rf .
</span><span class='line'>git add . -A
</span><span class='line'>git commit -m <span class="s1">&#39;Initial commit&#39;</span>
</span><span class='line'>git push origin cookbooks
</span></code></pre></td></tr></table></div></figure>


<p>Then in your master branch, set up your cookbook branch as a submodule in a subdirectory that librarian-chef will install to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># .gitmodules</span>
</span><span class='line'><span class="o">[</span>submodule <span class="s2">&quot;cookbooks&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">path</span> <span class="o">=</span> cookbooks
</span><span class='line'>  <span class="nv">url</span> <span class="o">=</span> git@github.com:user/repository.git
</span><span class='line'>  <span class="nv">branch</span> <span class="o">=</span> cookbooks
</span></code></pre></td></tr></table></div></figure>


<p>I have a small Rakefile that allows me to run <code>rake</code> to sync my changes directly to the cookbooks branch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;install all cookbooks and synchronize them to GitHub&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:default</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Installing cookbooks&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;librarian-chef install&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Pushing cookbooks to GitHub&quot;</span>
</span><span class='line'>  <span class="n">cd</span> <span class="s2">&quot;cookbooks&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">system</span> <span class="sx">%Q(echo &quot;gitdir: ../.git/modules/cookbooks&quot; &gt; .git)</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git add -u&quot;</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Cookbooks generated via librarian-chef at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git commit -m </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git pull&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git push origin cookbooks&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Done!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind this setup isn&rsquo;t ideal for collaboration: if I had a lot of people updating the cookbooks simultaneously, I would definitely set up separate repositories. But for smaller OpsWorks projects, this works perfectly well.</p>

<h2>3. Don&rsquo;t bother with OpsWorks&#8217; recipe syntax</h2>

<p>Though it&rsquo;s clever that OpsWorks has their own recipe syntax they&rsquo;d like you to use, my advice is: don&rsquo;t. If you ever want to use your chef recipes somewhere else &ndash; or bring chef recipes from elsewhere to OpsWorks &ndash; you&rsquo;ll thank yourself for just using the standard recipe format. So instead of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># No!</span>
</span><span class='line'><span class="n">node</span><span class="o">[</span><span class="ss">:deploy</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">app_name</span><span class="p">,</span> <span class="n">deploy</span><span class="o">|</span>
</span><span class='line'>  <span class="n">template</span> <span class="s1">&#39;/etc/init/puma.conf&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s1">&#39;puma.conf&#39;</span>
</span><span class='line'>    <span class="n">owner</span>  <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">group</span>  <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">mode</span>   <span class="s1">&#39;0644&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use the plainer, simpler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Yes!</span>
</span><span class='line'><span class="n">template</span> <span class="s1">&#39;/etc/init/puma.conf&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s1">&#39;puma.conf&#39;</span>
</span><span class='line'>  <span class="n">owner</span>  <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">group</span>  <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">mode</span>   <span class="s1">&#39;0644&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The former syntax won&rsquo;t work properly on vagrant, just for starters, which is a great reason all by itself not to use it. You&rsquo;ll want to control what recipes get applied where through custom layers rather than OpsWorks&#8217; special syntax.</p>

<h2>4. Overwrite any recipes that overlap</h2>

<p>OpsWorks inserts a lot of their own recipes into your cookbooks, and you can&rsquo;t disable this behavior, even if you&rsquo;re using your own custom recipes. This can lead to naming collisions that can be frustrating to resolve. For a Rails stack, I had to manually remove the <code>unicorn</code> and <code>passenger-apache2</code> cookbooks that led to merge errors with the <code>application_ruby</code> cookbook. Thankfully, removing cookbooks in OpsWorks is pretty easy: if you have a recipe named exactly the same as an OpsWorks one, yours will replace it.</p>

<p>You&rsquo;ll want to create a cookbook named after the offending cookbook (for example, <code>unicorn</code>) and replace every file in the OpsWorks cookbook with a blank one. You can find all the OpsWorks cookbook sources <a href="https://github.com/aws/opsworks-cookbooks">in their GitHub repository</a>. So, to continue the unicorn example, you&rsquo;d make a <code>unicorn</code> directory, a <code>recipes</code> subdirectory, and three files: <code>default</code>, <code>rails</code>, and <code>stop</code>. The content of all these files should be something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Prevent OpsWorks from trying to install this cookbook.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously you should only do this if you&rsquo;re definitely not using OpsWorks&#8217; cookbooks.</p>

<h2>5. OpsWorks is your single point of truth</h2>

<p>Get rid of your data bags, encrypted data bags, configuration yaml files: everything. Embrace OpsWorks as your centralized chef server and the primary authority on the state and setup of your application. Data bags are arguably chef smell at this point anyway, and OpsWorks continues their inexorable slide towards obsolescence. You&rsquo;ll want to set up everything you can with sensible attributes in your custom application recipes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># site-cookbooks/your-app/attributes/default.rb</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;database&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;pool&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;host&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;app_database&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;password&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then pass overrides in your stack JSON. Your stack JSON is where you&rsquo;ll enumerate all the settings particular to your environment: though I&rsquo;m not incredibly happy with this setup, as it&rsquo;s not versioned, AWS makes it easy to copy stack and layer setups really easily, so in practice it&rsquo;s not difficult to update multiple stacks or create a new one from sensible defaults.</p>

<h2>6. Use the AWS API</h2>

<p>So what&rsquo;s the real advantage of doing this whole song and dance? Using the AWS API, you can command and control your servers (and all your attached AWS stuff) with an ease and simplicity you can&rsquo;t achieve anywhere else. But for more details on that, you&rsquo;ll just have to stay tuned for my next post, which will discuss all the awesome things you can start doing with OpsWorks once you have it set up properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an AWS OpsWorks Instance Store AMI]]></title>
    <link href="http://joshsymonds.com/blog/2014/05/09/creating-an-aws-opsworks-instance-store-ami/"/>
    <updated>2014-05-09T13:00:45-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/05/09/creating-an-aws-opsworks-instance-store-ami</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been doing a fair amount of work in Amazon&rsquo;s <a href="https://aws.amazon.com/opsworks/">OpsWorks</a>, in many ways an elegant service. Once you have a set of chef recipes provisioning properly, you&rsquo;ll want to create an AMI for the layer in question so that you don&rsquo;t have to wait through a long setup process again. Unfortunately, doing this in OpsWorks can be frustrating since the instructions for making it happen are scattered across <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-custom-ami.html">four</a> <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-instance-store.html">entirely</a> <a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-get-set-up.html#install-ami-tools">different</a> <a href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html">documents</a>. For my own sanity I made a checklist of all the steps necessary to create an AMI on an instance store EC2 server: this is that checklist for anyone else who might find it useful.</p>

<!-- more -->


<h2>0. Get your chef recipes working in OpsWorks</h2>

<p>Don&rsquo;t do any of this until you have a fully-provisioned server working exactly as you&rsquo;d expect. Make sure <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinginstances-autohealing.html">auto healing</a> is disabled for the layer. The rest of the steps assume you have such a properly set-up instance, a well configured layer, and that the original image was Ubuntu 12.04.</p>

<h2>1. Download your X.509 certificates</h2>

<p>Amazon has a pretty good <a href="http://docs.aws.amazon.com/AmazonDevPay/latest/DevPayDeveloperGuide/X509Certificates.html">checklist</a> for how to do this. You need X.509 certificates so only you and Amazon can access your AMI, which for most layers is a sensible security precaution. For this walkthrough I&rsquo;ll assume you have the private key downloaded to ~/certs/pk-X509.pem and the the certificate downloaded to ~/certs/cert-X509.pem.</p>

<h2>2. Transfer your certs to the server</h2>

<p>On the server itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /tmp/cert/
</span></code></pre></td></tr></table></div></figure>


<p>On your local computer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp ~/certs/pk-X509.pem ~/certs/cert-X509.pem your-user@your-servers-public-dns:/tmp/cert/
</span></code></pre></td></tr></table></div></figure>


<p>This will securely transfer your certs up to the server. Make sure to replace <code>your-user</code> with whatever user on OpsWorks you have permission to access, and <code>your-servers-public-dns</code> with the public DNS record for your server.</p>

<h2>3. Download the EC2 AMI tools</h2>

<p>I&rsquo;m not totally sure why the AMI tools and API tools are separate packages, but since they are you&rsquo;ll need to install them individually. For the AMI tools:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y unzip
</span><span class='line'>wget http://s3.amazonaws.com/ec2-downloads/ec2-ami-tools.zip
</span><span class='line'>sudo mkdir -p /usr/local/ec2
</span><span class='line'>sudo unzip ec2-ami-tools.zip -d /usr/local/ec2
</span><span class='line'><span class="nb">export </span><span class="nv">EC2_AMITOOL_HOME</span><span class="o">=</span>/usr/local/ec2/ec2-ami-tools-1.5.3/
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$EC2_AMITOOL_HOME</span>/bin:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you got a different version of the AMI tools than 1.5.3, you&rsquo;ll want to replace the AMI tools directory with the proper version.</p>

<h2>4. Download the EC2 API tools</h2>

<p>A similar process to step 3.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip
</span><span class='line'>sudo unzip ec2-api-tools.zip -d /usr/local/ec2
</span><span class='line'>sudo apt-get install -y openjdk-7-jre
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/java-7-openjdk-amd64/jre/
</span><span class='line'><span class="nb">export </span><span class="nv">EC2_HOME</span><span class="o">=</span>/usr/local/ec2/ec2-api-tools-1.6.13.0/
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$EC2_HOME</span>/bin
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_ACCESS_KEY</span><span class="o">=</span>YourAccessKey
</span><span class='line'><span class="nb">export </span><span class="nv">AWS_SECRET_KEY</span><span class="o">=</span>YourSecretKey
</span></code></pre></td></tr></table></div></figure>


<p>Again, if you downloaded a different version of the API tools, you&rsquo;ll need to change the API tools directory. Also replace <code>YourAccessKey</code> and <code>YourSecretKey</code> with your real access and secret keys.</p>

<h2>5. Ensure your version of GRUB is correct</h2>

<p>On Ubuntu 12.04, I didn&rsquo;t have to do anything except this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install -y grub gdisk kpartx
</span></code></pre></td></tr></table></div></figure>


<p>But if your image has boot problems GRUB is the most likely culprit. Amazon has a <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-instance-store.html">good walkthrough</a> of how to set up legacy GRUB properly &ndash; following it should correct any boot issues you experience on your AMI.</p>

<h2>6. Stop all services</h2>

<p>Make sure everything and anything is stopped on the target server. A non-exclusive list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service monit stop
</span><span class='line'>sudo service mysql stop
</span><span class='line'>sudo service nginx stop
</span><span class='line'>sudo service redis stop
</span><span class='line'>sudo service memcached stop
</span><span class='line'>sudo service opsworks-agent stop
</span></code></pre></td></tr></table></div></figure>


<p>Running services can destroy the integrity of the image. Make sure everything is stopped before you waste your time!</p>

<h2>7. Remove instance configuration directories</h2>

<p>All of the instance-specific config directories must be destroyed, or OpsWorks will fail to provision the new image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rm -rf /etc/aws/opsworks/ <span class="se">\</span>
</span><span class='line'>            /opt/aws/opsworks/ <span class="se">\</span>
</span><span class='line'>            /var/log/aws/opsworks/ <span class="se">\</span>
</span><span class='line'>            /var/lib/aws/opsworks/ <span class="se">\</span>
</span><span class='line'>            /etc/monit.d/opsworks-agent.monitrc <span class="se">\</span>
</span><span class='line'>            /etc/monit/conf.d/opsworks-agent.monitrc <span class="se">\</span>
</span><span class='line'>            /var/lib/cloud/
</span></code></pre></td></tr></table></div></figure>


<h2>8. Bundle the volume</h2>

<p>Finally, after all that setup, you&rsquo;re ready to actually bundle the volume.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ec2-bundle-vol -k /tmp/cert/pk-X509.pem <span class="se">\</span>
</span><span class='line'>               -c /tmp/cert/cert-X509.pem <span class="se">\</span>
</span><span class='line'>               -u <span class="m">123456789012</span> <span class="se">\</span>
</span><span class='line'>               -r x86_64 <span class="se">\</span>
</span><span class='line'>               -e /tmp/cert <span class="se">\</span>
</span><span class='line'>               -i <span class="k">$(</span>find /etc /usr /opt -name <span class="s1">&#39;*.pem&#39;</span> -o -name <span class="s1">&#39;*.crt&#39;</span> -o -name <span class="s1">&#39;*.gpg&#39;</span> <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39;,&#39;</span><span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we provide the certificate locations as part of this command, so if your certs are named differently change that name above. Also you need to provide the account ID number for the -u flag. You can find this on your <a href="https://console.aws.amazon.com/iam/home?#security_credential">security credentials IAM page</a>, or if you need more help, check out Amazon&rsquo;s <a href="http://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html">documentation on finding your account ID number</a>.</p>

<p>This command will probably take a long while to run.</p>

<h2>9. Create and upload the volume to an S3 bucket</h2>

<p>Once the volume is bundled, go to S3 and create a bucket to receive the machine image. Then run this command on your instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ec2-upload-bundle -b bucket_name/image_name <span class="se">\</span>
</span><span class='line'>                  -m /tmp/image.manifest.xml <span class="se">\</span>
</span><span class='line'>                  --region us-east-1
</span></code></pre></td></tr></table></div></figure>


<p>Replace <code>bucket_name</code> and <code>image_name</code> with the bucket you created in S3 and whatever you&rsquo;d like to name the image, and the region with whatever region your bucket is located in (and where you want the AMI to be registered). This will also take awhile to run.</p>

<h2>10. Register the AMI</h2>

<p>Only one step left, and this is an easy one! You can register the AMI with this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ec2-register bucket_name/image_name/image.manifest.xml -n image_name --region us-east-1
</span></code></pre></td></tr></table></div></figure>


<p>You should now successfully see your new image in your list of registered AMIs for your region. Change your layer settings to use a custom image and select the AMI as the image for a new instance and try it out. Hopefully you&rsquo;ll have just cut out a fair amount of time from your instance provisioning process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interviewing Symonds &amp; Son]]></title>
    <link href="http://joshsymonds.com/blog/2014/03/12/interviewing-symonds-and-son/"/>
    <updated>2014-03-12T23:43:18-05:00</updated>
    <id>http://joshsymonds.com/blog/2014/03/12/interviewing-symonds-and-son</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had a rash of posts recently about <a href="http://symondsandson.com">Symonds &amp; Son</a>, and I was intending to write a piece more pertinent to Rails or programming rather than the business side of things&hellip; but recently I was approached to do an interview about working with my family. In answering the interviewer&rsquo;s questions, I thought the results were interesting enough to post on my blog &ndash; hopefully I&rsquo;ll also be able to post the interview itself when it&rsquo;s completed!</p>

<!-- more -->


<h3>How did you start your business?</h3>

<p>Rather accidentally, actually: I fell into it. I&rsquo;ve been a software developer for about a decade now, since I graduated college, and I&rsquo;ve always loved it &ndash; so much so that I couldn&rsquo;t put it down when I got home. I was always programming, either on personal projects or side gigs outside my day job. Eventually those gigs got bigger and bigger, and my friends and clients referred me to other people&hellip; for awhile, about two years ago, it almost felt like I was working a night job that was almost exactly the same as my day job. Then the startup where I was working full time ran into money problems and had to cut my hours pretty dramatically. I always intended to find another full time position, but I just got so busy with my client work that I didn&rsquo;t have the time: and that was the start of Symonds &amp; Son.</p>

<h3>What did your parents say when you said you wanted to start a consulting business?</h3>

<p>&ldquo;No, don&rsquo;t!&rdquo; They hated the idea. I&rsquo;d mentioned it before &ndash; I don&rsquo;t like having a boss, and I&rsquo;d frequently wondered what it would be like to work for clients, rather than managers. But for my father, consulting has always been very boom-and-bust: there were times he was so busy he was hardly home, and then times he&rsquo;d be sitting around being unhappy. My parents told me to find a stable, full-time job at a big company like Apple, or even a smaller company where I wouldn&rsquo;t have to worry so much about the future. But I had an idea to make my own company and I wanted to do it, and when they saw they couldn&rsquo;t convince me otherwise they gave me advice on how to make it work&hellip; and eventually I managed to convince them to join me!</p>

<h3>Who did you bring into the business first, your mom or dad?</h3>

<p>My dad.</p>

<h3>Why did you decide to bring him in?</h3>

<p>I&rsquo;ve always relied on my dad to help me do contract proof-reading and negotiations. He&rsquo;s had a lot of experience doing business development and his advice has always been helpful&hellip; though, to his annoyance, I haven&rsquo;t always followed it. Recently my father&rsquo;s business hasn&rsquo;t been as busy as he liked, but meanwhile mine has been growing really quickly, and I&rsquo;ve needed a lot more help than usual on the business end. Bringing him in was a natural fit.</p>

<h3>When did your mom join, and what is her role?</h3>

<p>Mom started helping me out during the wedding, so about six months ago &ndash; she was our wedding planner. She organized speaking with florists, tasting food, talking with photographers&hellip; and quickly I found her help (personally and professionally) indispensable. She&rsquo;s my personal assistant and helps me keep focused on my business by taking care of invoicing and whatever else the company needs.</p>

<h3>Do you like owning your own business?</h3>

<p>So much! It&rsquo;s really different than I thought it would be: I imagined myself programming day in and day out, but there&rsquo;s a lot of overhead involved. Running a business with employees and partners is like two jobs. In the first one, I&rsquo;m programming and making the product my clients want, and in the second, I&rsquo;m organizing, marketing, selling and negotiating. But I don&rsquo;t mind all the work&hellip; in fact, I love working with my family on a day-to-day basis. Even if Symonds &amp; Son isn&rsquo;t around in 10 years I&rsquo;ll have great memories of the amazing things we accomplished together &ndash; but I hope we&rsquo;re around even longer than that.</p>

<h3>How is your working relationship with your parents?</h3>

<p>On average, really good. Since college I&rsquo;ve gotten along with my parents quite well, and I think since I&rsquo;ve grown into an adult we&rsquo;ve gotten along better. Our relationship during high school and even during the beginning of college was a little bit of a mess, but now that we&rsquo;re all adults we can actually be friends, which I think works out really well.</p>

<h3>Did you have any reservations bringing them into your business?</h3>

<p>Yes, a thousand times yes. My father and I spent most of my high school not understanding each other and butting heads. We&rsquo;d get into arguments constantly, and I think that&rsquo;s part of the reason I don&rsquo;t listen to his advice even when I should: I spent most of high school not listening to him and it seemed to work out pretty well. And mom was always pushing me, to get better grades, to do more extracurricular activities, to practice the flute more&hellip; I think that if I told myself in high school that I would literally pay her to keep doing that to me as an adult, I would&rsquo;ve laughed until I died. But I needed help, and I knew they were competent, skilled people who could help me. So, as I said, it just seemed like a natural fit.</p>

<h3>What&rsquo;s the number one complaint your parents have wth you?</h3>

<p>That I don&rsquo;t listen to them! They definitely want me to communicate with them a lot more than I feel comfortable with. They&rsquo;re always calling and checking up on me and my husband, both personally and in regards to the business, but I have a very full schedule at the best of times: it can be exhausting to satisfy their demands. And from their perspective, I&rsquo;m not nearly responsive enough. I don&rsquo;t return calls promptly or deliver them the information they need to do their jobs in a timely manner.</p>

<h3>How are your processes different in the family?</h3>

<p>The primary process difference is between me and my father. Dad is very dramatic, as I&rsquo;ve said before: everything is a crisis, whereas with me, I&rsquo;m usually calm and collected. So when dad is yelling at me that some work must get done, I quietly tell him that it will, and he goes bananas because he thinks I&rsquo;m not taking it seriously, and I can&rsquo;t believe he&rsquo;s getting so worked up about it. Both of us get our work done in the end, but the meeting of the two processes can be a little difficult, and usually involves a lot of my father hanging up on me and swearing to my mom that he&rsquo;ll never talk to me again.</p>

<h3>Des anyone in your family have a different personality, or personality traits that are different at work than when not working?</h3>

<p>Our personalities are very different, though I touched on that in your last question. My mom and I have more similar dispositions, and I&rsquo;ve seen her handle my dad expertly for years. I know there&rsquo;s a lot of bluster, but it accomplishes a lot too. He&rsquo;s passionate and a really skilled negotiator: he&rsquo;s done some impressive stuff on our conference calls with the same righteous attitude that can get on my nerves. And I know I have that anger in me too &ndash; I&rsquo;ve definitely had moments where I feel like I&rsquo;ve had to channel my father to get my way. Few people can resist Steve Symonds head on.</p>

<p>I also feel like I&rsquo;m much more placid at work than I am in my personal life. I try to be clear-headed and visionary in my role as president of the company, but outside the office I cut loose a lot more. I tend to act the same around my parents though, so maybe my &ldquo;president of the company&rdquo; personality and my &ldquo;son&rdquo; personality are actually pretty close.</p>

<h3>How do you usually handle it when your father gives you advice? Is his advice usually unsolicited?</h3>

<p>I&rsquo;d say the advice is about half solicited, half unsolicited&hellip; And I usually weigh his advice very seriously. That doesn&rsquo;t mean I take it though! Dad has been very successful in business, but I feel like I&rsquo;ve been successful too, with many great things still in my future. If I want Symonds &amp; Son to be the best company it can possibly be, I need to hear his advice, compare it to what I think the best course of action is, and then make a decision&hellip; and that&rsquo;s how I&rsquo;ve used his suggestions in the past.</p>

<p>Of course this drives him bonkers, but I covered our process differences earlier.</p>

<h3>What are some things your dad does that drives you nuts?</h3>

<p>Calls me all the time! I have meetings all day long, and when I&rsquo;m not in meetings I&rsquo;m programming. I don&rsquo;t have time to talk on the phone. My employee, when he wants to talk to me, IMs me, which is much more convenient. I need to get my parents to start doing that too. And as I mentioned, the drama aspect.</p>

<h3>What are some things your mom does that drives you nuts?</h3>

<p>Nags me, which ironically is what I pay her to do! It can be very difficult for me to realize that she&rsquo;s just doing her job when she bugs me to do stuff, especially considering how she used to do it all the time for free and drive me up a wall. If I&rsquo;m already very tense, it can be difficult not to snap at her when she&rsquo;s reminding me about my obligations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Supercharge Your Rails Development Environment]]></title>
    <link href="http://joshsymonds.com/blog/2014/01/22/supercharge-your-rails-development-environment/"/>
    <updated>2014-01-22T08:55:45-06:00</updated>
    <id>http://joshsymonds.com/blog/2014/01/22/supercharge-your-rails-development-environment</id>
    <content type="html"><![CDATA[<p>I love trying to improve my development environment. Efficiency is important to me: I spend hours and hours a day programming, and even a 1% or 2% productivity boost would provide a massive time savings over the course of a year. Or, as xkcd so pithily put it:</p>

<p><a href="http://xkcd.com/1205/"><img src="http://imgs.xkcd.com/comics/is_it_worth_the_time.png" alt="Is It Worth The Time?" /></a></p>

<p>Of course, I&rsquo;ve probably obliterated any potential savings by spending so much time experimenting, but now that I&rsquo;ve done it you don&rsquo;t have to! Listed here is everything important to me to get my development environment zipping along. Hopefully you&rsquo;ll be able to find something useful here too that makes your programming experiences a little bit faster.</p>

<!-- more -->


<h2>Basics</h2>

<ul>
<li><p>Font: <strong><a href="http://store1.adobe.com/cfusion/store/html/index.cfm?event=displayFontPackage&amp;code=1960">Source Code Pro</a> (Free)</strong> A good, clean, monospaced font is extremely important. You&rsquo;ll be staring at it in your text editor and on your terminal, and it has to be easy on the eyes while still differentiating similar-looking characters (l as in llama, 1 as in the number, I as in yours truly). I&rsquo;ve used Inconsolata, Monaco, and Anonymous extensively, but found Source Code Pro to be superior in almost all respects: more readable, more beautiful, less tiring to the eyes. Realistically they&rsquo;re all pretty close though, so just find something you like and go with it.</p></li>
<li><p>Computer: <strong><a href="http://store.apple.com/us/mac">MacBook</a> ($Lots)</strong> Ruby is cross-platform: you can develop on a Mac, Linux, or even Windows if you like. I prefer a Mac. They&rsquo;re extremely reliable, very well-designed, with rock-solid performance characteristics and extremely impressive support guarantees. They really only have one downside, but it&rsquo;s a doozy: the big price tag. See if you can get your employer to buy one for you. Some people don&rsquo;t like OSX, but in my mind it unifies a good user experience with the power of Unix under the hood. There&rsquo;s definitely some stuff about Windows I like more (I have a gaming PC that uses Windows 8), but for development, Macs can&rsquo;t be beat. They also have great, first-class tool support for anything you&rsquo;re likely to do in Rails.</p></li>
<li><p>Shell: <strong><a href="http://www.zsh.org/">zsh</a>, specifically <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> (Free)</strong> zsh is what bash wants to be. Command completion, sharing of history between shells, spelling correction, amazing prompts&hellip; and oh-my-zsh makes it easy to set up and install. If you need some inspiration for your <code>.zshrc</code>, <a href="https://gist.github.com/Veraticus/8563408">check out mine</a>! My favorite feature is sleeping 10 seconds after you do an <code>rm</code> glob&hellip; this has saved me from my own stupidity more than once. (Lots of stuff from my <code>.zshrc</code> is taken from <a href="http://stackoverflow.com/questions/171563/whats-in-your-zshrc">this StackOverflow question</a>.)</p></li>
</ul>


<h2>Mac Apps</h2>

<ul>
<li><p><strong><a href="https://agilebits.com/onepassword/mac">1Password</a> ($50)</strong> Insanely expensive compared to most other software on this list, but also pretty non-negotiable. I have over 300 passwords stored in it &ndash; including six client logins to AWS, four to RackSpace, and untold multiples for my own servers: how am I supposed to keep all of that straight myself? And generate new ultra-secure passwords whenever I need? Well thankfully I don&rsquo;t have to. 1Password has bulletproof security and I&rsquo;m never concerned I&rsquo;ll lose, forget, or even care about any individual password ever again.</p></li>
<li><p><strong><a href="http://www.alfredapp.com/">Alfred</a> (Free to try, &pound;17 to buy)</strong> I use Alfred to open nearly everything on my computer. Not just apps! Alfred can open web pages, login automatically with 1Password integration, perform calculations, run one-off terminal commands, find and open files&hellip; Alfred has enormously simplified everything I do with my Mac. Definitely a huge time-saver.</p></li>
<li><p><strong><a href="http://asepsis.binaryage.com/">Asepsis</a> (Free)</strong> So many important files on your comptuer are dotfiles, which are hidden by default on Macs. So you turn on viewing hidden files&hellip; and suddenly, everywhere you go, you see the dreaded <code>.DS_Store</code>. I hate seeing <code>.DS_Store</code> files. They appear in every directory, they appear on your desktop, they appear in your nightmares&hellip; well Asepsis gets rid of all of them. And it&rsquo;s free.</p></li>
<li><p><strong><a href="http://www.macbartender.com/">Bartender</a> (Free to try, $15 to buy)</strong> Look at the upper-right of your Mac. Do you see the volume icon there? The AirPlay icon? Even worse, your own name? (What, are you worried you&rsquo;ll forget it?) Banish the clutter into Bartender and clean up your menu bar: you can hide all the icons you never (or rarely) use, and even configure them to display only when their app does something important.</p></li>
<li><p><strong><a href="http://lightheadsw.com/caffeine/">Caffeine</a> (Free)</strong> Prevent your Mac from ever falling asleep. Helpful if you&rsquo;ve ever started a long-running task, left your computer for awhile, and returned to find it had stopped to take a nap.</p></li>
<li><p><strong><a href="http://www.getcloudapp.com/">CloudApp</a> (Free, or $4.99 a month)</strong> CloudApp gives you drag-and-drop sharing of any file you&rsquo;d desire. I love having my drops available at a vanity URL (<a href="http://veratic.us">http://veratic.us</a>) &ndash; you&rsquo;d be surprised how many developers say how cool that is, and ask how they can get one of their own. If you don&rsquo;t want the URL then the free version should suit you just fine.</p></li>
<li><p><strong><a href="http://giantcomet.com/flint/mac/">Flint</a> (Free, then $14.99)</strong> I love Campfire and BaseCamp. Flint makes Campfire easy-to-use. Even better, it gives me a badged icon in my dock when people speak, and a growl notification when they mention my name.</p></li>
<li><p><strong><a href="http://gistifyapp.com/">Gistify</a> ($1.99)</strong> Shameless self-promotion, but I honestly love the app I made for myself! I make gists all the time; gistify gives you drag-and-drop gisting of snippets or files, and allows you to create gists from your clipboard contents. Super convenient and super lightweight.</p></li>
<li><p><strong><a href="http://growl.info/">Growl</a> (Free, or $3.99)</strong> The Apple Notification Center is pretty good&hellip; but Growl still seems to be the gold standard for notifications. One of the first pieces of software I install on a new computer. (That said, I have no idea what the $3.99 version does. Growl is one of the few pieces of software on this list I&rsquo;ve never bought.)</p></li>
<li><p><strong><a href="http://hyperdock.bahoom.com/">HyperDock</a> (Free, or $9.95)</strong> Allows you to hover over your dock items and see a preview pane summarizing all of that app&rsquo;s open windows, a la Windows&#8217; default behavior when you hover over an app in the taskbar. Extremely helpful if you have a lot of files open simultaneously &ndash; for example, if you have lots of projects open at once in your text editor.</p></li>
<li><p><strong><a href="http://www.iterm2.com/#/section/home">iTerm 2</a> (Free)</strong> The best terminal replacement ever &ndash; I don&rsquo;t know how I ever lived without, and once you start using it, you&rsquo;ll never be able to go back to the default Mac terminal. It has so many nice improvements I can&rsquo;t even list them all, and for the absurd price of &ldquo;free&rdquo; there&rsquo;s absolutely no reason not to use it.</p></li>
<li><p><strong><a href="http://www.obdev.at/products/littlesnitch/index.html">Little Snitch</a> (Free to try, $34.95 to buy)</strong> Little Snitch is a really excellent software firewall. I&rsquo;m incredibly paranoid about network security, especially on my development machine. Little Snitch allows me to opt-out of connections I don&rsquo;t trust and really lock down my computer &ndash; not only in general, but on a network-by-network basis. As a bonus, it lets me see my network traffic so I get notified if DropBox suddenly decides to resync everything.</p></li>
<li><p><strong><a href="https://www.monosnap.com/welcome">Monosnap</a> (Free, $4.99 to enable sharing)</strong> The best skitch replacement (since Evernote ruined it). Fast screen or window captures with built-in DropBox, CloudApp, and Evernote uploading for only $4.99. It&rsquo;ll record videos of your screen and even take selfies on your Mac&rsquo;s camera, if you&rsquo;re too lazy to grab your phone.</p></li>
<li><p><strong><a href="http://www.sublimetext.com/3">Sublime Text 3</a> (Free, then $70(!))</strong> My favorite text editor (and I&rsquo;ve tried most of them). Expensive? Definitely. But you get what you pay for. ST3&rsquo;s best feature is its incredibly versatile package system &ndash; there&rsquo;s a package for pretty much everything, and as a bonus it supports most of TextMate&rsquo;s plugins as well. Despite its depth and power, it&rsquo;s still light-weight enough to start instantly and doesn&rsquo;t spend any time doing reindexing or otherwise chugging. ST3 is also cross-platform if you end up doing a bit of light programming on something other than your primarily development machine, which is useful for standardizing your editor everywhere.</p></li>
<li><p><strong><a href="http://totalspaces.binaryage.com/">TotalSpaces</a> (Free to try, $18 to buy)</strong> I don&rsquo;t like Mac&rsquo;s default Spaces implementation &ndash; four desktops right next to each other means the furthest space could be two screens away, and the widgets view is totally worthless. TotalSpaces lets you stack desktops in a grid and move left, right, up, and down. Now every space is only one swipe away from any other space. As a bonus you can get rid of the widgets as well.</p></li>
<li><p><strong><a href="http://tapbots.com/software/tweetbot/mac/">Tweetbot</a> ($19.99)</strong> Twitter is actually a valuable professional tool for me. It lets me keep on top of interesting news and developments in the tech world, contact authors of the software I use directly, and find lots of pictures of kittens. But leaving the #kittens aside, Tweetbot is the best app I&rsquo;ve used for twittering. It&rsquo;s fast, effective, and stays out of my way when I don&rsquo;t want it.</p></li>
<li><p><strong><a href="http://www.uniboxapp.com/">Unibox</a> ($9.99)</strong> I like Unibox compared to Mail.app and Mail Pilot: it&rsquo;s speedy, it organizes mail effectively, and I feel like I have a bit more control of my inbox. That said I haven&rsquo;t yet run into the program that <em>completely</em> replaces Gmail in a browser for me&hellip; Unibox is as close as I&rsquo;ve come and I use it on a daily basis, but if I&rsquo;m searching for a specific piece of mail, I turn to gmail.</p></li>
</ul>


<h2>Sublime Text Packages</h2>

<p>If you love Sublime Text 3, you&rsquo;ll want the best packages for it too. Here&rsquo;s what I recommend:</p>

<ul>
<li><p><a href="https://sublime.wbond.net/">Package Control</a> allows you to find, install, and update Sublime Text 3 packages. A prerequisite for installing anything else without going insane.</p></li>
<li><p><a href="http://buymeasoda.github.io/soda-theme/">Soda</a> is a beautiful, functional theme that I really enjoy. I&rsquo;ve tried a few others and didn&rsquo;t find them nearly as compelling (<a href="http://kkga.github.io/spacegray/">SpaceGray</a> is also quite nice, though the syntax highlighting isn&rsquo;t to my taste). Because I find it easier to read light text on a dark background, I use Soda Dark specifically.</p></li>
<li><p><a href="http://wbond.net/sublime_packages/alignment">Alignment</a> makes it easy to align everything properly and make your code nice and readable.</p></li>
<li><p><a href="https://github.com/facelessuser/BracketHighlighter">BracketHighlighter</a> shows you if you&rsquo;re inside brackets (or a block, or HTML element) and where the start and end of said brackets are. Invaluable.</p></li>
<li><p><a href="https://github.com/kemayo/sublime-text-git">git</a> gives you git integration right in Sublime Text 3, and works great with&hellip;</p></li>
<li><p><a href="http://www.jisaacks.com/gitgutter">GitGutter</a>, which shows in your gutter changes that are waiting to be committed.</p></li>
<li><p><a href="https://github.com/titoBouzout/SideBarEnhancements">SidebarEnhancements</a> gives you tons more options when you right-click anything in your sidebar, including clipboard, move to trash, reveal in finder, open in another program, and everything else you&rsquo;d expect a sidebar to reasonably contain.</p></li>
<li><p><a href="http://sublimelinter.readthedocs.org/en/latest/">SublimeLinter</a> (and linters for your languages of choice) provides cheap and easy sanity-checking of your code. Now you&rsquo;ll know as soon as you save (or as soon as you finish typing, if you like) if you fat-fingered a variable name.</p></li>
</ul>


<h2>Useful Development Tools</h2>

<ul>
<li><p><a href="http://brew.sh/">homebrew</a> is the best package manager I&rsquo;ve come across. It&rsquo;ll install everything from libxml2 to postgresql from source automatically, helps you manage upgrades from one version to the next, and is fast and performant.</p></li>
<li><p><a href="https://github.com/sstephenson/rbenv">rbenv</a> allows you to have multiple versions of Ruby on your system simultaneously, each without stepping on the others&#8217; toes. If you regularly develop in runtimes other than MRI (I have to do JRuby stuff somewhat frequently, for example) this allows you switch back and forth without going insane.</p></li>
<li><p><a href="https://github.com/burke/zeus">zeus</a> preloads your Rails apps so that tests, the console, and the server all load lightning-fast. The milliseconds you wait for Rails to start now become microseconds, saving you entire minutes per year&hellip; And isn&rsquo;t that really the point of optimization?</p></li>
</ul>


<p>I&rsquo;m sure there&rsquo;s a lot that I missed and some things I don&rsquo;t even know about. If I didn&rsquo;t include your favorite app, Sublime Text plugin, or Rails development tool let me know <a href="http://twitter.com/Veraticus">@Veraticus</a> &ndash; there&rsquo;s nothing I love more than taking a new app for a spin and even adopting it if it turns out to be amazing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming the New Family Business]]></title>
    <link href="http://joshsymonds.com/blog/2014/01/16/programming-the-new-family-business/"/>
    <updated>2014-01-16T11:28:19-06:00</updated>
    <id>http://joshsymonds.com/blog/2014/01/16/programming-the-new-family-business</id>
    <content type="html"><![CDATA[<p>In my <a href="http://joshsymonds.com/blog/2014/01/14/rails-consulting-for-fun-and-profit/">previous post</a>, I told the story of how I accidentally fell into consulting and turned it into a successful business. But what does a successful consulting business &ndash; specifically, <strong>my</strong> successful consulting business &ndash; actually look like?</p>

<p><a href="http://symondsandson.com">Symonds &amp; Son</a> isn&rsquo;t named to sound cute and hipstery. I&rsquo;m the son; I&rsquo;m in business with my father, and I recently hired my mother to be my assistant and bookkeeper. The company&rsquo;s name is intended to evoke images of traditional, reliable family businesses, where trust, excellence, and a reputation for quality products are their cornerstones. These companies, traditionally centered around carpentry and other hand-made professions, are my models for how to run Symonds &amp; Son. We are, if you&rsquo;ll forgive me using the phrase, a bespoke development shop, where our great output and superb relationship with our clients are our highest priorities.</p>

<p>But building my profession into a company &ndash; and a company with my parents, no less &ndash; hasn&rsquo;t been an easy road. There have been a lot of compromises we&rsquo;ve had to make to get this ship sailing straight. Here, I&rsquo;ll speak to how I made this new parent/child relationship work&hellip; and how I hope to continue making it work for years to come.</p>

<!-- more -->


<h2>Parents Are the Worst</h2>

<p>Let me be perfectly honest here: I was not a model child. Quite the opposite, in fact &ndash; I was the picture of a rebellious teenager. I was surly, I hated authority, I refused to leave the basement and I would play computer games constantly in lieu of doing homework. My parents and I would have huge fights that would last for hours, typically centered around my grades, and I would go screeching off into the night (in their car, of course) to hang out with my friends at Dunkin Donuts and whine about the many injustices of life, parents, and school.</p>

<p>(I was not a great student.)</p>

<p>My relationship with my parents really did not improve until after college. Though I never liked school, I found my niche in the workplace: arbitrary grades meant little to me, but performance tied to money? Now that was a formula I could understand! As my career flourished my relationship with my parents got better. I like to think that they gradually grew to respect my skills and ambition, but more realistically I think they were just happy that I had launched successfully when so many of my peers had been burned and left un- or under-employed by the poor job market.</p>

<h2>But Then So Are Children</h2>

<p>My father, a successful consultant in his own right, always advised me never to consult. Every time I eyed doing hourly work, he told me to firmly refocus my sights on a full-time job. He&rsquo;d speak to the benefits, the retirement account, the possibilities for advancement big companies could offer &ndash; and, of course, I completely disregarded his advice. I found employment first with startups (not exactly bastions of job security or big 401ks) and then freelancing.</p>

<p>So if you want to take one piece of advice from my post, it&rsquo;s this: if you want to go into business with your parents, ruthlessly ignore their recommendations at every turn!</p>

<p>My father&rsquo;s niche had always been contracts, contacts, and business development, areas in which I am admittedly weak. He&rsquo;s helped multi-million dollar companies divide and conquer their industries, and find partners to allow them to do so. When I told him I was dead set on making this consulting shindig work, he responded that he&rsquo;d be available if I needed his help. Thus I found myself relying on him more and more&hellip; first to read contracts, then to perform light business development, and finally to properly structure my own growing business and best serve my clientele. In the end I suggested we just incorporate together. He agreed, and thus Symonds &amp; Son was born.</p>

<h2>Big Egos, Big Problems</h2>

<p>Neither my father nor I are accustomed to knuckling under in arguments, and so our new business relationship has hardly been problem-free. We have some very different perspectives on the proper ways to interact with clients, communicate on a daily basis, and turn single contracts into recurring revenue. For example, I hate answering the phone during the day, as I&rsquo;m usually busy coding &ndash; but he can&rsquo;t stand getting directed to voicemail when he knows that I&rsquo;m around and just not picking up.</p>

<p>Our solution for that particular problem is better communication and faster turnarounds. He knows he can get ahold of me if there&rsquo;s an emergency, and otherwise that I&rsquo;ll return his call as soon as possible&hellip; and in return, he texts me a lot more, which allows me to respond when I&rsquo;m available and in my own time.</p>

<p>But definitely the most important lesson I&rsquo;ve learned is that my father is indeed an expert in what he does, and generally knows what he&rsquo;s doing &ndash; and that&rsquo;s the same lesson I try to impose on him when he starts stepping on my toes too much. It can be difficult to give him the reins during delicate business operations, but I actually find it helpful as well. Like most entrepreneurial people, I love being in control and feel most comfortable when I&rsquo;m managing as many of the aspects of any situation as I can. But other people are great at what they do too, and they can only prove it when given the chance to shine.</p>

<p>Or, more pithily, if I&rsquo;m to succeed personally, I have step back and let the people I trust succeed. Only if I allow it to happen can it happen.</p>

<h2>Love, Trust, Respect, Nagging</h2>

<p>As my business expanded, I found I had less and less time for simple business tasks &ndash; invoicing, talking to my accountant, setting up and managing a corporate bank account&hellip; My to-do list was growing longer and longer with absolutely no hope of me ever breaking free to accomplish any of it. After all, if I stopped coding then I stopped getting paid, and consulting is not exactly a business that lets one rest on their laurels.</p>

<p>I needed an assistant.</p>

<p>My mother had handled all our scheduling, accounts, and priorities growing up: she was a successful businesswoman in her own right as well, though she left the corporate world and went into non-profit when my sister was born. That changed in the beginning of 2013 when my parents moved. Mom suddenly found herself with less on her plate than when she lived in Connecticut, and it was difficult for her to translate her great non-profit experience in the suburbs of Connecticut to the non-profits in the heart of Chicago.</p>

<p>Growing up, I hated being nagged. But I realized what I needed was an incredibly prioritized, driven person to help me with the day-to-day operations of my business&hellip; and my mother had time to spare and thirty years of experience managing me and my time. As much as I hated to admit it, I needed her to really make Symonds &amp; Son a success.</p>

<p>And so far it&rsquo;s been working out really well &ndash; almost scarily well. My mother is an efficient woman, and when I give her a list she turns it around in a timeframe I find just astounding. For my part, I&rsquo;ve learned to respect her gentle nagging: not only does she have my best interests at heart, but the best interests of our company. She&rsquo;s working on behalf of the company to make it more efficient. If I stood in the way of that, I would be a bad employer, and while I might not have been the best son in the entire world, I at least want to be a pretty good boss.</p>

<h2>Thankshannukah with the Symondses</h2>

<p>I never turned to my parents with charity. They are successful, independent people in their own right, and I am lucky they&rsquo;ve decided to invest their time and energy in my consultancy. But there are lots of people out there who would want the opportunity to draw a paycheck from Symonds &amp; Son, some potentially even more qualified than mom and dad. So why did I decide to go into business with them?</p>

<p>Partly it&rsquo;s where they were in their lives: they had the time and energy to dedicate to a new venture. But more than that, it&rsquo;s that I already know, respect, and trust them. I want the values of my company to reflect the values of my family: a firm commitment to client work can only really be achieved if I&rsquo;m not constantly watching my back for a dagger, or if I&rsquo;m free from worries about the honesty and priorities of my employees.</p>

<p>I could have gone out, interviewed candidates, selected potentials, hired a few, and eventually learned to trust and respect them. But I had excellent, well-qualified, trustworthy and experienced candidates I already had a good relationship with. To answer my earlier rhetorical question with another, why should I go searching for what I already had?</p>

<h2>But What Happens If&hellip;?</h2>

<p>Of course, I would be disingenuous if I said I was never concerned. What if I had to have some sort of Serious Conversation&trade; with mom and dad about their performance, or salaries, or any of the other number of difficult conversations any company might have to have with its employees? Or, to get to the heart of the matter: could I really fire my own parents if I had to?</p>

<p>I like to think it&rsquo;ll never come to that. Symonds &amp; Son is a family business, and we&rsquo;ll succeed (or fail) as a unit. If the worst comes and I&rsquo;m forced to close up shop, then it means unemployment for all of us &ndash; at least temporarily. It won&rsquo;t be the end of any of our careers. I&rsquo;ll land somewhere else doing Rails, most likely, and my father will pick up other clients, and my mom will find a non-profit. It&rsquo;ll be another chapter in our lives closed, but hopefully an overall positive one.</p>

<p>Certainly working together as a family has been a challenging experience, but it&rsquo;s brought me closer to my parents in a way I wouldn&rsquo;t have imagined even a few years ago. I&rsquo;ve learned to respect them for their talents and abilities, rather than as caregivers with the patience to raise me and my sister. I&rsquo;m not saying this kind of business is for everyone &ndash; maybe it works only for us, and even then, who knows if it&rsquo;ll work forever? But in trying to model Symonds &amp; Son after traditional, family-run businesses, I&rsquo;ve found capable, competent employees right under my nose: and my clients seem to enjoy working with us, so we must be doing something right.</p>

<p>And I would be remiss if I didn&rsquo;t include at least a little advertising here! If you&rsquo;re interested in seeing <a href="http://symondsandson.com">Symonds &amp; Son</a> work for you, we make amazing software products and scalable Rails solutions. <a href="mailto:josh@joshsymonds.com">Get in touch</a> and see what a family business can do for you. You might just be surprised at how efficient and effective the new family business can be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Consulting for Fun and Profit]]></title>
    <link href="http://joshsymonds.com/blog/2014/01/14/rails-consulting-for-fun-and-profit/"/>
    <updated>2014-01-14T13:13:58-06:00</updated>
    <id>http://joshsymonds.com/blog/2014/01/14/rails-consulting-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>2013 was a great year for me specifically, and my web development shop (<a href="http://symondsandson.com">Symonds &amp; Son</a>) in general. Though I initially fell into consulting accidentally, I&rsquo;ve aggressively parlayed it into a successful business &ndash; and my only regret has not been doing so sooner! A lot of developers I know are on the fence about striking out on their own. I&rsquo;m going to lay out how 2013 changed me from a full-time employee to owner of my own business, and in doing so hopefully persuade a few people that the benefits to being in business for yourself far outweigh the risks.</p>

<!-- more -->


<h2>Becoming a Mercenary</h2>

<p>At the start of 2013, I was a salaried employee working at a startup. The rate was fine, but I spent a lot of time working &ndash; long hours in the evening to make aggressive sprints, and many meetings during the day to discuss development priorities and investor relations. I wasn&rsquo;t happy, but it was a job, and I was satisfied with it.</p>

<p>A few months into my tenure, I was offered a salary adjustment to help make my company&rsquo;s bottom-line more attractive. Instead of taking it, I proposed an alternative arrangement: I would become a consultant at a rate very similar to my old hourly and I&rsquo;d work part-time. After some negotiation, a deal was struck, and I was officially a free agent.</p>

<p>But I wasn&rsquo;t happy &ndash; indeed, quite the opposite. I spent weeks beforehand freaking out. I had the extra hours available to make up my cut income, but I&rsquo;d need clients to actually pay me for that time. Otherwise I&rsquo;d need to find another salaried position, and fast, since I didn&rsquo;t have much in the way of savings. Disaster was looming, and I spent sleepless nights trying to figure out how I&rsquo;d find a client, how I&rsquo;d convince them to actually pay me, and, if that failed, how I&rsquo;d explain a gap on my resume to future potential employers.</p>

<p>Yet almost immediately upon taking the plunge, an old client wanted me to do new work for them. They recommended me to another company, who told one of their clients about me, and very shortly after I became part-time, I was full-time working for my clients. It took me almost all of 2013 to understand what had happened.</p>

<h2>Charge Them and They&rsquo;ll Thank You</h2>

<p>In case you didn&rsquo;t know, Rails developers &ndash; specifically, good Rails developers with experience in modern tools, an interest in improving themselves, and an aggressive talent for development &ndash; are extremely hard to find. In fact, finding developers who are capable of programming in their chosen language <strong>at all</strong> is a challenge.</p>

<p>But why accept a generalized statement when I can give you a specific example? I&rsquo;m presently working with a client to vet Rails engineers. The rate they&rsquo;re willing to pay is really quite good, yet the candidates their recruiter finds are just terrible. This might be a topic for a separate post, but of the dozen people I&rsquo;ve interviewed:</p>

<ul>
<li>One didn&rsquo;t know what Rubygems were,</li>
<li>One didn&rsquo;t know what ActiveRecord was,</li>
<li>One had no idea how to sort an array in Ruby (and was surprised when I pointed out <a href="http://www.ruby-doc.org/core-2.1.0/Array.html#method-i-sort">Array#sort</a>),</li>
<li>and one knew all this but had the interpersonal skills of a serial killer. The creepy kind, not the mesmerizing kind.</li>
</ul>


<p>Yet the recruiter says these people are snatched up all the time, at a rate of roughly $100 an hour. I honestly have absolutely no idea how this happens. I&rsquo;m not exaggerating even a little bit when I say I believe that none of these people can code at all &ndash; they have no GitHub profiles, no code samples, absolutely nothing to their names.</p>

<p>(Incidentally, can you do better than these idiot candidates? <a href="mailto:josh@joshsymonds.com">Let me know, I have a pile of money with your name on it.</a>)</p>

<p>I&rsquo;ve come to believe that these people are why I&rsquo;ve succeeded. If you bring dedication, honesty, and actual, real skill to your clients, they will recognize your contributions, keep coming back to you, and tell all their friends about you. And they&rsquo;re willing to pay your hourly rate for long nights, excessive meetings, and even just listening to their plans and helping them improve their processes.</p>

<p>But if that&rsquo;s so, then why do most engineers, even the good ones, stay put at their full-time, salaried positions?</p>

<h2>Success, Outside the Bubble</h2>

<p>I think a lot of it has to do with the startup culture in San Francisco presently. Weirdly, I think it has the effect of keeping engineer salaries artificially lowered.</p>

<p>Our industry is dominated by talk of the tech bubble: all the press is about acquisitions, huge seed funding rounds, and successful entrepreneurs&#8217; new projects. But the amount of money in Silicon Valley is really quite limited. There are enormous industries out there that need skilled programmers but lack the sex appeal of a startup or coverage in TechCrunch &ndash; yet they have applications in Rails and backend infrastructure needs too.</p>

<p>And they also have way, way more money. Most of my clients are not extremely large businesses in their fields, but the amount of capital they have dwarfs that of even established startups. And they actually have business models that have worked for them for many years, so I worry less about revenue stream issues (or, heaven forbid, them folding overnight).</p>

<p>Even better, to these companies, you aren&rsquo;t just an engineer with a set salary: you&rsquo;re solving a business problem with software. Your value to them is measured in the millions of dollars you saved their company, not the amount they&rsquo;re expecting to pay to a Rails engineer. And by charging on the former, not the latter, you can turn a very tidy profit indeed.</p>

<h2>When You Try to Fly, Sometimes You Fall</h2>

<p>Of course, the process of getting my business up and running hasn&rsquo;t been all sunshine and roses. I&rsquo;ve made some mistakes and wished I&rsquo;d handled a few things differently.</p>

<ol>
<li><p>I nickled-and-dimed a client on change requests, alienating that client and making myself appear less professional. Said client did not have a whole lot of money, and while the initial contract amount was commensurately very low, she really didn&rsquo;t appreciate me charging additional for some very minor changes. I should have just sucked it up and done the work, leaving both of us with warm fuzzes in the end, even if I took a slight loss on the contract. Most of my clients hear about me from other satisfied clients, and I would have been better served by her loving me than making a little more money.</p></li>
<li><p>For pricing my services, I need to start high and work my way down. I generally start client conversations on my hourly rate at what I would consider a reasonable ultimate number, and then allow myself to be driven down from there &ndash; generally because the client wants a long-term contract and expects to save on my hourly based on the length of the engagement.</p></li>
<li><p>More projects, less hourly. When starting as a consultant, I was really selling only my hours. Now Symonds &amp; Son is a business in its own right, and I&rsquo;ve hired designers and developers to help with my workload. Working with other talented individuals makes much more sense on a project basis, where I can package their (and my) hours together.</p></li>
</ol>


<h2>I&rsquo;m Sold: How Do I Do This?</h2>

<p>&ldquo;Shut up already Josh, I think this is a great idea and want to become a consultant too! What&rsquo;s next?&rdquo;</p>

<p>Make sure you have a good track record and established public credentials. Verify your friends (and your ex-employers) will vouch for the quality of your code and the quality of you as an individual. Go to meetups, write blog posts, have open-sourced code on GitHub &ndash; the more stuff you have on record, the better. Your clients will want to know everything about you they can before they even meet you.</p>

<p>Have a backup plan in case everything goes wrong. Mine was &ldquo;find another full-time Rails job,&rdquo; something that I&rsquo;ve never traditionally had a problem finding. At least think about a safety net so that taking the plunge is less scary.</p>

<p>And consider if you really want to be a mercenary. Many talented coders I know work for peanuts, but they do so for non-profits, amazing startups, and benefit corporations. They don&rsquo;t care that they&rsquo;re not taking home tons of money; they are making a difference in the world, which matters more to them than any paycheck ever could.</p>

<p>But if the idea of consulting appeals to you, then I encourage you to take the plunge. As engineers, our services are as in-demand as ever; if you are a competent engineer, you can turn your skills from a salary into a solution, and companies pay much more handsomely for the latter. And if you try to fly and fail, you have a good chance of landing at another job anyway &ndash; so really, the risk is pretty minimal. And if you take off and soar away, let me know: I always need exciting new companies to work on big contracts with!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cryptolalia, for creating Cicada 3301 ciphertext puzzles]]></title>
    <link href="http://joshsymonds.com/blog/2013/12/26/cryptolalia-for-creating-cicada-3301-ciphertext-puzzles/"/>
    <updated>2013-12-26T10:31:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/12/26/cryptolalia-for-creating-cicada-3301-ciphertext-puzzles</id>
    <content type="html"><![CDATA[<p>After reading yet another article on <a href="http://en.wikipedia.org/wiki/Cicada_3301">Cicada 3301</a> on Hacker News a few weeks ago, I was struck by inspiration. If I wanted a whole gaggle of people on the Internet to compete for &ndash; well, for some unknown goal &ndash; apparently all I needed was ciphertexts of arbitrary complexity and arcane places to hide them. Arcane places I had, but what I didn&rsquo;t was a good way to generate all the sorts of codes that Cicada 3301 employed.</p>

<p>So I decided to make it.</p>

<!-- more -->


<p><a href="https://github.com/Veraticus/cryptolalia">cryptolalia</a> is a Ruby gem that allows the creation of arbitrarily-complicated ciphertexts from plaintexts. At release, it has the following ciphers:</p>

<ul>
<li><em>atbash inversion</em> - an alphabet substitution cipher that replaces every character in the plaintext with its opposite character in the target alphabet.</li>
<li><em>Beale homophonic substitution</em> - for every letter of the plaintext, finds a word in a source text beginning with that letter, and adds its position in the source to the ciphertext.</li>
<li><em>Caesar</em> - the simplest alphabet substitution cipher, rotate each letter of the ciphertext through a chosen alphabet.</li>
<li><em>Pollux</em> - translate the plaintext into Morse code, and chooses dot, dash, and separator symbols from an arbitrarily complex alphabet.</li>
<li><em>PNG Steganography</em> - encode your plaintext in an image, either in its comments or least-significant bits.</li>
<li><em>Vigenere</em> - a very complicated alphabet substitution cipher that takes a keyword and rotates each letter of the target alphabet based on the keyword and the plaintext.</li>
</ul>


<p>You&rsquo;ve probably seen most of these ciphers before. But they become way more difficult to decode if you choose weird alphabets, Victorian-era source texts, and long-dead numeral systems. Combine these ciphers with excellent placement and you too can take the cryptography world by storm!</p>

<h2>Cryptolalia In Action</h2>

<p>Taken from the <a href="https://github.com/Veraticus/cryptolalia">cryptolalia</a> README:</p>

<p><img src="http://f.cl.ly/items/2D0N2H0Z2T3M0R3J3p0X/rainbow.png" alt="Rainbows" /></p>

<p>The above image contains a ciphertext! It was inserted there using cryptolalia in the following manner:</p>

<p>The plaintext (&ldquo;secrets are fun&rdquo;) was transformed with a Pollux Morse code cipher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pollux</span> <span class="o">=</span> <span class="no">Cryptolalia</span><span class="o">::</span><span class="no">Cipher</span><span class="o">::</span><span class="no">Pollux</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">plaintext</span> <span class="o">=</span> <span class="s1">&#39;secrets are fun&#39;</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">dot</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">dash</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;f&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">seperator</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">encode!</span> <span class="c1"># &quot;ccchagfadbgafcgbgficbaiadiadbgbgccfbhbbegfai&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result of the Pollux cipher is fed into a Beale homophonic substitution cipher with the Declaration of Independence as a source text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">beale</span> <span class="o">=</span> <span class="no">Cryptolalia</span><span class="o">::</span><span class="no">Cipher</span><span class="o">::</span><span class="no">Beale</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">beale</span><span class="o">.</span><span class="n">plaintext</span> <span class="o">=</span> <span class="s2">&quot;ccchagfadbgafcgbgficbaiadiadbgbgccfbhbbegfai&quot;</span>
</span><span class='line'><span class="n">beale</span><span class="o">.</span><span class="n">file</span> <span class="o">=</span> <span class="s2">&quot;test/fixtures/Declaration\ of\ Independence.txt&quot;</span>
</span><span class='line'><span class="n">beale</span><span class="o">.</span><span class="n">encode!</span> <span class="c1"># &quot;917 574 917 978 254 366 1016 1111 601 99 860 872 1197 1225 1259 692 308 305 667 1217 913 10 1235 61 415 12 690 1267 1138 794 1061 794 1287 819 960 1068 580 1246 1040 594 837 754 518 1048&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result of the homophonic substitution cipher is further moved into a steganographic PNG cipher to encode it into the least-significant bits of an image:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">steg</span> <span class="o">=</span> <span class="no">Cryptolalia</span><span class="o">::</span><span class="no">Cipher</span><span class="o">::</span><span class="no">Steganography</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">plaintext</span> <span class="o">=</span> <span class="s2">&quot;917 574 917 978 254 366 1016 1111 601 99 860 872 1197 1225 1259 692 308 305 667 1217 913 10 1235 61 415 12 690 1267 1138 794 1061 794 1287 819 960 1068 580 1246 1040 594 837 754 518 1048&quot;</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">file</span> <span class="o">=</span> <span class="s2">&quot;test/fixtures/sample.png&quot;</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">encoded_in</span> <span class="o">=</span> <span class="ss">:lsb</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">output_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;rainbow.png&#39;</span><span class="p">,</span> <span class="s1">&#39;w+&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">encode!</span> <span class="c1"># true, see the file above</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t believe me? You can decode it yourself, also using cryptolalia:</p>

<p>Download the file above (rainbow.png) locally and decipher it with the steganographic PNG decipherer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">steg</span> <span class="o">=</span> <span class="no">Cryptolalia</span><span class="o">::</span><span class="no">Cipher</span><span class="o">::</span><span class="no">Steganography</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">file</span> <span class="o">=</span> <span class="s1">&#39;rainbow.png&#39;</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">encoded_in</span> <span class="o">=</span> <span class="ss">:lsb</span>
</span><span class='line'><span class="n">steg</span><span class="o">.</span><span class="n">decode!</span> <span class="c1"># A very very long string, starting with: &quot;917 574 917 978 254 366 1016 1111 601 99 860 872 1197 1225 1259 692 308 305 667 1217 913 10 1235 61 415 12 690 1267 1138 794 1061 794 1287 819 960 1068 580 1246 1040 594 837 754 518 1048&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Insert the numbers of the Beale homophonic substitution cipher back in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">beale</span> <span class="o">=</span> <span class="no">Cryptolalia</span><span class="o">::</span><span class="no">Cipher</span><span class="o">::</span><span class="no">Beale</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">beale</span><span class="o">.</span><span class="n">ciphertext</span> <span class="o">=</span> <span class="s2">&quot;917 574 917 978 254 366 1016 1111 601 99 860 872 1197 1225 1259 692 308 305 667 1217 913 10 1235 61 415 12 690 1267 1138 794 1061 794 1287 819 960 1068 580 1246 1040 594 837 754 518 1048&quot;</span>
</span><span class='line'><span class="n">beale</span><span class="o">.</span><span class="n">file</span> <span class="o">=</span> <span class="s2">&quot;test/fixtures/Declaration\ of\ Independence.txt&quot;</span>
</span><span class='line'><span class="n">beale</span><span class="o">.</span><span class="n">decode!</span> <span class="c1"># &quot;ccchagfadbgafcgbgficbaiadiadbgbgccfbhbbegfai&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, plug it right back into the Pollux cipher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pollux</span> <span class="o">=</span> <span class="no">Cryptolalia</span><span class="o">::</span><span class="no">Cipher</span><span class="o">::</span><span class="no">Pollux</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">ciphertext</span> <span class="o">=</span> <span class="s2">&quot;ccchagfadbgafcgbgficbaiadiadbgbgccfbhbbegfai&quot;</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">dot</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">dash</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;f&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">seperator</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">pollux</span><span class="o">.</span><span class="n">decode!</span> <span class="c1"># &quot;secretsarefun&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Code Defensively]]></title>
    <link href="http://joshsymonds.com/blog/2013/11/14/dont-code-defensively/"/>
    <updated>2013-11-14T10:30:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/11/14/dont-code-defensively</id>
    <content type="html"><![CDATA[<p>As an engineer, we&rsquo;re responsible for creating things that people care about deeply. Whether you&rsquo;re programming something as important as a car&rsquo;s operating system or as silly as an iPhone game, our code touches lives. It&rsquo;s no wonder, then, that the people who interact with our products feel strongly about them &ndash; and possibly about us, as well.</p>

<p>This can sometimes be a good thing. It&rsquo;s always touching to receive a heartfelt letter of thanks and admiration from a customer. But much more commonly, you&rsquo;ll hear complaints, demands, and anger.</p>

<p>Under a deluge like that, it&rsquo;s easy to become disillusioned and bitter. I see it all the time: programmers who hide in their shells at the slightest provocation. They make excuses, shift blame, and refuse to own their actions. I think this attitude is ultimately cowardly &ndash; if you&rsquo;re willing to take credit for the good things you&rsquo;ve done, you have to &ldquo;take credit&rdquo; for the bad stuff too. And cowardice of this sort contributes to making bad code, since your goal is no longer to to solve your organization&rsquo;s problems, but to shirk responsibility.</p>

<p>That&rsquo;s what I call coding defensively &ndash; an entirely separate subject from <a href="http://en.wikipedia.org/wiki/Defensive_programming">defensive programming</a>. Coding defensively mires you in your codebase. It&rsquo;s hard to go forward because you don&rsquo;t want more responsibility, and you can&rsquo;t go back because it would be admitting error. And it&rsquo;s a self-reinforcing cycle: once you start becoming defensive, it&rsquo;s difficult to stop.</p>

<p>I was a defensive coder too. I struggled to own the results of my actions: I would refuse to discuss solutions in a sensible, level-headed way. It took me a long time to change my approach, and as part of doing so I wrote a list of maxims summarizing how I wanted to think and act. When I feel myself slipping I go over them to refresh my resolve. I&rsquo;m publishing them here in the hope that they&rsquo;ll help someone else as much as they&rsquo;ve helped me.</p>

<!-- more -->


<h2>No one gets it right all the time</h2>

<p>First, you have to realize that people &ndash; even you &ndash; make mistakes. It&rsquo;s not productive to pretend that it didn&rsquo;t happen or that someone else is at fault: if you know in your heart that the responsibility lies with you, then don&rsquo;t try to shift blame. It was your mistake, and part of being a human is making mistakes, so own that error with all your heart!</p>

<p>I found that achnowledging my fault and being accepting of it removed a lot of the impetus to be defensive. I no longer felt as ashamed of what I&rsquo;d done or that I had to spend time and energy making excuses. The &ldquo;excuse&rdquo; is that mistakes happen: what matters now isn&rsquo;t that the mistake occurred, but how you&rsquo;ll go about addressing it.</p>

<p>Please don&rsquo;t get me wrong &ndash; I&rsquo;m not saying you should be making mistakes left and right flippantly. Avoid them if you can, through proactive testing, code reviews, and sensible QA. But they&rsquo;ll still happen, even if you&rsquo;re very good. Since you can&rsquo;t change whether or not you&rsquo;ll make mistakes, you may as well change your attitude to them.</p>

<h2>Be friendly</h2>

<p>In the face of anger or blame, don&rsquo;t turtle up! Instead, kill them with kindness.</p>

<p>As I said way back at the beginning of this post, what we do naturally inspires passion in those around us. Frequently when people run into an engineering problem, this passion will turn to anger. By the time the problem has percolated to us the anger has found its target: the programmer responsible for creating the code in the first place.</p>

<p>Friendliness reminds the people you&rsquo;re interacting with that you&rsquo;re just as dedicated to a solution as they are. Resist when they try to brand you as an antagonist. Their reaction is natural because they believe you made the problem: but in fact, you&rsquo;re partners together in trying to solve it, and kindness reminds them of this fact.</p>

<p>You&rsquo;ll be surprised at the turnarounds you see in people&rsquo;s attitudes when you&rsquo;re unrelentingly friendly to them in return. And once the anger has dissipated, you can work towards a resolution.</p>

<h2>Seriously consider solutions</h2>

<p>Or, if you&rsquo;re a Glengarry Glen Ross fan, &ldquo;always be solving.&rdquo;</p>

<p><img src="http://f.cl.ly/items/2y3x25163d0L0J1A0s14/Image%202013.11.14%209%3A38%3A06%20AM.jpeg" alt="Always Be Solving" /></p>

<p>Putting your existing solutions on a pedestal isn&rsquo;t productive. There&rsquo;s no inherent value to what you have other than that it works &ndash; and sometimes, not even that! Hand-in-hand with this, concentrating only on the potential downsides of new technology blinds you to potentially tremendous upsides.</p>

<p>Dismissing solutions out of hand &ndash; particularly if you don&rsquo;t understand them or it seems like they&rsquo;d be difficult to implement &ndash; is an easy, natural reaction. But what your stakeholders are searching for might exist outside your comfort zone. It might involve using a piece of software with which you have little experience, or, in the worst case, might be implemented in a programming language you don&rsquo;t even know.</p>

<p>If it&rsquo;s still more or less perfect despite those flaws, then you have to go for it. Your responsibility is to do what&rsquo;s right, not what&rsquo;s easy.</p>

<p>And guess what? Afterwards, you&rsquo;ll probably feel way more comfortable implementing that solution again in the future, and professional growth is always pretty awesome&hellip; and leads to personal growth as well.</p>

<h2>Your net effect is positive</h2>

<p>Even in the face of overwhelming negativity or horrible problems, you have to remind yourself that your overall effect is a positive one. As humans, we spend an inordinate amount of time concentrating on negative experiences: in the past, perhaps, an embarrassing moment in high school that everyone but you has forgotten, and in your day-to-day job, the errors and problems you feel largely responsible for.</p>

<p>It can be helpful to remind yourself of the good things you&rsquo;ve done too, and that, in the balance, the good outweighs the bad. Doing so gives you the courage to hold your head high, and gives you the self-confidence to tackle your problems head on, instead of hiding from them.</p>

<p>And that willingness to embrace reality is what prevents defensive coding. In the end, your willingness to act &ndash; and the attitude you have towards action &ndash; can mean more to people than what you do. By trying to be a proactive, positive force of good, you&rsquo;re telling the people who care about your code that you care about it as well. More than anything else, that will garner their respect and admiration and lead them to believe you&rsquo;re coding for them, not coding defensively.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes a Good Programmer Good?]]></title>
    <link href="http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good/"/>
    <updated>2013-11-03T13:06:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/11/03/what-makes-a-good-programmer-good</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve worked with a lot of programmers over the years &ndash; some of them super amazing, and some distinctly lackluster. As I&rsquo;ve had the pleasure of working with some very skilled individuals recently, I spent some time thinking about what I admire in them. What makes a good programmer so good, and a bad programmer so bad? Or, to mangle English a little bit, what makes a good programmer good?</p>

<p>Based on my experiences, being a great programmer has nothing to do with age, education, or how much money you make. It&rsquo;s all in how you act and, more deeply, how you think. I&rsquo;ve noticed a consistent set of habits in the programmers I admire. More than knowledge of their chosen language, deep understanding of data structures and algorithms, or even more than years of on-the-job experience &ndash; the way they communicate, the way they conduct themselves, and the way they approach programming speak volumes as to their amazing level of skill.</p>

<p>Certainly there&rsquo;s more to being a good programmer than anyone can enumerate, and I wouldn&rsquo;t judge any programmer solely based on the presence (or lack) of these practices. But I do know wisdom when I see it, and when I see a programmer expressing these traits, I think, &ldquo;This person really knows what they&rsquo;re doing.&rdquo;</p>

<!-- more -->


<h2>They do their research</h2>

<p>Or &ldquo;measure twice, cut once.&rdquo; Or &ldquo;Google it.&rdquo;</p>

<p>Whatever you call it, most programming problems you&rsquo;re likely to encounter have been solved in some form already &ndash; Ecclesiastes had it right in observing there was nothing new under the sun. In the form of libraries on GitHub, blog posts on the Internet, or just getting in touch with experienced individuals, good programmers know to do the research before they try to solve a problem.</p>

<p>I&rsquo;ve seen even great programmers rush to solutions: but the worst programmers I&rsquo;ve worked with never consult others, and as a result do huge amounts of duplicate work or tackle issues in precisely the wrong way. And unfortunately, they end up paying for their mistakes later.</p>

<h2>They read error messages (and act on them)</h2>

<p>This includes desymbolicating stack traces. Yes, it&rsquo;s ugly and unfortunate &ndash; but if you&rsquo;re not willing to do it how are you going to know what&rsquo;s wrong? The most effective programmers I know aren&rsquo;t afraid to dig deep into problems. The least effective see there was an error but don&rsquo;t even bother reading the error message. (This sounds ridiculous but you&rsquo;d be surprised how frequently I run into it.)</p>

<p>To take this a step further, great programmers see a problem and hunger to solve it. Reading error messages are for them just the beginning: they&rsquo;re anxious to dive deep into the issue that it represents and figure out what&rsquo;s going wrong. They&rsquo;re not interested in passing responsibility, they&rsquo;re interested in finding a solution. The buck really does stop with them.</p>

<h2>They go to the source</h2>

<p>Documentation, tests, people: these things lie. Not intentionally, but if you want to know exactly how something works, then you must view the source yourself.</p>

<p>Don&rsquo;t be afraid if it&rsquo;s not a language you&rsquo;re super familiar with &ndash; if you&rsquo;re primarily a Ruby programmer and you suspect there&rsquo;s an error in one of Ruby&rsquo;s C libraries, go crack it open and have a look. Yes, you might not get it. But who knows? You just might, and you stand a way better chance than if you didn&rsquo;t try at all!</p>

<p>If you&rsquo;re in a closed-source environment then this becomes a lot harder, unfortunately, but the principle still applies. Poor programmers have little interest in viewing source, and as a result problems flummox them much longer than those who are willing to do some research.</p>

<h2>They just do it</h2>

<p>Good programmers are driven to act. There&rsquo;s a compulsion in them that can be difficult to control: they&rsquo;re implementing a solution as soon as they identify a problem or see a new feature request, sometimes too early and sometimes too aggressively. But their instinctive response to a problem is to tackle it head-on.</p>

<p>This can be troublesome at times &ndash; but their enthusiasm is a crucial part of being good at what they do. While some might stonewall or wait for the problem to go away on its own, good programmers start solving.</p>

<p>To put it more simply (and, perhaps, too obviously): if you see someone excitedly grabbing problems and acting on them, chances are you have a good programmer on your hands.</p>

<h2>They avoid crises</h2>

<p>This is mostly a bad programmer trait: they tend to bounce from artificial crisis to artificial crisis, never really understanding one before they move to the next. They&rsquo;ll assign blame to the wrong parts of their program and then spend hours debugging something that works perfectly well. They let their emotions get the better of them, trusting gut feelings rather than careful, explicit analysis.</p>

<p>If you hurry through a problem &ndash; or even view each problem as a world-shattering catastrophe &ndash; you&rsquo;re more likely to make errors or not address the underlying issues. Great programmers take the time to understand what&rsquo;s going wrong, even when there really is a catastrophe: but more than that, they treat regular problems as issues to be solved. Thus they solve more of them more accurately, and do so without raising the tension level of your organization.</p>

<h2>They communicate well</h2>

<p>Ultimately, programming is a form of communication. Being able to succinctly and eloquently express your thoughts is as crucial in writing code as it is in writing prose &ndash; and I&rsquo;ve always found that those who can write a pithy email, elegant status report, or even just an effective memo will also be better programmers than those who cannot.</p>

<p>This applies to code in addition to English. It&rsquo;s certainly possible to make a one-liner filled with parenthesis, brackets, and single-letter functions: but if no one understands it, what&rsquo;s the point? Good programmers take the time to communicate their ideas properly in whatever medium they&rsquo;re using.</p>

<h2>They are passionate</h2>

<p>I think this might be the most important aspect of a good programmer (and perhaps the part of this list most generally applicable to fields other than computer science).</p>

<p>If you truly care about what you&rsquo;re doing &ndash; if it&rsquo;s not just a job, but a hobby, an interest, even a fascination &ndash; then you have a major advantage over anyone else in your field. Great programmers are always programming. Their peers will clock out at eight hours a day: not out their job, but of their field in general. They don&rsquo;t have programming side projects or much interest in contributing back to the community. They&rsquo;re not constantly trying neat new methods and crazy programming languages just to see how they work.</p>

<p>When I see a programmer who&rsquo;s doing their own hobby projects on the weekends, who&rsquo;s involved in the creation of the tools that they use every day, who&rsquo;s fascinated by the new and the interesting: that&rsquo;s when I really know I&rsquo;m looking at an amazing person. Ultimately great programmers view their profession not just as a means to make money, but as a means to make a difference. I think that&rsquo;s what makes the best programmers who they are. Coding, to them, is a way of shaping the world. And that&rsquo;s what I truly respect and admire.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq + Houston: Production Ready]]></title>
    <link href="http://joshsymonds.com/blog/2013/10/17/sidekiq-plus-houston-production-ready/"/>
    <updated>2013-10-17T12:13:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/10/17/sidekiq-plus-houston-production-ready</id>
    <content type="html"><![CDATA[<p>Three months ago, I wrote <a href="http://joshsymonds.com/blog/2013/07/01/sidekiq-plus-houston-persistent-apple-connection-pooling/">Sidekiq + Houston: Persistent Apple Connection Pooling</a>. The code I included there initially worked great but over time all the APN connections I had established would break and not restart themselves appropriately. To correct this issue, I wrapped the APN connection itself in a class that was more resistant to failure. To help those who are using Sidekiq and Houston together in production, here&rsquo;s the code I used to do so.</p>

<!-- more -->


<p>Change the <code>NotifierWorker</code> to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/workers/notifier_worker.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;apn_connection&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NotifierWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sidekiq</span><span class="o">::</span><span class="no">Worker</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">APN_POOL</span> <span class="o">=</span> <span class="no">ConnectionPool</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:size</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="mi">300</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">APNConnection</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">recipient_ids</span><span class="p">,</span> <span class="n">custom_data</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">recipient_ids</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="n">recipient_ids</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">APN_POOL</span><span class="o">.</span><span class="n">with</span> <span class="k">do</span> <span class="o">|</span><span class="n">connection</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tokens</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">recipient_ids</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="n">u</span><span class="o">.</span><span class="n">devices</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:token</span><span class="p">)}</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">tokens</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">token</span><span class="o">|</span>
</span><span class='line'>        <span class="n">notification</span> <span class="o">=</span> <span class="no">Houston</span><span class="o">::</span><span class="no">Notification</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">device</span><span class="p">:</span> <span class="n">token</span><span class="p">)</span>
</span><span class='line'>        <span class="n">notification</span><span class="o">.</span><span class="n">alert</span> <span class="o">=</span> <span class="n">message</span>
</span><span class='line'>        <span class="n">notification</span><span class="o">.</span><span class="n">sound</span> <span class="o">=</span> <span class="s1">&#39;default&#39;</span>
</span><span class='line'>        <span class="n">notification</span><span class="o">.</span><span class="n">custom_data</span> <span class="o">=</span> <span class="n">custom_data</span>
</span><span class='line'>        <span class="n">connection</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">notification</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, the big change here is <code>require apn_connection</code> and the extraction of all the logic that had formerly established our connection with Apple. Now we do that in a new class, sensibly called <code>APNConnection</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/apn_connection.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">APNConnection</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="n">setup</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@uri</span><span class="p">,</span> <span class="vi">@certificate</span> <span class="o">=</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="no">Houston</span><span class="o">::</span><span class="no">APPLE_PRODUCTION_GATEWAY_URI</span><span class="p">,</span>
</span><span class='line'>        <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/keys/production_push.pem&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="no">Houston</span><span class="o">::</span><span class="no">APPLE_DEVELOPMENT_GATEWAY_URI</span><span class="p">,</span>
</span><span class='line'>        <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/config/keys/development_push.pem&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@connection</span> <span class="o">=</span> <span class="no">Houston</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@uri</span><span class="p">,</span> <span class="vi">@certificate</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@connection</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;Connection is closed&quot;</span> <span class="k">unless</span> <span class="vi">@connection</span><span class="o">.</span><span class="n">open?</span>
</span><span class='line'>      <span class="vi">@connection</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="n">attempts</span> <span class="o">||=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">attempts</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">attempts</span> <span class="o">&lt;</span> <span class="mi">5</span>
</span><span class='line'>        <span class="n">setup</span>
</span><span class='line'>        <span class="k">retry</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main difference here is that the <code>write</code> method will raise an error if the connection has become closed &ndash; this happens most frequently when you write a bad device token into the stream, which causes the APN service to disconnect you. Frustratingly the closure is detected on the request <em>following</em> the bad request, meaning that a perfectly good request encounters an error for no particularly good reason. The retry code here will attempt to reopen the connection to Apple five times and resend the message, until eventually it gives up.</p>

<p>Using this method I have a robust, failure-resistant push notification service in production that I (and my customers) are very pleased with indeed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helper Methods in Sprinkle]]></title>
    <link href="http://joshsymonds.com/blog/2013/10/14/helper-methods-in-sprinkle/"/>
    <updated>2013-10-14T16:03:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/10/14/helper-methods-in-sprinkle</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been using <a href="https://github.com/sprinkle-tool/sprinkle">sprinkle</a> a lot in a large client project. Sprinkle is server provisioning software, akin to <a href="http://www.opscode.com/chef/">Chef</a> except much lighter. It&rsquo;s most directly akin to <a href="https://github.com/rubber/rubber">rubber</a>, but rubber&rsquo;s biggest advantage is its pre-built recipes: it&rsquo;s a little finicky to sensibly extend, and those only work well on EC2. Sprinkle is built for extension, customizability, and platform agnosticism, but comes with no recipes at all by default. Tradeoffs!</p>

<p>Sprinkle (and rubber) are very different from most other server provisioning software I&rsquo;ve used &ndash; on the one hand, by leveraging Capistrano for server communication (or SSH or Vlad if you prefer), it remains extremely light and focused on just provisioning. But on the other, it inherits most of Capistrano&rsquo;s downsides too: primary among them is that it&rsquo;s easy to repeat yourself if you&rsquo;re not careful. So I wanted to post a quick tip for other people using sprinkle on how to DRY it up just a little bit.</p>

<!-- more -->


<p>Let&rsquo;s say you have a helper method you want to include in all policies, packages, and verifiers. Make a module to contain it, something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># sprinkle/config/helpers.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Sprinkle</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Helpers</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">templates</span>
</span><span class='line'>      <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">/templates&quot;</span> <span class="c1"># sprinkle/templates/</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that to use this helper method in a lot of different places requires a little bit of work. You can&rsquo;t just do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># sprinkle/policies/base.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">policy</span> <span class="ss">:base</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">requires</span> <span class="ss">:build_essential</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">templates</span><span class="si">}</span><span class="s2">/build_essential.txt&quot;</span><span class="p">)</span>
</span><span class='line'>                                             <span class="c1"># No method error for templates</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">package</span> <span class="ss">:build_essential</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">file</span> <span class="s2">&quot;/etc/build_essential.txt&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">contents</span><span class="p">:</span> <span class="n">render</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">templates</span><span class="si">}</span><span class="s2">/build_essential.txt&quot;</span><span class="p">),</span> <span class="c1"># No method error for templates</span>
</span><span class='line'>    <span class="ss">sudo</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">verify</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">has_file</span> <span class="s2">&quot;/etc/build_essential.txt&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">templates</span><span class="si">}</span><span class="s2">/build_essential.txt&quot;</span> <span class="c1"># Contrived example since you&#39;d never really</span>
</span><span class='line'>                                            <span class="c1"># just puts something here, but this also</span>
</span><span class='line'>                                            <span class="c1"># throws a no method error</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to include the <code>Helpers</code> module in each class: policy, packages, and verifiers. That&rsquo;s easy enough to do. After you define your helper, do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># sprinkle/config/helpers.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sprinkle</span><span class="o">::</span><span class="no">Policy</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sprinkle</span><span class="o">::</span><span class="no">Helpers</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Sprinkle::Package</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Package</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Sprinkle</span><span class="o">::</span><span class="no">Helpers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Sprinkle</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Verify</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Sprinkle</span><span class="o">::</span><span class="no">Helpers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your helpers will be available everywhere you expect, allowing you to use them anywhere but still define them in one place.</p>

<p>I&rsquo;ll post some more neat sprinkle tidbits in the future, but this by itself allowed me to significantly dry up my code and enjoy my sprinkle experience quite a lot more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gistify 1.2.0: Drag &amp; Drop Gisting]]></title>
    <link href="http://joshsymonds.com/blog/2013/08/13/gistify-1-dot-2-0-drag-and-drop-gisting/"/>
    <updated>2013-08-13T10:23:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/08/13/gistify-1-dot-2-0-drag-and-drop-gisting</id>
    <content type="html"><![CDATA[<p>Gistify just keeps getting better!</p>

<p><a href="https://itunes.apple.com/us/app/gistify/id653231502">Gistify 1.2.0</a> is now in the App Store, and features some awesome drag and drop magic. Drag a snippet of text or an entire file onto the Gistify icon and a new gist will be created from your file. The format of the file will automatically be detected, and the resulting gist URL added to your clipboard just as usual. Amazing!</p>

<p>In addition to that big new feature, 1.2.0 features a number of bug fixes and performance improvements: for example, now Gistify will properly start up if you check the &ldquo;Open at Startup&rdquo; box, and you can copy and paste in the GitHub username/password fields (for the 1Password or LastPass users out there). Just small quality of life improvements generally.</p>

<p>Interested in giving Gistify a shot? Go <a href="https://itunes.apple.com/us/app/gistify/id653231502">download it</a> now! Or if you&rsquo;d like to demo it without paying the $1.99, just let me know and I&rsquo;d be happy to set you up with a review copy.</p>
]]></content>
  </entry>
  
</feed>
