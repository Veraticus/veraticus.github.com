<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Josh Symonds]]></title>
  <link href="http://joshsymonds.com/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2012-04-12T09:29:38-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Achieving 100% Uptime]]></title>
    <link href="http://joshsymonds.com/blog/2012/04/09/achieving-100-percent-uptime/"/>
    <updated>2012-04-09T17:52:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/04/09/achieving-100-percent-uptime</id>
    <content type="html"><![CDATA[<p><img src="http://f.cl.ly/items/0q2M3B2o1f1D1D451B1S/uptime.jpg" alt="Uptime - 100%" /></p>

<p>Keeping a highly available web application online is no joke. Everything above 99% is extremely impressive; that means that you battled the forces of <a href="http://en.wikipedia.org/wiki/Software_erosion">erosion</a> and probably even deployed some pretty neat features without even a hiccup from your users&#8217; perspective. I always feel great when I get our weekly <a href="http://newrelic.com/">New Relic</a> status report email &#8211; it&#8217;s a good indication of how well I did my job in the previous week. And for a couple weeks now I&#8217;m happy to report I&#8217;ve been very proud indeed, with 100% uptime on the Hipstamatic web application.</p>

<p>How do you achieve numbers like these? Unfortunately getting to 100% isn&#8217;t an easy road, and I want to state up front that I also don&#8217;t think it&#8217;s a realistic goal. Issues you can&#8217;t control can ruin your uptime number, and you shouldn&#8217;t feel broken up about that. It happens to everybody. But it&#8217;s always good setting goals that are difficult to achieve, and this one is no different.</p>

<p>So what&#8217;s the secret to 100% uptime?</p>

<!-- more -->


<h2>Watch It Constantly</h2>

<p>Some people check their fantasy baseball league or their portfolio every morning. At the slightest hint of trouble, they&#8217;ll be waist-deep in trading players or stocks to get everything right back on track. You should be that way with your servers and the software that runs on them. This usually means monitoring software, and a lot of it.</p>

<p>At Hipstamatic, we make extensive use of New Relic to give us a broad overview of our application. It helps us proactively fix nascent problems, analyzing slow queries and sluggish pages. But you need something closer to the metal, and for that we use <a href="http://mmonit.com/monit/">monit</a>. Monit is an amazing tool to control your applications&#8217; behavior and warn you when that behavior becomes dangerous. Here&#8217;s a sample of our unicorn monit file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="k">if </span>totalmem &gt; 70% <span class="k">for </span>4 cycles <span class="k">then </span>alert
</span><span class='line'>  <span class="k">if </span>totalmem &gt; 90% <span class="k">for </span>6 cycles <span class="k">then </span><span class="nb">exec</span> <span class="s2">&quot;kill -USR2 `cat /pids/unicorn.pid`&quot;</span>
</span><span class='line'>  <span class="k">if </span>cpu &gt; 70% <span class="k">for </span>4 cycles <span class="k">then </span>alert
</span><span class='line'>  <span class="k">if </span>cpu &gt; 90% <span class="k">for </span>6 cycles <span class="k">then </span><span class="nb">exec</span> <span class="s2">&quot;kill -USR2 `cat /pids/unicorn.pid`&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This states that I get an alert when unicorn&#8217;s total memory or CPU usage exceeds 70%, and that unicorn receives a USR2 signal when total memory or CPU exceed 90%.</p>

<p>Finally, we employ <a href="http://munin-monitoring.org/">munin</a> to compile statistics that we care about, including nginx connections and unicorn requests served.</p>

<p>Yes, this is a lot of monitoring. But I feel like even this isn&#8217;t enough. You can&#8217;t watch your stack too carefully, and you can&#8217;t have too many tools in place to help you analyze what&#8217;s going on. Consider this trifecta of tools only a start, but at least it&#8217;s a good one.</p>

<h2>Seamless Deploys</h2>

<p>On an average week I deploy seven to ten times. Of course, this entire process is invisible to our users; the magic that makes this happen is <a href="http://unicorn.bogomips.org/">unicorn</a>. There have been many posts on the wonders of unicorn and how to configure it correctly. I will simply post the part of our <code>unicorn.rb</code> that allows us to do seamless restarting, which you can find in a number of gists essentially unmodified.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'>  <span class="n">old_pid</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">server</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="ss">:pid</span><span class="o">]</span><span class="si">}</span><span class="s2">.oldbin&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">server</span><span class="o">.</span><span class="n">pid</span> <span class="o">!=</span> <span class="n">old_pid</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="s2">&quot;QUIT&quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOENT</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ESRCH</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The command we use to restart unicorn is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="k">if</span> <span class="o">[</span> ! -f <span class="s1">&#39;/pids/unicorn.pid&#39;</span> <span class="o">]</span>; <span class="k">then </span><span class="nb">cd </span>current_path <span class="o">&amp;&amp;</span> bundle <span class="nb">exec </span>unicorn_rails -c ./config/unicorn.rb -E production -D; <span class="k">else </span><span class="nb">kill</span> -USR2 <span class="sb">`</span>cat /pids/unicorn.pid<span class="sb">`</span>; <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>USR2 is the signal that tells unicorn to start reloading itself: the before_fork causes the new server to kill the old server only when it&#8217;s ready to start processing connections.</p>

<h2>Migrations Without Downtime</h2>

<p>The last key component to 100% uptime is migrating your database without bringing your site down. Of course, this only applies if you&#8217;re changing how existing code interacts with the database &#8211; for new tables, simply migrate before deploying and you&#8217;re done. If only it could be that easy all the time&#8230;</p>

<p>Frequently we are required to change existing tables and colums or add new ones. For those of us still using relational databases, migrations almost always mean locked tables, and locked tables mean site downtime. To fix this problem, my tool of choice has been <a href="https://github.com/soundcloud/large-hadron-migrator">Large Hadron Migrator</a>. Large Hadron Migrator requires very little from your tables (just an autoincrementing ID) and allows you to alter tables and even add new columns without bringing your site down.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddOrdersCountToUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
</span><span class='line'>    <span class="no">Lhm</span><span class="o">.</span><span class="n">change_table</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>      <span class="n">m</span><span class="o">.</span><span class="n">ddl</span><span class="p">(</span><span class="s2">&quot;ALTER TABLE </span><span class="si">#{</span><span class="n">m</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> ADD COLUMN orders_count INT(11) default 0&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
</span><span class='line'>    <span class="no">Lhm</span><span class="o">.</span><span class="n">change_table</span><span class="p">(</span><span class="ss">:users</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>      <span class="n">m</span><span class="o">.</span><span class="n">ddl</span><span class="p">(</span><span class="s2">&quot;ALTER TABLE </span><span class="si">#{</span><span class="n">m</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> DROP COLUMN orders_count&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, unfortunately, this includes raw SQL. There is a <a href="http://rubydoc.info/github/soundcloud/large-hadron-migrator/master/Lhm/Migrator#add_column-instance_method">small DSL</a> that exposes a few common methods, but for anything really deep you&#8217;re gonna need to get your hands dirty. Using this method you&#8217;ll be able to become the envy of your friends and peers, for you&#8217;ll be able to execute zero downtime migrations.</p>

<p>And those three points are the main ways I&#8217;ve reduced our downtime. It&#8217;s a difficult road to 100%, but it&#8217;s worth it because you can stare at pretty graphs like this:</p>

<p><img src="http://f.cl.ly/items/470B350J0U0q1u3r0T0s/availability-1.jpg" alt="Better than Facebook" /></p>

<p>And imagine that your website and a 100% bar are sitting right at the very tippy top.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Scaled Hipstamatic]]></title>
    <link href="http://joshsymonds.com/blog/2012/04/06/how-i-scaled-hipstamatic/"/>
    <updated>2012-04-06T10:58:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/04/06/how-i-scaled-hipstamatic</id>
    <content type="html"><![CDATA[<p>The <a href="http://joshsymonds.com/blog/2012/04/03/how-to-refactor-a-large-and-old-project/">Proper Refactoring</a> proceeds apace, but I think in my last post I gave the impression that the Hipstamatic Rails project is inefficient or, even worse, slow. Nothing could be further from the truth; over the course of two years I&#8217;ve been continuously improving the project to be more responsive and much, much faster. How much faster? Well, unfortunately, I don&#8217;t have metrics from the first months I worked at Synthetic. But we were using XML and then plist to generate our responses to the iPhone app, and that process was achingly slow: I would estimate 200ms on average.</p>

<p>Now, take a look at our average response time over the last month.</p>

<p><img src="http://f.cl.ly/items/1H0v0C420X0a1O3Y2p3Y/Hipstaweb%20-%20New%20Relic-1.jpg" alt="Average response time - 115ms" /></p>

<p>Considering the web of external services Hipstamatic depends on for much of its operation, I&#8217;m proud of our 115ms average response time. Proud but not satisfied &#8211; hence the need for the Proper Refactoring, and I am optimistic that it will lead to a net performance gain for us and our users. There&#8217;s no reason we can&#8217;t achieve 50-70ms response times with better caching and slimmer applications.</p>

<p>Over the same time period that our response time has dropped, our user base has grown exponentially, and so too our traffic. At the beginning of my tenure at Synthetic our site was receiving close to 100,000 hits a day, and nearly all of that web traffic: now <a href="http://community.hipstamatic.com">community.hipstamatic.com</a> sees about a million requests a day, most of that API traffic generated from our iPhone applications. That&#8217;s an enormous amount of growth, and much of that over the course of just one or two explosive months.</p>

<p>Synthetic is <a href="http://heysynthetic.com/about_us/">a team</a> of extremely talented individuals. But as our main Rails programmer and only server administrator, I wanted to discuss the lessons I personally learned in making Hipstamatic&#8217;s web site and web services fast. (Or, at the very least, a lot faster.)</p>

<!-- more -->


<h2>Cache <em>Everything</em></h2>

<p>This is easily the most important, most crucial rule to making your applications fast. You&#8217;d be surprised what you can cache, and how much time caching will save. Memcached access times are ridiculously fast, faster even than the fastest database query. Stick everything in your cache. Everything. <em>Everything</em>.</p>

<p><img src="http://f.cl.ly/items/3f0J2M0H3o3h0w1X1i3m/cache-all-the-things.jpg" alt="Cache all the things" /></p>

<p>This is such an important rule I even gave you an annoying memegenerator image of it. Yes, people, it&#8217;s memegenerator important.</p>

<p>You really can&#8217;t go overboard enough when it comes to caching. Make resque jobs whose only purpose is to warm your caches. Use <a href="http://api.rubyonrails.org/classes/ActionController/Caching/Sweeping.html">cache sweepers</a> to sensibly and programmatically expire caches. Almost 90% of our application traffic returns the same (or very similar) JSON and HTML. By caching those responses, we save massive amounts of time, and more importantly, boatloads of money (due to lessened server load).</p>

<h2>Choose Your Tools Wisely</h2>

<p>Choose software that is frequently updated and widely used in the community. Choose software that is robust: by that I mean resistant to failure, and that has survived years of use in live, highly available environments. And finally and most importantly, choose software that is fast. Very, very fast.</p>

<p>Two years ago, we switched from a single, shared instance on A Small Orange to Amazon&#8217;s Elastic Cloud, allowing us to scale each of our components as necessary and independently from each other. Speed gains were noticeable immediately, but even better was the fact that there was a whole bunch of excellent software easily available to help us manage and scale our cloud presence. (See my earlier post <a href="http://joshsymonds.com/blog/2012/02/23/why-i-like-rubber/">on Rubber</a>).</p>

<p>One year ago, we migrated from Apache and Passenger to nginx and Unicorn. I don&#8217;t want to get into software evangelism or drawn out discussions about which server software is superior; for our stack, for our requirements, nginx and Unicorn are much faster and more memory efficient than Apache and Passenger ever were. And more responsive &#8211; the ability of Unicorn to do live deploys is just amazing and has totally revolutionized our development and deployment process.</p>

<p>Take the time and do the research. There&#8217;s a best tool for you waiting out there &#8211; finding it will make your life a thousand times easier.</p>

<h2>Less is More</h2>

<p>For a long time, incoming requests to the app were load balanced through <a href="http://haproxy.1wt.eu/">HAProxy</a> before reaching a Passenger instance. HAProxy is an amazing piece of software; it&#8217;s extremely fast and gives you an awesome drill-down into incoming requests and your server status.</p>

<p>It also added 10 milliseconds to our response times on average.</p>

<p>If a piece of your stack isn&#8217;t mission critical (and HAProxy, for us, was just a nice piece of software and not mission critical) then you should remove it. Amazing graphics and interesting metrics are less important than your response time. Examine your stack carefully, with a very critical eye, and whatever isn&#8217;t absolutely necessary I would strongly recommend cutting out entirely.</p>

<p>What I found helpful to do was draw a quick flow chart of how a request is actually serviced. Nothing that you intend to present to your boss; just a small approximation of your stack. Each step on that chain adds time to that request returning a response. If it adds time to the request turnaround, it needs to be adding something important to that response. Otherwise, it needs to go.</p>

<h2>Achieve Balance</h2>

<p>When we were extensively using <a href="http://redis.io/">redis</a> as a semi-persistent datastore, I constantly experienced bottlenecks for redis connections. But you can encounter this problem anywhere in your server setup: I also had to deal with MySQL bottlenecks and, in one extremely memorable instance, Unicorn queue bottlenecks. These are all issues with load balancing inside the stack.</p>

<p>There&#8217;s never a part of your stack that is immune to load balancing problems. Once you correctly scale one part, another component that performed adequately will suddenly start chugging under unexpected load or new use conditions. And, unfortunately, pre-optimization can backfire; sometimes you&#8217;ll target the wrong part of your stack for optimizations, and other times you&#8217;ll scale something that won&#8217;t experience a bottleneck at all.</p>

<p>I recommend against trying to pre-scale unless you&#8217;re sure that a new feature will distribute existing load in new, exciting ways. Achieving balance is an ongoing tightrope act &#8211; you can guess to a limited extent where you&#8217;ll tip after the next step, but you can never be sure until you actually take it. That&#8217;s why being sensitive to your application after changes is so important. Use <a href="http://newrelic.com/">New Relic</a> to monitor your setup very carefully, especially after deploys, and have plans in place to scale every component of your application if necessary.</p>

<p>Formal plans generally aren&#8217;t required, but know what steps you&#8217;d take if something started to fail. Even ten seconds of idle thought can save you agonizing minutes of unavailability.</p>

<h2>Use 75% of Every Server</h2>

<p>This rule applies doubly to servers on EC2. Instances that reach 100% memory or CPU utilization are instances that are very difficult to fix (and are much more prone to crashing in a shared environment). You can&#8217;t SSH into them because they take forever to respond; you can&#8217;t reboot them because they don&#8217;t respond to Amazon&#8217;s control plane. They are about to become horrible zombies in your setup, taking up space but refusing to die, and you&#8217;ll have to route around them to keep your uptime intact.</p>

<p>Try to ensure your servers never reach this stage. I try to keep my computers at either 75% CPU utilization or 75% memory utilization: achieving both simultaneously is a very difficult balancing act but if you can get there then I applaud you. (As a side note, this is why Heroku is so appealing to me &#8211; not needing to worry about maximizing your server resources sounds pretty awesome.)</p>

<p>If you&#8217;re using less than 75%, then you can likely combine services together and remove servers. And if you&#8217;re using more&#8230; well, I have <a href="http://www.pagerduty.com/">PagerDuty</a> configured to call me if at any time a server reaches 85% resource usage, and those are calls I take very seriously.</p>

<p>I&#8217;m sure I&#8217;ll think of other lessons I learned while scaling Hipstamatic. Many of these ideas are shared ideas &#8211; for example, the amazing <a href="http://samsoff.es/">Sam Soffes</a> initially encouraged us to move from Apache/Passenger to Nginx/Unicorn. However, the implementation and maintenance was mine and mine alone, and boy did I learn a lot while scaling Hipstamatic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Refactor a Large and Old Project]]></title>
    <link href="http://joshsymonds.com/blog/2012/04/03/how-to-refactor-a-large-and-old-project/"/>
    <updated>2012-04-03T10:06:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/04/03/how-to-refactor-a-large-and-old-project</id>
    <content type="html"><![CDATA[<p>The Rails application backing Hipstamatic is very, very large. It started over two years ago as a Rails 2.1 project, and has been continuously improved since then &#8211; moving to Rails 3.2, adding in redis and resque, and then adding in elasticsearch. During that time the database has bounced around continuously in size and importance as we move data from MySQL to data stores that are <a href="http://joshsymonds.com/blog/2012/03/25/elasticsearch-and-percolation-in-rails/">better suited for it</a>. And while at the start it handled only contests and submissions, since then we&#8217;ve added in orders, the family album, D-Series support, and even more exciting behind-the-scenes stuff.</p>

<p>And as you can imagine from a project that&#8217;s undergone continuous improvement for a long time, it&#8217;s kind of a mess. A lot of stuff was done without an eye towards our future needs, and, even more embarrassingly, a lot of stuff was done with a future need in mind &#8211; and, of course, that need never materialized, so the code is named or structured improperly.</p>

<p>The temptation with any project as large and old as this is to do <a href="http://chadfowler.com/2006/12/27/the-big-rewrite">the Big Rewrite</a>. I&#8217;ve been involved in a few of those, and my advice regarding them is quite simple:</p>

<!-- more -->


<h1>DON&#8217;T DO IT</h1>

<p>There are <a href="http://mentalized.net/journal/2010/10/04/avoiding_the_big_rewrite/">multiple</a> <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">articles</a> <a href="http://blog.objectmentor.com/articles/2009/01/09/the-big-redesign-in-the-sky">discussing</a> why the Big Rewrite is a horrible idea, and reiterating their excellent points here isn&#8217;t my intention. Instead I&#8217;m going to discuss the plan I&#8217;ve decided on for our own project, which I&#8217;m going to call, in lieu of the Big Rewrite, the Proper Refactoring.</p>

<p>Our Proper Refactoring will split our one monolithic application apart into a number of services, exposing their APIs for the happiness of our users while hiding the internals of their business logic from parts of the application that don&#8217;t care about it. If you want to follow along on our process (or do your own Proper Refactoring), I wrote down a quick summary of the three (well, four) simple stages that will take us from having one large working app to many small working apps!</p>

<ol>
<li><h3>Test it all first.</h3>

<p>This entire process is doomed to failure if your application isn&#8217;t tested. There&#8217;s no way you can achieve 100% test coverage, regardless of what <a href="https://github.com/colszowka/simplecov">SimpleCov</a> tells you &#8211; there&#8217;s always that quick fix you stuck in to fix a small problem that isn&#8217;t tested and won&#8217;t show up in any coverage report. But you need to get as close as humanly possible, because stuff will break (like that quick fix), and you can limit how much breakage occurs by testing everything you can before you start.</p>

<p>Happily, Hipstamatic is well tested, so step zero for us is pretty well completed. I still anticipate problems will occur as we make the change, and of course as I find code that isn&#8217;t adequately tested I&#8217;ll write tests for it&#8230; but both of those are unavoidable.</p></li>
<li><h3>Find breakpoints and map splits.</h3>

<p>Hipstamatic will be turning into five services: authentication, photos, contests, ordering, and D-Series cameras. Our main goal is to silo concerns apart from each other, making each part of the application more failure resistant and robust while allowing us to develop them all independently from each other if necessary. I&#8217;m not 100% settled on this separation of concerns, but the order that I listed them is the order I&#8217;ll be working on them. If it seems like something just has to be married to something else, I&#8217;ll combine them together and that&#8217;ll be that.</p>

<p>So if you&#8217;re doing this on your own project, split your application into units that are atomic enough that they can be changed independently from each other, but not so atomic that close couplings are undone. My benchmark for this is going to be if I have two projects open simultaneously and keep coding in the two of them in tandem, most likely they should be merged.</p></li>
<li><h3>Start copying and pasting.</h3>

<p>The fun part! Take the parts necessary for the one fragment you&#8217;re working on and merge them into one coherent project. Crucically, <em>don&#8217;t change anything except what&#8217;s absolutely necessary</em>. You&#8217;ll find code that you want to change, trust me. Just slap some TODOs on that baby and keep moving. It&#8217;s important that you change as little as possible, because the process is already breaking apart your nice pretty app. If you start changing the pieces once they&#8217;re broken, you&#8217;ll find they don&#8217;t fit back together quite right, and that will be an enormous headache to fix.</p></li>
<li><h3>Add relevant bits to the API Gem.</h3>

<p>For our web services to understand each other, and to prevent duplication of code, I&#8217;ll be extracting connector bits into a Gem that each application (and indeed any application that wants to consume our API) can use. It&#8217;ll most likely be heavily based on <a href="https://github.com/jnunemaker/httparty">httparty</a> since ActiveResource isn&#8217;t anywhere near as actively developed.</p></li>
</ol>


<p>And the split is complete! Of course it sounds pretty easy when you gloss over most of the hard work in step #2, but hey, the way to make complicated projects seem achievable is to reduce them into manageable steps. I intend to follow this road map like the Pope follows the Bible &#8211; that is, using the good parts and ignoring the rest. Zing! But I&#8217;ll report back in a future post to indicate how well these steps worked for me. Until then, wish me luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby in the Sandbox: SandRBox]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/31/ruby-in-the-sandbox-sandrbox/"/>
    <updated>2012-03-31T11:19:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/31/ruby-in-the-sandbox-sandrbox</id>
    <content type="html"><![CDATA[<p>I volunteer in the cyber center at the <a href="http://www.centeronhalsted.org/">Center on Halsted</a>. They&#8217;re always looking for people to teach new classes, so I figured I would teach an introduction to programming class &#8211; an introduction through Ruby. Besides being my favorite computer language, I think Ruby makes a great beginner&#8217;s language: it has none of the strange, computer-oriented concepts that make most programming languages difficult to learn, and it even reads like pure, simple English. Instead of pointers and variable typing, you have sensible enumerators and object orientation. And also it&#8217;s super fun.</p>

<p>Unfortunately, getting stuff installed on the computers at the cyber center is kind of a headache. Like most chronically underfunded but well-meaning institutions, there are about three levels of bureaucracy between you and getting anything done. And teaching Ruby without the aid of irb would be next to impossible. So what&#8217;s a guy to do?</p>

<p>Simple: <a href="http://sandrbox.herokuapp.com/">create irb online</a>.</p>

<!-- more -->


<p>Now, I hear what you&#8217;re saying: &#8220;Josh, that already exists, and it&#8217;s called <a href="http://tryruby.org/">tryruby.org</a>!&#8221; Unfortunately, I don&#8217;t like tryruby all that much. I have nothing but respect for their mission, but the service itself is achingly slow and frequently it won&#8217;t work at all. I don&#8217;t know what they&#8217;re running it on (the only code I could find on github was months old), but I figured I could whip up something better.</p>

<p><a href="https://github.com/Veraticus/Sandrbox">Turns out I was right</a>. Sandrbox is a simple project that I&#8217;m actually pretty proud of; it makes use of some very edge-case metaprogramming concepts to create as secure an irb environment as I could whip up. In addition to removing dangerous methods on classes (and their metaclasses), it has some really nice syntactical sugar that makes it easy to understand where you are in a block. And when the execution of your secure code is done, it restores all the classes and methods that were missing while removing any new ones that were added, guaranteeing that your environment will be exactly the same as before you started executing code.</p>

<p>This is obviously important if you intend to run that code on a server somewhere &#8211; after all, you can&#8217;t have someone doing something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">`killall -9 thin`</span> <span class="c1"># bad</span>
</span><span class='line'><span class="no">Kernel</span><span class="o">.</span><span class="n">exec</span><span class="p">(</span><span class="s2">&quot;rm -rf /&quot;</span><span class="p">)</span> <span class="c1"># worse</span>
</span></code></pre></td></tr></table></div></figure>


<p>These methods when executed in Sandrbox are instead gently sanitized:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Sandrbox</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;`killall -9 thin`&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">output</span> <span class="c1"># =&gt; [&quot;NameError: undefined local variable or method ``&#39; for Kernel:Module&quot;]</span>
</span><span class='line'><span class="no">Sandrbox</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;Kernel.exec(&quot;rm -rf /&quot;)&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">output</span> <span class="c1"># =&gt; [&quot;NameError: undefined local variable or method `exec&#39; for Kernel:Module&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>While still allowing you to retain the power and complexity of Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Sandrbox</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;class Foo&#39;</span><span class="p">,</span> <span class="s1">&#39;def test&#39;</span><span class="p">,</span> <span class="s1">&#39;&quot;Hi!&quot;&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="s1">&#39;Foo.new.test&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">output</span> <span class="c1"># =&gt; [nil, &#39;&quot;Hi!&quot;&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even cooler is that it automatically does some parsing for you, so that you know when code can be executed or the user is probably not done yet typing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="no">Sandrbox</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;class Foo&#39;</span><span class="p">,</span> <span class="s1">&#39;def test&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">output</span> <span class="c1"># []</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">complete?</span> <span class="c1"># false</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">indent_level</span> <span class="c1"># 2</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">indent_character</span> <span class="c1"># &#39;def&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I put a small Sinatra app in front of this and made a little site that I also called <a href="http://sandrbox.herokuapp.com/">Sandrbox</a>. I intend to use it in place of irb to teach this introduction to programming course &#8211; it&#8217;ll make a great tool for putting the power of Ruby in front of people while still being relatively assured that they can&#8217;t destroy my server (intentionally or accidentally). And the code is really pretty neat, so you should definitely <a href="https://github.com/Veraticus/Sandrbox">check out the repository</a>. I can&#8217;t say that it&#8217;s totally secure yet, but it&#8217;s a damn sight better than uncensored irb, and after a week or two of work I bet I&#8217;ll be able to get it locked down pretty damn tight.</p>

<p>But until then, go ahead and try to break it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delegation when Delegate Just Won't Work]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/28/delegation-when-delegate-just-wont-work/"/>
    <updated>2012-03-28T15:37:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/28/delegation-when-delegate-just-wont-work</id>
    <content type="html"><![CDATA[<p>Rails provides a really awesome ability to avoid <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a> violations &#8211; the <a href="http://apidock.com/rails/Module/delegate">Module#delegate</a> method. The Law of Demeter is an informal programming guideline, intended to make your code more obvious and more reusable: objects should only call methods on other objects, not objects of those objects. To provide a more concrete example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">address</span><span class="o">.</span><span class="n">street_address</span> <span class="c1"># Law of Demeter violation: @user should not reach into address!</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">street_address</span> <span class="c1"># So much better...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails, because it&#8217;s cool, provides a quick and easy pattern for making this work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:address</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:street_address</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:address</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">street_address</span> <span class="c1"># Calls address.street_address</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="http://apidock.com/rails/Module/delegate">delegate documentation</a> for more information on how this functionality works. But <a href="http://stackoverflow.com/questions/9914400/delegate-all-method-calls-on-a-model-to-an-association">a question I came across on Stack Overflow</a> today asked: what do you when you want to delegate all methods? I do <a href="https://github.com/Veraticus/Dynamoid/blob/master/lib/dynamoid/adapter.rb#L122">something similar in Dynamoid</a> and wanted to talk about how to make this pattern sensible and performant.</p>

<!-- more -->


<p>Essentially you have two options when delegation fails: the easy but less performant way, and the hard but more performant way. It&#8217;s always nice to have choices, right?</p>

<h2>The Easy Way</h2>

<p>The easy way uses <code>method_missing</code>. Method_missing, of course, is part of Ruby&#8217;s extensive metaprogramming suite; it is called when a method that doesn&#8217;t exist is invoked on an object. So, if you have an object (say our user from above) and you want to delegate all methods that it doesn&#8217;t have itself to its address, you would simply do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:address</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">address</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="k">if</span> <span class="n">address</span> <span class="o">&amp;&amp;</span> <span class="n">address</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works and will correctly send every method that can be called on an address to that address. Unfortunately, method_missing is slower than defining a method directly on the object, so every time you&#8217;re forced to use method_missing you&#8217;re added fractions of milliseconds to your application. This speed difference is usually imperceptible, but you never know: if you use this method_missing enough it could make a difference.</p>

<h2>The Hard Way</h2>

<p>So we have the hard way. This method is &#8220;harder&#8221; only in that you need to know the methods you want to delegate beforehand &#8211; in which case, why aren&#8217;t you using <code>delegate</code>? There is still a use for this method though: if you want to do something like benchmarking or argument recording before you delegate, you can do that easily here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:address</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="ss">:all</span><span class="p">,</span> <span class="ss">:my</span><span class="p">,</span> <span class="ss">:methods</span><span class="p">,</span> <span class="ss">:here</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>      <span class="n">address</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Dynamoid, we perform benchmarking in this method before sending the response along, allowing you to see how long the actual request took in DynamoDB.</p>

<p>Ultimately, you should use <code>delegate</code> if possible&#8230; but if it isn&#8217;t, then either of these two options should get you started to avoid programming unpleasantness. Don&#8217;t address your objects through other objects &#8211; your code will look better and be more maintainable if you take some time to isolate methods!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch and Percolation in Rails]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/25/elasticsearch-and-percolation-in-rails/"/>
    <updated>2012-03-25T11:39:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/25/elasticsearch-and-percolation-in-rails</id>
    <content type="html"><![CDATA[<p>Hipstamatic uses the pretty awesome Family Album feature for people to like and react to each others&#8217; photos. You can create either a magic album &#8211; an album that matches to a combination of criteria including accounts, geolocation, tags and descriptions &#8211; or a curated album, selecting photos directly that you want to include. The latter is a pretty straight-forward association and isn&#8217;t very interesting to talk about, but I wanted to discuss briefly the methods we used to implement magic albums and what we finally settled on. It involved a lot of setting up elasticsearch and percolation, and ultimately I think it&#8217;s a very durable, excellent solution for anyone wanting to index a lot of data and retrieve it extremely quickly.</p>

<!-- more -->


<p>Initially, magic albums were a set of complicated MySQL queries. I think anyone who&#8217;s had experience with indexes in an enormous MySQL database knows where this one is going&#8230; its performance was terrible, and as more people created more albums our RDS instance started really chugging. The worst part was we were spending enormous amounts of time, energy, and money invested in a small part of our application, and it was having a cascade effect through the database ruining the rest of the user experience.</p>

<p>As a stopgap measure, we switched to using Redis lists to hold the association but kept the actual index in MySQL. Recently though we migrated away from MySQL completely to an index storage called <a href="http://www.elasticsearch.org/">elasticsearch</a>. Elasticsearch is awesome because it&#8217;s built on Lucene, is incredibly easy to get going, and is very very powerful. I passed over search solutions like <a href="http://sphinxsearch.com/">Sphinx</a> and <a href="http://www.searchify.com/">Searchify</a> mostly because we aren&#8217;t doing any text searching: all of the queries albums perform on photos are controlled by direct, matched fields. We just needed a great, simple engine for indexing them constantly and pulling results out quickly &#8211; an engine that wouldn&#8217;t bring the rest of our stack down if there was an indexing failure or if we were bombarded with many simultaneous queries.</p>

<p>Elasticsearch has given us all that and more. Using the amazing <a href="https://github.com/karmi/tire">tire</a> gem, it was simple to get our photo model set up correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Photo</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Tire</span><span class="o">::</span><span class="no">Model</span><span class="o">::</span><span class="no">Search</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mapping</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="ss">:lat_lng</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:geo_point</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="ss">:account_id</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:date</span>
</span><span class='line'>    <span class="n">indexes</span> <span class="ss">:tags</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(The code here is changed slightly from its production form to redact business logic and simplify it.) Of course, the real magic takes place in the albums model. Albums are essentially saved queries, if you think about it: they should search for photos every time they&#8217;re called. So we have a method to generate the query we&#8217;re looking for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">elasticsearch_query</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">:terms</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:account_ids</span> <span class="o">=&gt;</span> <span class="n">query</span><span class="o">[</span><span class="ss">:accounts</span><span class="o">]</span><span class="p">}}</span> <span class="k">unless</span> <span class="n">query</span><span class="o">[</span><span class="ss">:accounts</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">:terms</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:tags</span> <span class="o">=&gt;</span> <span class="n">query</span><span class="o">[</span><span class="ss">:tags</span><span class="o">]</span><span class="p">}}</span> <span class="k">unless</span> <span class="n">query</span><span class="o">[</span><span class="ss">:tags</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">:range</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:created_at</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:from</span> <span class="o">=&gt;</span> <span class="n">query</span><span class="o">[</span><span class="ss">:starts_at</span><span class="o">]</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="n">query</span><span class="o">[</span><span class="ss">:ends_at</span><span class="o">]</span><span class="p">}}}</span> <span class="k">unless</span> <span class="n">query</span><span class="o">[</span><span class="ss">:starts_at</span><span class="o">].</span><span class="n">blank?</span> <span class="o">&amp;&amp;</span> <span class="n">query</span><span class="o">[</span><span class="ss">:ends_at</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">query</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">:geo_distance</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:lat_lng</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">query</span><span class="o">[</span><span class="ss">:lat</span><span class="o">].</span><span class="n">to_f</span><span class="p">,</span> <span class="n">query</span><span class="o">[</span><span class="ss">:lng</span><span class="o">].</span><span class="n">to_f</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">),</span> <span class="ss">:distance</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">query</span><span class="o">[</span><span class="ss">:range</span><span class="o">]</span><span class="si">}</span><span class="s2">km&quot;</span><span class="p">}}</span> <span class="k">unless</span> <span class="n">query</span><span class="o">[</span><span class="ss">:lat</span><span class="o">].</span><span class="n">blank?</span> <span class="o">||</span> <span class="n">query</span><span class="o">[</span><span class="ss">:lng</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">query</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are all, in elasticsearch parlance, filters rather than queries: queries must look into data fields and perform operations in them, whereas filters just filter on a fields&#8217; value directly&#8230; exactly what I was looking for. <code>terms</code> instructs the filter parser that at least one of the select elements must match. <code>range</code>, as you can see, allows us to pull only photos within a certain date. <code>geo_distance</code> is particularly cool and lets us filter all photos by their geographic location.</p>

<p>Using this couldn&#8217;t be simpler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">elasticsearch_photos</span>
</span><span class='line'>    <span class="n">finder</span> <span class="o">=</span> <span class="no">Photo</span><span class="o">.</span><span class="n">search</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">query</span> <span class="p">{</span> <span class="n">all</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">filter</span><span class="p">(</span><span class="ss">:and</span><span class="p">,</span> <span class="n">elasticsearch_query</span><span class="p">)</span> <span class="k">unless</span> <span class="n">elasticsearch_query</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">sort</span> <span class="p">{</span><span class="n">by</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="s2">&quot;desc&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">finder</span><span class="o">.</span><span class="n">results</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada! Easy and simple searching inside your models. The performance gain for us was massive; elasticsearch has a ridiculously small memory footprint, but consistently returns responses to us in 50-60 milliseconds. Now that&#8217;s performance!</p>

<p>Many of you might be wondering, though, how we get the reverse of this association. Albums have many (searched) photos; how does a photo know what album it&#8217;s in? This was a stumbling block for the other search solutions I investigated, and I was concerned I would have to bust out the old, gimpy MySQL.</p>

<p>But elasticsearch to the rescue! It employs a very neat feature called <a href="http://www.elasticsearch.org/blog/2011/02/08/percolator.html">the percolator</a>. Percolation allows us to save searches as an index themselves, and then determine what objects match any of the saved searches. So, we save the search an album would conduct along with the album&#8217;s ID into the photo percolator; then we can determine what queries a photo matches when we save it. It&#8217;s really quite ingenuous and was, of course, ridiculously easy to set up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Album</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">after_save</span> <span class="ss">:register_query</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">register_query</span>
</span><span class='line'>    <span class="no">Photo</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">register_percolator_query</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span>
</span><span class='line'>      <span class="n">q</span><span class="o">.</span><span class="n">filtered</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">query</span> <span class="p">{</span><span class="n">all</span><span class="p">}</span>
</span><span class='line'>        <span class="n">filter</span><span class="p">(</span><span class="ss">:and</span><span class="p">,</span> <span class="n">elasticsearch_query</span><span class="p">)</span> <span class="k">unless</span> <span class="n">elasticsearch_query</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This uses the same <code>elasticsearch_query</code> method as above (of course, since we want to save the same query into the database). And on the photo model, to use it, we just do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Photo</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">percolated_albums</span>
</span><span class='line'>    <span class="no">Album</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="no">Photo</span><span class="o">.</span><span class="n">index</span><span class="o">.</span><span class="n">percolate</span><span class="p">(</span><span class="nb">self</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was a rather whirlwind tour, but I was really impressed at how easy it was to get elasticsearch set up properly. It really has added quite a lot to our stack and I look forward to using it on other domain problems (maybe even including full text search)! It was pretty easy to get it tested as well, but I think I&#8217;ll save details on how I did that for another post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Don't Use Haml]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/22/why-i-dont-use-haml/"/>
    <updated>2012-03-22T13:19:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/22/why-i-dont-use-haml</id>
    <content type="html"><![CDATA[<p>I initially thought of titling this post something more inflammatory, like &#8220;Why Haml Sucks&#8221; or &#8220;Only Losers Use Haml.&#8221; But the truth is <a href="http://haml-lang.com/">Haml</a> does anything but suck. It&#8217;s actually quite elegant; the syntax is clean, not needing closing tags is just really cool, and it&#8217;s very fast to read. It seems like it would be an ideal language to replace HTML, just like SASS and CoffeeScript are abstractions of and (to a certain extent) replacements for CSS and JavaScript, respectively.</p>

<p>So why do I bang my head against my desk every time I see someone using it in a view?</p>

<!-- more -->


<h2>Indentation Sucks (Usually)</h2>

<p>Notice the cute little parenthetical up there? That&#8217;s because I really do like CoffeeScript, which is just as whitespace-sensitive as Haml. So what&#8217;s the difference?</p>

<p>CoffeeScript uses indentations to abstract away one of the worst &#8220;features&#8221; of JavaScript: the dreaded <code>})</code> sequences. Closing arguments and functions again and again is not only a headache, it happens so frequently that some sort of error is inevitable. Strict whitespace rules help us avoid errors in closure. Of course, the same argument can be made about HTML and Haml&#8217;s whitespace rules, but there&#8217;s another key difference here.</p>

<p>HTML closures indicate which tag they close. You don&#8217;t have a forest of <code>)})})}</code>, which even if you indent correctly still won&#8217;t tell you which parenthesis or bracket they&#8217;re closing. Instead you have an obvious and syntactic declaration of which tag you&#8217;re ending when you end it. You can argue that the tag closure is unnecessary (Haml seems largely based on this argument), but you&#8217;re trading explicit tag closure for explicit whitespace restrictions&#8230;</p>

<p>And ultimately (and most damningly), whitespace restrictions make the document harder to read and understand than closing tags. If you have an extremely long page with many nested elements, Haml is very difficult to comprehend and consequently much harder to use.</p>

<h2>If It Ain&#8217;t Broke&#8230;</h2>

<p>SASS and CoffeeScript fix serious errors and oversights in the implementations of their specific languages. CoffeeScript ensures correct lexical scoping of variables; SASS allows variable assignment and better selectors than CSS. Both are enormous improvements on the languages they compile into.</p>

<p>Haml doesn&#8217;t add anything at all to HTML. There&#8217;s no special Haml tags that do something HTML couldn&#8217;t do by itself. It gives you a shortcut for the syntax, but that&#8217;s essentially it.</p>

<p>And HTML really isn&#8217;t that bad by itself. The syntax is already fairly clean and clear; it&#8217;s not like we&#8217;re lost in a field of, well, parenthesis and curly brackets. Tables can get a little muddy at times, but good HTML and CSS prevent documents from becoming unreadable &#8211; and Haml doesn&#8217;t offer any interesting or unique tools to improve readability, either.</p>

<h2>Designers Aren&#8217;t Programmers</h2>

<p>But I think this is the biggest reason I don&#8217;t use Haml. Frontend designers use CSS, and the best ones employ JavaScript (and program good JavaScript!) &#8211; but every single one is going to be using HTML to create their pages. Eventually, if your site gets big, you&#8217;re going to want a designer to do some pages for you&#8230; and they&#8217;re not going to be producing Haml, they&#8217;re going to be producing HTML.</p>

<p>Sure, you can change that HTML to Haml. But let me guarantee you, one day they&#8217;ll want to change something, and at that point you do one of three things:</p>

<ol>
<li>Show them the Haml site, tell them to do it all in Haml, and pay for them learning it.</li>
<li>Take their design and convert it to Haml yourself and then incorporate it into the page.</li>
<li>Curse your unjust fate and just switch to erb and copypaste their changes in.</li>
</ol>


<p>As I said at the beginning, I like Haml. But it&#8217;s a markup language for programmers, and ultimately the people who use HTML the most aren&#8217;t programmers. SASS is barely a programming language, more like a set of syntactical shortcuts; and CoffeeScript appeals to those who program in JavaScript already. Haml just doesn&#8217;t appeal to the correct audience to use its core feature set, which is a damn shame, because Haml really is pretty cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sweeping Caches from Resque (or Anywhere Really)]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/19/sweeping-caches-from-resque-or-anywhere-really/"/>
    <updated>2012-03-19T10:29:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/19/sweeping-caches-from-resque-or-anywhere-really</id>
    <content type="html"><![CDATA[<p>Phil Karlton, someone I can only presume is a pretty smart programmer, said <a href="http://martinfowler.com/bliki/TwoHardThings.html">&#8220;there are only two hard things in Computer Science: cache invalidation and naming things.&#8221;</a> He&#8217;s totally right; cache invalidation is one of the biggest headaches when designing highly usable, highly available websites and is something that I&#8217;m sure every Rails programmer worth their salt has struggled with. (Naming things is also a pain but not the focus of this post.)</p>

<!-- more -->


<p>And unfortunately the reason for the struggle is that Rails&#8217; caching tools don&#8217;t go nearly as far as they should. This is really through no fault of their own; honestly, Rails&#8217; caching methods are amazingly robust, and if you don&#8217;t know what they are, you should read <a href="http://guides.rubyonrails.org/caching_with_rails.html">the guide</a> on them. But good tools can only take you so far. Ultimately, caching is as application-specific as you can get, and when you get to finely-grained control you have to take the reins yourself.</p>

<p>One of the problems I ran into recently was invalidating caches during an association join. I have two models, album and photo, and when one is added to the other I wanted to expire all the caches dealing with both. I already have <a href="http://api.rubyonrails.org/classes/ActionController/Caching/Sweeping.html">cache sweepers</a> in my application, but callbacks aren&#8217;t triggered on association. And putting something in an after_add on the association itself didn&#8217;t seem like the right answer; why should I put cache expiration stuff in my model when I already have sweepers dedicated to that logic?</p>

<p>I&#8217;m not sure I&#8217;m in love with the solution I came up with, but it certainly seems to work. All of the association logic happens in Resque jobs, so I added the cache invalidation directly to this jobs by invoking the sweeper manually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">PhotoSweeper</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">expire_cache_for</span><span class="p">(</span><span class="n">photo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>send</code> business is necessary because new is a private method for sweepers. Nevertheless this really seems to get the job done; the caches are swept appropriately, and my cache invalidation logic remains safely in the sweepers, where I can add or edit it as much as I want. I suppose if I really wanted to I could put this in an after_add on the model as well. I&#8217;ve resisted that so far but maybe it&#8217;s the logical place for this kind of expiration logic to happen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classifying and Refactoring Your Code]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/16/classifying-and-refactoring-your-code/"/>
    <updated>2012-03-16T00:39:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/16/classifying-and-refactoring-your-code</id>
    <content type="html"><![CDATA[<p>Outside of the guiding framework of Rails, it can be difficult to manage your own Ruby code, as I&#8217;ve discovered in the process of creating <a href="https://github.com/Veraticus/Dynamoid">Dynamoid</a>. MVC provides a clear and concise framework that encapsulates the functionality of most web applications really well; but outside of web applications, exactly where and how to put your code is a lot less clear. I thought I&#8217;d share some of my experiences and thoughts on doing this in my own Gem in the hopes that the lessons I&#8217;ve learned will aid others.</p>

<!-- more -->


<h2>Hashes = Objects</h2>

<p>In the earlier iterations of Dynamoid, I was passing around almost everything in hashes, and the calculations I was performing on those hashes was growing more and more complicated as I went, with logic flying around my files like a flock of disorganized birds. When I was putting index logic into criteria chains, I realized that keeping indexes as hashes was an enormous mistake&#8230; and one I wish I had realized earlier.</p>

<p>As I was refactoring my code I realized that I pass hashes around in a number of places. Hashes work well initially to store small amounts of data, but if you&#8217;re using them for that purpose you almost certainly want a real object instead. Just whip that hash apart into a class and you&#8217;ll be surprised how much code will go in there, and how much simpler your application will be for your trouble.</p>

<h2>Refactor Early, Refactor Often</h2>

<p>I tend to be my own harshest critic, but honestly, my first pass at features tends to be messy at best. I make my tests pass (always test first, btw, but that&#8217;s so fundamental I&#8217;m not going to include it as a point) but usually in the most complicated, slowest, unpleasant way possible. Take some time after the tests pass to stare at your code a bit and decide if that&#8217;s really the best way to go about doing things. Usually a change will jump out at you immediately, but don&#8217;t be afraid to just come back to the code later if nothing presents itself.</p>

<p>Tests allow you to do this kind of refactoring free of charge. I always imagine tests as the scaffolding around my code; no matter how tall the code gets, with the scaffolding it&#8217;ll never fall over.</p>

<h2>Document!</h2>

<p>I&#8217;m really bad at this one myself, but I&#8217;m going to be going back through Dynamoid in the very near future and adding documentation to all my methods. Even if your code is a one-liner, people will read documentation over code every time. So document that code! Especially in a collaborative environment, documentation is critical for making your project easy to contribute to.</p>

<p>I&#8217;m sure other things will pop out at me after some thought, but these are the biggest takeaways Dynamoid has given me. Hopefully they&#8217;ll be of use to someone else as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fnordmetric: Native Rails Metrics]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/13/fnordmetric-native-rails-metrics/"/>
    <updated>2012-03-13T22:05:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/13/fnordmetric-native-rails-metrics</id>
    <content type="html"><![CDATA[<p>Over the weekend I spent some time getting <a href="https://github.com/paulasmuth/fnordmetric">Fnordmetric</a> set up in an application. On the surface it looks really cool and quite nifty, but I ran into some trouble getting it configured how I wanted it and figured I&#8217;d make a post about it. I think I might have been struggling against the conventions in it a little too much, but it was still an instructive battle.</p>

<!-- more -->


<h2>Engineize It</h2>

<p>The Gem itself assumes you&#8217;ll be running it on its own port, presumably redirecting nginx traffic there. But this is 2012 and Rails engines are all the rage &#8211; so why bother with a separate app? Well, I&#8217;ll get to the reason why later, but mounting it as an engine is pretty simple.</p>

<p>Set up an initializer or something that defines all the Fnord metrics you want, something like <code>config/initializers/fnord.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;fnordmetric&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">FnordMetric</span><span class="o">.</span><span class="n">namespace</span> <span class="ss">:analytics</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gauge</span> <span class="ss">:events_total</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:tick</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">to_i</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:progressive</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;Events (total)&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">event</span><span class="p">(</span><span class="ss">:&quot;*&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">incr</span> <span class="ss">:events_tota</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">FnordMetric</span><span class="o">.</span><span class="n">server_configuration</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:redis_url</span> <span class="o">=&gt;</span> <span class="s2">&quot;redis://localhost:6379&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:redis_prefix</span> <span class="o">=&gt;</span> <span class="s2">&quot;fnordmetric&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:inbound_stream</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="s2">&quot;1339&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:start_worker</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:print_stats</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:event_queue_ttl</span> <span class="o">=&gt;</span> <span class="mi">120</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:event_data_ttl</span> <span class="o">=&gt;</span> <span class="mi">3600</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">30</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:session_data_ttl</span> <span class="o">=&gt;</span> <span class="mi">3600</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">30</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That stuff is copy-pasted from the Github README, so I won&#8217;t go into explaining it. Note that we do not include FnordMetric.standalone at the bottom, however; we&#8217;ll be mounting the server ourselves in routes.rb like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">mount</span> <span class="no">FnordMetric</span><span class="o">.</span><span class="n">embedded</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s2">&quot;/fnord&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can go to localhost:3000/fnord, and tada! Fnord metrics!</p>

<h2>Set Up a Worker</h2>

<p>The difficult, of course, is that each instance of your app will now also spin up its own instance of a FnordWorker, which might not be what you want. I got around this by altering my config/initializers/fnord.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FnordMetric</span><span class="o">.</span><span class="n">server_configuration</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:redis_url</span> <span class="o">=&gt;</span> <span class="s2">&quot;redis://localhost:6379&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:redis_prefix</span> <span class="o">=&gt;</span> <span class="s2">&quot;fnordmetric&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:inbound_stream</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="s2">&quot;1339&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:start_worker</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span> <span class="o">||</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FNORD_WORKER&#39;</span><span class="o">]</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span><span class="p">),</span>
</span><span class='line'>  <span class="ss">:print_stats</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:event_queue_ttl</span> <span class="o">=&gt;</span> <span class="mi">120</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:event_data_ttl</span> <span class="o">=&gt;</span> <span class="mi">3600</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">30</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:session_data_ttl</span> <span class="o">=&gt;</span> <span class="mi">3600</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">30</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know some people hate the ternary operator, but I kind of like it. Anyway, this causes the worker to start only if there&#8217;s an environment variable set to start it or the Rails environment is development. I set up one instance that receives this variable when it starts, and now I only have one worker. Simplicity itself!</p>

<p>Ultimately, I like Fnordmetric, but I&#8217;m not using it in my production applications. I feel like there&#8217;s a level of abstraction to go before it&#8217;s really usable in big production apps. It&#8217;s much better at tracking arbitrary metrics than NewRelic &#8211; honestly, trying to shoehorn stats into their system feels silly at times &#8211; but setting up the tracking stuff is a pain, involving a lot of unnecessary repetition. I think that a Fnordmetric2.0 would be awesome, though, so I hope the project sees more love and work. And who knows, if I have some time I&#8217;ll try contributing to it myself. That&#8217;s the joy of open source: if you have a good idea, you make it happen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3: Arel, Arel_Table, and Squeel]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/10/rails-3-arel%2Carel_table%2C-and-squeel/"/>
    <updated>2012-03-10T10:17:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/10/rails-3-arel,arel_table,-and-squeel</id>
    <content type="html"><![CDATA[<p>Rails 3 provides a lot of really neat functionality, and one of the pieces that looked coolest was Arel &#8211; ActiveRecord&#8217;s own relational algebra. Finally, we could get rid of SQL in queries and use a clear, syntactic DSL to manage our queries!</p>

<p>Well, in reality, that isn&#8217;t quite what happened. ActiveRecord&#8217;s Arel functionality does provide some neat criteria chaining methods, but unfortunately you either end of typing a lot of raw SQL:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Model</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s2">&quot;sum(model.column) as &#39;model_sum&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at</span>
</span><span class='line'><span class="s2">DESC&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;models.created_at &gt; ?&quot;</span><span class="p">,</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or using unpleasant workarounds to address the underlying Arel for the model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Model</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="no">Model</span><span class="o">.</span><span class="n">arel_table</span><span class="o">[</span><span class="ss">:title</span><span class="o">].</span><span class="n">matches</span><span class="p">(</span><span class="s1">&#39;%foo%&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just kinda ugly. Happily, there&#8217;s a Gem that addresses this problem called <a href="https://github.com/ernie/squeel">squeel</a> that makes Arel what, in my mind, it should be. It provides an elegant, simple syntax for creating and managing queries that is sensibly divorced both from the underlying Arel and raw SQL of the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Model</span><span class="o">.</span><span class="n">where</span><span class="p"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Much easier to understand! The double-curly braces does kind of suck (this is because it&#8217;s a hash inside a proc) but it&#8217;s still a fair but more understandable than the default Arel stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 Awesomeness Part 1: SecureRandom]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/07/ruby-1-dot-9-awesomeness-part-1-securerandom/"/>
    <updated>2012-03-07T19:07:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/07/ruby-1-dot-9-awesomeness-part-1-securerandom</id>
    <content type="html"><![CDATA[<p>Ruby 1.9 includes a lot of neat stuff, and one of the coolest things is the SecureRandom module.</p>

<p>SecureRandom presents a plethora of useful methods for creating random numbers and strings. You can <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/securerandom/rdoc/SecureRandom.html">check out the documentation</a> for a full list, but some of the more personally useful methods I&#8217;ve found are:</p>

<!-- more -->


<ul>
<li><h3>SecureRandom#uuid</h3>

<p><a href="https://github.com/Veraticus/Dynamoid">Dynamoid</a> uses this method to generate random IDs for objects. The resulting random number is supposed to be unique across an enormously large namespace (see the <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a> spec for details) and is perfect if you need a universally unique number&#8230; say, for generating IDs in a database.</p></li>
<li><h3>SecureRandom#urlsafe_base64</h3>

<p>If you&#8217;re creating a URL shortener then this method will end up being incredibly useful. The resulting string only includes characters that are URL safe (as the method name suggests), and while the string is not as unique as one generated by UUID, it will still be fairly random. Guaranteeing uniqueness across an application with a small loop would still probably be a wise idea though:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">permalink</span> <span class="o">=</span> <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">permalink</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">urlsafe_base64</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>  <span class="k">break</span> <span class="n">permalink</span> <span class="k">unless</span> <span class="no">Model</span><span class="o">.</span><span class="n">find_by_permalink</span><span class="p">(</span><span class="n">permalink</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h3>SecureRandom#base64</h3>

<p>As above, except that +, /, and = are included in the output. The addition of three more characters significantly improves the randomness of this method, though, so use it when the resulting string doesn&#8217;t need to be in a URL.</p></li>
</ul>


<p>Regardless of what you&#8217;re working on, the new SecureRandom stuff will end up being incredibly useful for you. Go <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/securerandom/rdoc/SecureRandom.html">check out the documentation</a> to see some of the other neat stuff it includes!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Mess With Primary Keys]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/04/dont-mess-with-primary-keys/"/>
    <updated>2012-03-04T19:11:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/04/dont-mess-with-primary-keys</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/users/1224374/veraticus">I really like answering questions on Stack Overflow</a> &#8211; it&#8217;s like a trivia game that you win by knowing Rails backwards and forwards, but instead of cheesy prizes you get awesome reputation points! And also little badges!</p>

<p>Recently I&#8217;ve been seeing a lot of beginner-style questions, and the most popular has definitely been some variant of &#8220;how do I mess with the primary key column?&#8221;</p>

<p>The answer is always, invariably, the same: don&#8217;t.</p>

<!-- more -->


<p>It might seem sensible to tuck some sort of business logic away into your primary key. Just earlier today, <a href="http://stackoverflow.com/questions/9558715/changing-models-id-type-from-integer-to-decimal-makes-all-entries-try-to-be-0-0/9558832#9558832">I answered a question</a> from a guy who wanted to turn his primary key column into a decimal, and have the part before the decimal be equal to the primary key of another table &#8211; so you&#8217;d have 75.001 and 75.002, with 75 being the primary key of the orders table. A cute idea for a new column like order_number or something like that, but just a plain awful idea for a primary key.</p>

<p>Primary keys, when you get right down to it, are database artifacts. They&#8217;re useful because they allow databases to expose powerful relations for our data: without a way for databases to reference individual rows that are guaranteed to be unique, even the most basic joins would be impossible. And because they&#8217;re important for databases, the assumption seems to be that they&#8217;re important for people too.</p>

<p>Part of this is Rails&#8217; fault. By exposing URLs with primary keys by default (like users/4), one would automatically assume that the primary key is important data for a user to know (your key is 4 and that&#8217;s important!). In reality nothing could be further from the truth: the ID for a user is arbitrary database-internal logic and has no business facing users at all. I wish Rails going forward came bundled with the really awesome <a href="https://github.com/norman/friendly_id">FriendlyId</a> Gem that makes some unique database column appear to your internal application logic as the real ID for that table. Then you&#8217;d have URLs like users/josh, and that both looks better and obfuscates the primary key.</p>

<p>As a sidenote, this is why UUID-based keys like <a href="http://www.mongodb.org/display/DOCS/Object+IDs">MongoDB&#8217;s</a> and <a href="https://github.com/Veraticus/Dynamoid">Dynamoid&#8217;s</a> are rather nifty &#8211; they make really ugly ID-based URLs by default so force you to choose a better column to use as a URL slug.</p>

<p>The problem with all this attention on the primary key is that, invariably, people want to change it. Changing primary keys is awful. It will disassociate data all throughout your database, it messes with table autoincrementing&#8230; it will lead to problems right at the moment, and even more down the road you won&#8217;t even foresee. Or even worse, you&#8217;ll want to choose something nonstandard as a primary key (or not choose one at all) &#8211; and you&#8217;ll want to perform a join and be forced to deal with the consequences of your decision. Hint: they won&#8217;t be pretty.</p>

<p>So do yourself a favor. View the ID column as what it really is: an internal database construction. It should be an auto-incrementing integer, no excuses. If you want any kind of business logic, make a new column for it and manage it separately. You&#8217;ll be glad you did, I promise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working Around DynamoDB's Limitations]]></title>
    <link href="http://joshsymonds.com/blog/2012/03/01/working-around-dynamodbs-limitations/"/>
    <updated>2012-03-01T12:54:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/03/01/working-around-dynamodbs-limitations</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been giving a lot of thought recently to working around DynamoDB&#8217;s built-in limitations. Like most good web products (and I do believe DynamoDB is good), it uses a <a href="http://uxmag.com/articles/less-is-better">less is better</a> approach: but in a database, less is surprising and can make it difficult for people to transition from their existing, fully-featured solutions to a cheaper, faster, but simpler product.</p>

<p>Nevertheless, I think you can still do a lot with DynamoDB, and I think the key is using tools targeted specifically towards its shortcomings: lack of indexing and transactional support. Today I&#8217;ll talk a little about overcoming the indexing problem, since I&#8217;m still noodling around the transaction issue.</p>

<!-- more -->


<p>Amazon itself recommends non-flattened data in place of traditional indexes: replicate the data you&#8217;re modeling in many tables, and search those tables by the hash and range key to find the data you want. This is kind of a pain to do manually, but (shameless self-promotion!) happens automatically with awesome gems like <a href="https://github.com/Veraticus/Dynamoid">Dynamoid</a>.</p>

<p>There are, of course, downsides. A single table with multiple indexes can potentially become dozens of tables&#8230; but happily DynamoDB allows each account 256 tables by default, and you can request even more capacity by just asking them. Another is making sure that data remains consistent across all your index tables, which is a pain to do by hand but relatively easy when automated.</p>

<p>This still doesn&#8217;t allow really complex indexed operations &#8211; you can find by email and name, for example, but you can&#8217;t find by geolocation. For problems like this, we return to the idea of using existing tools: and for Rails, using Solr through the excellent <a href="https://github.com/sunspot/sunspot">Sunspot</a> Gem would be my solution of choice. It provides easy and quick geospatial indexing, and indeed, searching on any kind or combination of indexes&#8230; far more than DynamoDB can easily provide or accomplish alone.</p>

<p>Unfortunately, it does require another database (of sorts) in addition to DynamoDB&#8230; and I can see the potential for geospatial indexing using DynamoDB&#8217;s range keys in clever ways. But using existing tools to supplement the shortcomings of others is a pretty classy strategy, and would work really well in DynamoDB&#8217;s case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Unicorn in a Production Environment]]></title>
    <link href="http://joshsymonds.com/blog/2012/02/27/setting-up-unicorn-in-a-production-environment/"/>
    <updated>2012-02-27T10:20:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/02/27/setting-up-unicorn-in-a-production-environment</id>
    <content type="html"><![CDATA[<p>Configuring unicorn for your Rails servers is as much an art as it is a science.</p>

<p>That said, there are some things that make the configuration and setup a lot easier that I wish I had known before I had taken the unicorn plunge.</p>

<!-- more -->


<h2>worker_processes</h2>

<p>I searched high and low for a guide on how many workers each of my unicorns should employ and came up empty-handed. Unfortunately, this is highly dependent on your application. If you do complicated ImageMagick or PDF transformations on your server threads (which you shouldn&#8217;t with unicorn, but hey, who knows) then your threads will use a lot of memory, especially on those operations. For reference, our Rails app takes up about 25 megabytes of memory per worker. However, we have offloaded all of our long-running and memory-intensive tasks into Resque.</p>

<p>We use EC2&#8217;s m1.xlarge instance class and have 30 workers running per server. This number is intentionally set low; in my experience, the closer you come to maximum resource usage in an EC2 instance, the more likely it is to crash, or even worse become unresponsive.</p>

<h2>working_directory</h2>

<p>This should be fairly straightforward but has an important caveat: make sure to make this the static path of your current deploy, so the actual target of your symlink. Ours is <code>'/our/app/directory/current'</code>. Putting fanciness in here is very likely to get you shot in the foot with unicorn not reloading your app correctly, so I can&#8217;t stress enough, just make this a simple string.</p>

<h2>listen</h2>

<p>Our backlog is set to 64. If a unicorn has 64 queued connections likely it&#8217;s dead and we need failover to happen immediately; nginx takes care of that when unicorn refuses to service a request.</p>

<h2>preload_app</h2>

<p>true.</p>

<h2>Gemfile</h2>

<p>We had an issue where unicorn wouldn&#8217;t pick up our Gemfile correctly. Turns out that it doesn&#8217;t understand symlinked directories for reading gemfiles, so we had to employ this dazzling bit of code to get new gems into our bundle when the unicorns restarted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_exec</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>  <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BUNDLE_GEMFILE&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;/mnt/Hipstaweb-&lt;%= RUBBER_ENV %&gt;/current/Gemfile&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>before_fork and after_fork magic</h2>

<p>If you&#8217;re seriously considering unicorn, I&#8217;m sure you&#8217;ve seen the following gisted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'>  <span class="n">defined?</span><span class="p">(</span><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">)</span> <span class="ow">and</span>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">disconnect!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">old_pid</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">server</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="ss">:pid</span><span class="o">]</span><span class="si">}</span><span class="s2">.oldbin&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">server</span><span class="o">.</span><span class="n">pid</span> <span class="o">!=</span> <span class="n">old_pid</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="s2">&quot;QUIT&quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ENOENT</span><span class="p">,</span> <span class="no">Errno</span><span class="o">::</span><span class="no">ESRCH</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<p>But just to reinforce how awesome it is: this configuration is awesome. It allows your new unicorn to gracefully kill the old master while a new one seamlessly reloads. This is the key to one of unicorn&#8217;s biggest selling points &#8211; zero downtime deploys.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'>  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span>
</span><span class='line'>  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">verify_active_connections!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you include the <code>connection.disconnect!</code> line in your before_fork, make sure you reestablish the connection in your after_fork. This prevents stale database connections and ensures each worker is always correctly connected to the database.</p>

<p>(As a postscript to this post: your unicorn servers are required to have <a href="http://en.wikipedia.org/wiki/List_of_My_Little_Pony:_Friendship_Is_Magic_characters">My Little Pony</a> server names.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Like Rubber]]></title>
    <link href="http://joshsymonds.com/blog/2012/02/23/why-i-like-rubber/"/>
    <updated>2012-02-23T13:30:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/02/23/why-i-like-rubber</id>
    <content type="html"><![CDATA[<p>When I was analyzing tools to deploy applications into Amazon&#8217;s elastic cloud, I settled on <a href="https://github.com/wr0ngway/rubber">rubber</a> as our EC2 provisioner of choice.</p>

<p>rubber has a lot going for it. It provides simple, close-to-the-metal server creation and bootstrapping; it&#8217;s super easy to start a server with nothing more than:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap rubber:create <span class="nv">ALIAS</span><span class="o">=</span>fluttershy <span class="nv">ROLES</span><span class="o">=</span>unicorn
</span></code></pre></td></tr></table></div></figure>


<p>And bootstrap it with all the software needed for that role with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap rubber:bootstrap <span class="nv">FILTER</span><span class="o">=</span>fluttershy
</span></code></pre></td></tr></table></div></figure>


<p>Of course, looking at command line magic doesn&#8217;t tell you anything about how hard or easy it is to initially configure, but rubber is also pretty easy to figure out and get running. When you initially rubber-ize your project, you get an entire directory in config/ called rubber that contains all the configuration files, separated by role, that you can browse to figure out exactly what rubber is doing.</p>

<p>It&#8217;s easy to extend, as well. Adding in hubot scripts to automatically start and stop our little Hipstabot was really painless and will make a good future post, I&#8217;m sure. The good part &#8211; for me at least &#8211; is how close it is to the servers and how well it ties in with Capistrano. There&#8217;s no magic going on and there&#8217;s almost nothing to learn: as long as you have an EC2 account, you can set up a server quickly and painlessly with rubber&#8230; but if you know what you&#8217;re doing, it provides an immense amount of flexibility and power to deploy whatever you want in a simple, repeatable way.</p>

<p>rubber isn&#8217;t just happiness and unicorns, though; it has some definite downsides. It seems to have a lot less mindshare than tools like Chef or Puppet, and because it&#8217;s deployed on a per-application basis, it can&#8217;t easily manage multiple applications deployed onto one machine. But despite these problems I like it a lot, and it perfectly suits our present use case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamoid: An ORM for Amazon's DynamoDB]]></title>
    <link href="http://joshsymonds.com/blog/2012/02/22/dynamoid-an-orm-for-amazons-dynamodb/"/>
    <updated>2012-02-22T15:00:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/02/22/dynamoid-an-orm-for-amazons-dynamodb</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/Veraticus/Dynamoid">Dynamoid</a> is (another) gem I developed, but I think it&#8217;s a lot more exciting than <a href="http://github.com/Veraticus/rapnd">rapnd</a>! I started work on it over Christmas but didn&#8217;t really get a lot of opportunity to focus on it again until recently, when work become relatively less busy.</p>

<p>Dynamoid owes a lot to <a href="https://github.com/mongoid/mongoid">Mongoid</a> &#8211; it&#8217;s essentially trying to be for DynamoDB what Mongoid is for MongoDB. Unfortunately, it doesn&#8217;t really do a whole lot of exciting stuff yet&#8230;</p>

<p>But it will soon! The TODO list is particularly exciting:</p>

<ul>
<li>Association magic: The standard fare like belongs_to, has_many, habtm.</li>
<li>Automatic value separation and joining: Values for DynamoDB keys are limited to 64KB, but with a clever framework we can get around that constraint with multiple keys conjoined together.</li>
<li>Automatic key distribution: As per <a href="http://docs.amazonwebservices.com/amazondynamodb/latest/developerguide/BestPractices.html">Amazon&#8217;s provisioned throughput guidelines</a>, keys that are frequently accessed incur a throughput penalty due to traffic concentration. Dynamoid will distribute keys that you specify across a number of duplicated keys, and will concatenate them together when read.</li>
<li>Not-gimpy finders: Criteria like you&#8217;re used to with ActiveRecord, so that you can do User.where(:name => &#8216;Josh&#8217;) rather than User.find_by_name(&#8216;Josh&#8217;).</li>
<li>Range keys for models and indexes: To support queries like User.where(:created_at.gt => DateTime.now - 1.day)</li>
</ul>


<p>I hope to have time over the next few days and the weekend to continue improving Dynamoid. Watch this space for further updates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rapnd: Redis APN Daemon]]></title>
    <link href="http://joshsymonds.com/blog/2012/02/21/rapnd-redis-apn-daemon/"/>
    <updated>2012-02-21T13:21:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/02/21/rapnd-redis-apn-daemon</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/Veraticus/rapnd">rapnd</a> is a gem I developed to create a persistent connection through which to pass messages to Apple&#8217;s Push Notification servers. It&#8217;s pretty neat and you should check it out.</p>

<h2>Why another push notification gem?</h2>

<p>The existing ones just didn&#8217;t do what I wanted. There were some that created persistent daemon connections&#8230; but they were only usable with one app, and we have two apps we want to send push notifications for. There were some with multiple app support, but they didn&#8217;t have daemons or they assumed the existence of ActiveRecord. And in my opinion using ActiveRecord to store notifications is pretty dumb.</p>

<h2>Whoa! ActiveRecord is just fine, bro.</h2>

<p>Yeah, I love ActiveRecord. But it&#8217;s clearly the wrong storage solution for push notifications. For every single push notification we send, we couldn&#8217;t care less about the content or whether or not it was actually delivered &#8211; so storing them in the database just built a huge table that we ended up not needing at all. Redis is the perfect solution: it can handle arbitrarily-sized lists, but doesn&#8217;t bother with any significant kind of persistence. Also, blpop made the programming a breeze.</p>

<h2>Why a daemon?</h2>

<p>Well, Apple tells you to do it. But for a more important reason, Apple claims that constantly established and dropped connections to their servers will result in IP blacklisting. I&#8217;ve never actually seen this in practice, but&#8230; well&#8230; why chance it? rapnd uses one connection per daemon and tries to keep it open as long as possible.</p>

<p>So yeah, it&#8217;s pretty cool. Go check out <a href="http://github.com/Veraticus/rapnd">the rapnd github page</a> to see the deets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Redis Timeout and Unexpected Token Errors]]></title>
    <link href="http://joshsymonds.com/blog/2012/02/21/fixing-redis-timeout-and-unexpected-token-errors/"/>
    <updated>2012-02-21T12:41:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/02/21/fixing-redis-timeout-and-unexpected-token-errors</id>
    <content type="html"><![CDATA[<p>Ran into some annoying problems with redis and resque recently that couldn&#8217;t be immediately solved through judicious Googling, so figured I&#8217;d make a quick post about it.</p>

<h2>Resource temporarily unavailable - Timeout reading from the socket</h2>

<p>If you installed redis-rb and hiredis by following the <a href="https://github.com/ezmobius/redis-rb">instructions at the redis-rb github page</a> then you might start running into this problem. Essentially, the version of hiredis they specify (and that you probably installed) is out of date &#8211; 0.3.1 has a known bug with socket disconnects when reading from redis. So happily, the solution to this is pretty simple: just upgrade your version of hiredis. We use 0.4.4 now.</p>

<h2>unexpected token at &#8216;OK&#8217; (Resque::Helpers::DecodeException)</h2>

<p>This one took a bit more tracking down to fix.</p>

<p>The newest versions of resque (I&#8217;m using 1.20.0) rely on versions greater than 2.4 of redis. Versions below that respond differently to certainly redis commands &#8211; for example, returning &#8220;OK.&#8221; Upgrading your redis server handily fixes this problem.</p>
]]></content>
  </entry>
  
</feed>
