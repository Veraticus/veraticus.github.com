<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hi, I'm Josh Symonds]]></title>
  <link href="http://joshsymonds.com/atom.xml" rel="self"/>
  <link href="http://joshsymonds.com/"/>
  <updated>2013-06-11T15:12:28-05:00</updated>
  <id>http://joshsymonds.com/</id>
  <author>
    <name><![CDATA[Josh Symonds]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 7: Impressions &amp; Thoughts]]></title>
    <link href="http://joshsymonds.com/blog/2013/06/11/ios-7-impressions-and-thoughts/"/>
    <updated>2013-06-11T12:59:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/06/11/ios-7-impressions-and-thoughts</id>
    <content type="html"><![CDATA[<p>I downloaded the iOS 7 beta yesterday and, in a tizzy of anticipation, applied it to my phone. Of course at that point I had already heard some of the incredible hyperbole surrounding it: on the one hand, people complaining that it was ugly and unusable, and on the other, that the new flat UI was a stunning successor to the iPhone&#8217;s increasingly outdated visual design. But I hadn&#8217;t really heard from many people actually using it &#8211; they were all judging on screenshots and the WWDC keynote videos.</p>

<p>So I wanted to post my impressions and thoughts about the newest iOS update, as someone who&#8217;s used it for a scant 24 hours. Ultimately I believe Apple still has quite a lot of work to do, but that iOS 7 is a really impressive step in the right direction &#8211; definitely not ready for release immediately, but I&#8217;m hopeful that in three months it could be really, truly amazing.</p>

<!-- more -->


<h2>The Good</h2>

<p>There&#8217;s a lot to like about iOS 7. Here&#8217;s my personal favorites.</p>

<h3>UI Transitions</h3>

<p>Apple has invested a lot of time in the easing between screens in iOS 7 and the results are really spectacular. Unlocking your phone, icons flow in seamlessly from the corners of the app.</p>

<p><img src="http://f.cl.ly/items/162R031R2S0B2r003J0x/unlocking.jpg" alt="Unlocking the Phone" /></p>

<p>And when opening an app or group, you zoom in on it until it takes up the entirety of the screen. All these animations last maybe a quarter of a second, but they look really professional, seamless, and effortless. There&#8217;s no hitching or stuttering (even on the beta version of the OS), and even the text appears to zoom in smoothly without any jaggies or transformation weirdness.</p>

<p><img src="http://f.cl.ly/items/3q0n0r1e241h2M2S1i1L/zooming.jpg" alt="Zooming to a Group" /></p>

<p>(The jaggies in 1Password above are due to transforming the original image to a more reasonable jpg.)</p>

<p>This effect goes great with the new slightly moving backgrounds, which are serene and peaceful while still giving the slight impression of movement. Overall, the polishing work that went into iOS 7 is immediately obvious, and in motion it really does look extraordinary.</p>

<h3>The Home Screen</h3>

<p><img src="http://f.cl.ly/items/24062i2D0W2P2R020J0z/home.jpg" alt="New Home Screen" /></p>

<p>The new homepage is gorgeous and simplistic. My husband complained that the grey background of the app groups looks strange, coming from the black background they presently have. They look less like groups now and more like plates, in my opinion, which works but does seem slightly odd.</p>

<p><img src="http://f.cl.ly/items/2n1j0V1M311a203A3T45/groups.jpg" alt="Group View" /></p>

<p>Similarly, expanded groups are really well done. The slight transparent gray here is way better than the white gray on the home screen. It&#8217;s great that you can finally put as many items into a group as you want, but unfortunately this can get a little confusing &#8211; now that you don&#8217;t see little icons of everything in a group, I&#8217;m not totally sure what each individual group contains. I&#8217;ve already had to juggle groups around so that I have a better idea of what&#8217;s inside them, whereas before I could just look at the small summary icons.</p>

<h3>NEWSSTAND CAN GO IN A FOLDER</h3>

<p>Yes, it&#8217;s true! That one app folder that you always wanted to exile to the darkest corners of your phone (along with Compass and Passbook) can finally be banished forever, and without having to try to trick the iPhone into hiding it for you and then undoing it if you accidentally press on it.</p>

<p><img src="http://f.cl.ly/items/2i0n1j1O0k3u242N241R/exiled.jpg" alt="Sorry Newsstand" /></p>

<p>And stay dead.</p>

<h3>Spotlight Got Moved</h3>

<p>No longer will swiping all the way left result in the Spotlight screen. Now you search your iPhone by pulling down on the home screen, which shows the spotlight search function above your apps.</p>

<p><img src="http://f.cl.ly/items/1s3z3d3a1y3F2g0A2c2F/spotlight.jpg" alt="Spotlight" /></p>

<p>This new location is welcome and looks a lot more seamless and natural than an entire empty screen devoted to searching.</p>

<h3>Messages Looks Good for iMessages</h3>

<p><img src="http://f.cl.ly/items/230T1B1E051e0L0D2o0K/imessage.jpg" alt="iMessage Messages" /></p>

<p>I like the new conversation view for Messages. Some have complained that the gap between two messages is too small and doesn&#8217;t have enough breathing room &#8211; and they&#8217;re right that they&#8217;re probably only three or four pixels separated. But the gap is big enough to see that the messages are distinct without taking up unnecessary real estate, so I don&#8217;t mind it too much.</p>

<p>There&#8217;s a neat gradient effect where messages at the top of the app seem more blue than messages at the bottom. Overall this is unobtrusive but still looks professional.</p>

<h3>No Skeumorphism</h3>

<p><img src="http://f.cl.ly/items/0C1h1o131u2z2B3l2h1l/notes.jpg" alt="Notes" /></p>

<p>Finally getting rid of the legal paper look, the new Notes app is as simple as it is useful.</p>

<p><img src="http://f.cl.ly/items/3m1a0y1C2d3x0x2O0Y2N/calendar.jpg" alt="Calendar" /></p>

<p>Similarly Calendar looks clear and great.</p>

<p><img src="http://f.cl.ly/items/0K0N1N152s1V3O2N271z/gamecenter.jpg" alt="Game Center" /></p>

<p>And finally that ratty old green felt is gone, leaving colored bubbles and lovely white clarity.</p>

<p>Overall the removal of the skeumorphisms is an unmixed win for iOS 7, and the new apps are worthy successors to the ugly old ones.</p>

<h3>Multitasking Looks Nifty</h3>

<p>The new multitasking view &#8211; where you see all your open applications and the screen you left open on them &#8211; looks quite nifty.</p>

<p><img src="http://f.cl.ly/items/3y18452t1y1o0T2S0v0X/multitasking.jpg" alt="Multitasking" /></p>

<p>Swiping between open apps is simple and they become immediately responsive when touching them. The carousel of open apps are just images, however: screens don&#8217;t update while you&#8217;re looking between them, which makes sense but is a little disappointing.</p>

<h3>Lots More Information</h3>

<p>Because of the flat UI and the smaller lines, Apple seems confident in displaying a lot more information in a smaller space. I think this is good, but it makes me concerned about accessibility. For example, consider the voice mail screen.</p>

<p><img src="http://f.cl.ly/items/0y0b3d2v2F1F2l31090t/voicemail.jpg" alt="Voicemail" /></p>

<p>Now you see all the buttons and sliders that used to be at the bottom of the screen on each individual voicemail. Similarly, when sending a text, instead of a growing bar showing the text&#8217;s progress you see a line with a height of maybe one or two pixels filling directly underneath the status text:</p>

<p><img src="http://f.cl.ly/items/0P060r1w3Y28271c1F35/progress.jpg" alt="Messages" /></p>

<p>The density of information means a lot more can be displayed near where you&#8217;d expect it to be appear, and in a much more unobtrusive manner.</p>

<h2>The Bad</h2>

<p>These are the things that I hope Apple is still iterating on. None of these issues are really terrible, but they do seem either a little hurried or less polished.</p>

<h3>The New Notifications Pulldown</h3>

<p>The transparency effect looks great: you can sort of see the app underneath notifications, but it&#8217;s blurry and dimmed. But the &#8220;today&#8221; view is essentially worthless, and it&#8217;s the default screen when you pull notifications down.</p>

<p><img src="http://f.cl.ly/items/0P441W0N062k0b3l2e0y/today.jpg" alt="Today Notifications" /></p>

<p>The old notifications view is now under &#8220;All&#8221;, that middle button, that shows you emails and tweets and missed text messages.</p>

<p><img src="http://f.cl.ly/items/193u3v0R413Z0E3A1K0b/all.jpg" alt="All Notifications" /></p>

<p>You&#8217;d think this is what the &#8220;Missed&#8221; button would do, but nothing displays under that category, leading me to believe it might be broken.</p>

<p>Either way, &#8220;All&#8221; should definitely be the default view for the notifications screen, since that&#8217;s what it is in iOS 6. And if you want a worthless computer-generated summary of your day, you should have the option of tapping into that, without it being the first thing you see.</p>

<h3>Messages Looks Bad for Texts</h3>

<p>The gentle gradient that, on iMessages looks so professional, makes text messages vaguely unreadable.</p>

<p><img src="http://f.cl.ly/items/0H2r1z173Z3R1s1V2a0G/texts.jpg" alt="iMessage Texts" /></p>

<p>Note how the green at the top of the text view is almost neon? The gradient for this screen needs to be toned down so that texts are as readable as iMessages. And white on light green might be a bad idea either way.</p>

<h3>The Lock Screen</h3>

<p>The new lock screen is highly mysterious. I&#8217;ve been using an iPhone since they first came out and I initially swiped the wrong direction to unlock iOS 7. Why? I&#8217;m not sure, but something about this screen says &#8220;swipe right to left&#8221; instead of &#8220;swipe left to right&#8221;.</p>

<p><img src="http://f.cl.ly/items/3B2Q1N3w0X0B1v1d2c1A/lock.jpg" alt="Lock Screen" /></p>

<p>Though I guess I should count myself lucky that it says anything to me at all. The &#8220;slide to unlock&#8221; text highlights in the proper swiping direction, but too rapidly to really see, so it&#8217;s easy to imagine a new user coming up to the iPhone and trying to swipe that text every which way before the phone unlocks.</p>

<p>I think it&#8217;s the lack of the little pull button at the bottom that we&#8217;ve become so frighteningly used to that causes this confusion. This screen gives almost no indication at all which direction you should be swiping: the only arrows present are at the top and bottom, and that&#8217;s to bring down notifications or bring up the control center. (Both of these can be disabled on the lock screen from preferences, if you so desire.)</p>

<p>Apple should consider adding a swipe button back to this screen so that it&#8217;s immediately obvious how to unlock the phone.</p>

<h3>The New Toggle Switch</h3>

<p><img src="http://f.cl.ly/items/1H343k232t09072t0Y3j/toggles.jpg" alt="Toggle Switches" /></p>

<p>This might seem nitpicky, but the new toggle controls are difficult to properly change their state. You can&#8217;t really drag them anymore: the phone doesn&#8217;t seem to understand the gesture. If you simply tap a toggle switch it will flip as it should, but who touches a toggle control when you can grab and pull instead?</p>

<h3>You Can&#8217;t Close Apps Via Multitasking Anymore</h3>

<p><del>This sort of sucks as a developer, since it was a great way of completely closing an app and then testing its startup on the phone. No longer can you hold down app icons in multitasking and be presented with the option of closing them. Hopefully they add this back in.</del></p>

<p>It was just pointed out to me by the super helpful <a href="https://twitter.com/billycoover">@billycoover</a> that you can indeed close apps in the multitasking view &#8211; you swipe up on them and they float away. Helpful, though not immediately obvious.</p>

<h2>The Ugly</h2>

<p>And finally, there are some parts of iOS 7 so monumentally awful I can only call them &#8220;ugly.&#8221;</p>

<h3>The Receiving Call Screen</h3>

<p>Good lord is this ugly &#8211; like, so bad I wonder if anyone really bothered looking at it before releasing it.</p>

<p><img src="http://f.cl.ly/items/2O0L423A1z3l450g1A0X/receiving.jpg" alt="Receiving Call" /></p>

<p>The red on white text is highly unreadable, the buttons are ugly, and the whole thing is just an overly-simplistic mistake. This entire screen needs a significant revamp before it could be called usable, much less pretty.</p>

<h3>Bugs, Bugs, Bugs</h3>

<p>Boy is this a beta version of the OS. I&#8217;ve encountered three different bugs so far:</p>

<ol>
<li>The phone completely bricks if you try to use the system date picker. You have to restore from the original firmware.</li>
<li>Sometimes, all apps will try to update simultaneously and then become stuck updating, meaning you have no working apps at all on the phone. Again, restoring is the only solution.</li>
<li>After multitasking, the background sometimes stays the same size as a multitasking window. The only way to fix it is to restart your phone.</li>
</ol>


<p><img src="http://f.cl.ly/items/241e451X423U1H3G2400/bug.jpg" alt="Bad Background" /></p>

<p>And that&#8217;s only in 24 hours of using it. To call this unstable is an understatement.</p>

<h2>Conclusions</h2>

<p>I&#8217;m not a UI designer, and I can&#8217;t judge the work that Apple has done from a professional standpoint. But speaking as a consumer, I think that iOS 7 represents some great work in improving the iPhone&#8217;s visual language, heightening the amount of information delivered, and simplifying apps so that this increase of information doesn&#8217;t seem overwhelming. It also looks stellar in a lot of places&#8230; and, unfortunately, pretty darn unpleasant in others.</p>

<p>Certainly Apple has a lot of work to do to make this really visually great. And I can&#8217;t blame people for being concerned that it looks somewhat similar to the old Metro UI. Still, I think that the final product Apple will deliver to us will have most of these gripes fixed &#8211; in three months&#8217; time we&#8217;ll see an even more visually distinct, even more beautiful final iOS 7. In the meantime, I can&#8217;t recommend anyone downloads the beta, because while it may look good, it needs a lot of stability improvements before it&#8217;s truly functional.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Brother is Both Savvy and Incompetent]]></title>
    <link href="http://joshsymonds.com/blog/2013/06/10/big-brother-is-both-savvy-and-incompetent/"/>
    <updated>2013-06-10T12:40:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/06/10/big-brother-is-both-savvy-and-incompetent</id>
    <content type="html"><![CDATA[<p>I heard an argument recently that the data collected by <a href="http://en.wikipedia.org/wiki/PRISM_(surveillance_program)">PRISM</a> was safe from abuse because if the government had the technical expertise to gather the data, it had the competency to secure it as well. While on the face of it this statement is flatly absurd, its derivatives can seem plausible:</p>

<ul>
<li>&#8220;The data is only used if a court approves.&#8221; (The fallacious assumption being that the government can reasonably control access to the PRISM data.)</li>
<li>&#8220;The government is trying to protect us by safeguarding this information in one place.&#8221; (Of course, the idea that this centralized database&#8217;s existence has made said data <strong>more</strong> secure is preposterous.)</li>
<li>&#8220;You had no assurance of privacy on the Internet anyway, so why should this bother you?&#8221; (Because while I can take reasonable steps to make my own data secure, once it&#8217;s in the government&#8217;s hands it&#8217;s their responsibility, and, as should be abundantly obvious, leaks happen.)</li>
</ul>


<p>It&#8217;s easy to believe that a government agency capable of collecting this information and then keeping its existence a secret for so long must have a way of keeping it safe. Unfortunately, the access that was given to the NSA to take this information has no correlation to the skills necessary to secure it; and the very fact of PRISM&#8217;s existence will probably prove too enticing a target to remain secure for very long.</p>

<p>Essentially, the argument as I heard it can be expressed as a simple question: if the government is savvy enough to gather the data, surely they&#8217;re not incompetent enough to lose it? Unfortunately, big brother can indeed be both savvy and incompetent. I think this is the greatest danger to the data PRISM allows access to &#8211; not improper use or excessive domestic surveillance, but complete and outright theft.</p>

<!-- more -->


<h2>Savvy Through Access</h2>

<p>Why does the act of collecting this information have no bearing on said information&#8217;s security?</p>

<p>Consider a child visiting the Library of Congress. He has an enormous storehouse of human knowledge at his fingertips: would you say then that this child would make a reasonable gatekeeper of that knowledge? Certainly not &#8211; just because the child has access to this repository doesn&#8217;t mean he should be director of it. He&#8217;d lend books out without properly tracking them, he wouldn&#8217;t be able to adequately secure the premises, and before you know it instead of a great Library of Congress you&#8217;d have a tremendous auditorium empty of books.</p>

<p>The US Government found itself in a similar position. Through the unique and regrettable powers offered it through the Patriot Act, it could visit the library (in this case, the storehouses of data on the Internet) whenever it wanted to. So of course it decided that this meant it should be the director of that library. The government has no particular skills or capabilities that make it uniquely suited to the administration of the knowledge it&#8217;s gathered: it seems savvy enough to have gathered it when, in fact, anyone with access similar to the NSA&#8217;s could have done so and would have had just as much of a &#8220;right&#8221; to it.</p>

<p>This analogy is somewhat troublesome. After all, prior to the NSA&#8217;s intervention, there wasn&#8217;t one library for personal information on the Internet at all. If you wanted to know someone&#8217;s Google searches, you&#8217;d presumably have to hack Google. And if you wanted their bank account information, you&#8217;d have to compromise their bank. That brings me to my next point: that assembling this single unified source of information represents a catastrophic single point of failure, and simultaneously provides a tremendous motive for theft.</p>

<h2>Eventually Incompetent</h2>

<p>My primary concern isn&#8217;t that the data will be misused by the government (though it seems inevitable it will be). It&#8217;s the security of the data itself. One point of access with all this information is akin to storing all gold in the entire world in one bank. Regardless of how well the bank is guarded, a lot of people are going to be very interested indeed in finding a way in &#8211; and it seems inevitable that, due to the fact that there are so few guards relative to potential criminals, and the incentive to break in is so motivating, a way will eventually be found.</p>

<p>When my email, my online orders, my telephone conversations were stored separately in different servers, the barrier to assembling a complete profile of my online activity was rather high &#8211; a potential hacker would have to compromise numerous services and some incredibly tight security multiple times to really get a clear picture of my habits. But the NSA has done all of this hackers&#8217; work for him: all he must do is hack into one incredibly secure system, instead of a plethora of them.</p>

<p>And while hacking the NSA sounds nearly impossible, there are security flaws discovered all the time in software, even software widely considered extremely secure. And now that the existence of PRISM is well-known, all of those flaws (and the newest ones discovered, before there&#8217;s even an opportunity to fix them) will be tried on the NSA. Both by hacker groups and foreign governments.</p>

<p>Does anyone really believe this new treasure trove of knowledge will remain secret for long?</p>

<h2>What Can We Do?</h2>

<p>Unfortunately, at this point, not much can be done about the situation. As should be abundantly clear it&#8217;s really only a matter of time until PRISM is compromised. There are too many people who want the information it contains, and eventually they&#8217;ll hit on some means to acquire it.</p>

<p>The only really safe thing to do, now that PRISM is public knowledge, is to destroy the data it contains and stop the program. Regrettably it seems that the government really does believe that, because it had the savvy to acquire the knowledge, it&#8217;s somehow competent enough to keep it safe from everyone else on the planet. In the end, it isn&#8217;t the government that will pay the price for this hubris, but instead us citizens who were monitored: our secrets will be the ones to be released, because we trusted our government to allow us some privacy.</p>

<p>Going forward, everyone should start encrypting their emails and conversations. The <a href="https://ssd.eff.org/">EFF&#8217;s surveillance self-defense site</a> is a good read that gives some helpful tips. But ultimately, if you don&#8217;t want your information to available on PRISM, it might be time to set up your own personal cloud or VPN and stop using big data and social networking sites. If that&#8217;s not possible, then at least consider what you post to them &#8211; now we truly know that not only is everything we do on the Internet public, but there are people dumb enough to gather it all in one place so that it can easily be stolen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gistify 1.1.0: Visibility &amp; Accounts]]></title>
    <link href="http://joshsymonds.com/blog/2013/06/03/gistify-1-dot-1-0-visibility-and-accounts/"/>
    <updated>2013-06-03T18:44:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/06/03/gistify-1-dot-1-0-visibility-and-accounts</id>
    <content type="html"><![CDATA[<p>Hot on the heels of my <a href="http://joshsymonds.com/blog/2013/05/29/gistify-a-mac-app-for-easy-gists/">previous announcement</a>, I&#8217;m proud to announce the release of Gistify version 1.1.0. And after submitting only four days ago &#8211; man, the Mac App store moves incredibly fast compared to the iOS App Store!</p>

<p>Anyhow, <a href="https://itunes.apple.com/us/app/gistify/id653231502">Gistify</a>, the incredibly awesome Mac App that lets you gist quickly and easily, just got a whole lot better. Now you can sign in to your GitHub account to make gists, and set the visibility of your gists to either public or private Also the app screenshots are no longer quite so, well&#8230; drab, for lack of a better word.</p>

<p>If you haven&#8217;t downloaded <a href="https://itunes.apple.com/us/app/gistify/id653231502">Gistify</a> yet, you should. While I&#8217;m slightly biased, I&#8217;ve been using it all the time and I think it&#8217;s an incredibly handy tool &#8211; after all, that&#8217;s why I released it. But if you&#8217;re not convinced yet, or you&#8217;re just interested in giving it a shot without paying the $2, let me know and I&#8217;ll be happy to hook you up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gistify: a Mac App for Easy Gists]]></title>
    <link href="http://joshsymonds.com/blog/2013/05/29/gistify-a-mac-app-for-easy-gists/"/>
    <updated>2013-05-29T13:32:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/05/29/gistify-a-mac-app-for-easy-gists</id>
    <content type="html"><![CDATA[<p>Today I&#8217;m happy to announce the release of my very first Mac App: <a href="https://itunes.apple.com/us/app/gistify/id653231502">Gistify</a>!</p>

<p><a href="https://itunes.apple.com/us/app/gistify/id653231502"><img src="http://f.cl.ly/items/2w0L3S1A2y3H2d3S0c14/Gistify-icon-256.png" alt="Gistify" /></a></p>

<p>Gistify rather simply delivers the content of your clipboard to GitHub&#8217;s awesome <a href="https://gist.github.com/">Gist</a> service. You can select the default format for all gists and override it on a gist-by-gist basis, and the resulting URL is appended to your clipboard so you can paste it wherever you like.</p>

<p>Simple? Yes indeed, but I desperately wanted it. I made this initial version rapidly to scratch an itch I had &#8211; and perplexingly there&#8217;s not an existing desktop app that seems to do this already. (There are competing apps that paste to other services, but for some reason none work properly that post to Gist.)</p>

<p>In terms of future plans, I already have a new version submitted for approval to Apple! Version 1.1.0 will allow you to sign in to GitHub and create gists under your username: additionally you can toggle the visibility of gists to either public or secret. And in development is version 1.2.0, which will introduce all kinds of new mind-blowing awesomeness.</p>

<p>So what are you waiting for? Get over to the Mac App store and buy <a href="https://itunes.apple.com/us/app/gistify/id653231502">Gistify</a>!</p>

<p>(Oh, and if you like the icon, it&#8217;s by the super amazing <a href="http://twitter.com/lukesbeard">Luke Beard</a>.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Huey 2.0.0]]></title>
    <link href="http://joshsymonds.com/blog/2013/05/09/huey-2-dot-0-0/"/>
    <updated>2013-05-09T11:18:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/05/09/huey-2-dot-0-0</id>
    <content type="html"><![CDATA[<p>Today I released <a href="https://github.com/Veraticus/huey">Huey</a> version 2.0.0! Though it contains a number of small bug fixes, the biggest change is switching away from SSDP to using the Hue&#8217;s own bridge discovery protocol. This is both faster and more extensible &#8211; now when you make the initial request for the Hue bridge IP, it takes a fraction of the time SSDP did. And you can also manually specify the IP yourself, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Huey</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">hue_ip</span> <span class="o">=</span> <span class="s1">&#39;123.456.789.012&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With some clever port forwarding on your router combined with this new option, Huey is now usable on servers outside your local network.</p>

<p>SSDP is still easily enabled if you prefer that over this new method, or find that the Hue bridge discovery API is problematic. Huey just keeps getting better, but let me know if you run into an issues with it <a href="https://github.com/Veraticus/huey">at the repository</a>. Happy Hueing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Your Startup Is Failing (And How To Fix It)]]></title>
    <link href="http://joshsymonds.com/blog/2013/04/30/why-your-startup-is-failing-and-how-to-fix-it/"/>
    <updated>2013-04-30T02:49:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/04/30/why-your-startup-is-failing-and-how-to-fix-it</id>
    <content type="html"><![CDATA[<p>The title of this post might be somewhat misleading: it&#8217;s probably pretty obvious to you why your startup is failing. The same reason any business fails &#8211; you&#8217;re spending more money than you make. For some tech startups, though, living in the red is (perplexingly) a desirable state of existence. Still, you can&#8217;t stay forever in an unprofitable limbo. Eventually investors start asking awkward questions like, &#8220;When will I see a return on my investment?&#8221; and &#8220;How can you possibly be spending so much of my money without making any in return?&#8221;</p>

<p>Shortly afterwards they stop giving you money and then you know it isn&#8217;t long until the end.</p>

<p>Maybe you&#8217;re there right now, or staring down the barrel of that gun. I&#8217;ve seen it before; I know what it looks like. You&#8217;re not alone. If you haven&#8217;t gone off the cliff yet, it&#8217;s not too late to save your tech startup. You will have to make some hard decisions, though. Whether or not you can do that will determine if your company is salvageable, or if you&#8217;ll be making one of those &#8220;What I Learned As An Ex-CEO&#8221; Hacker News posts that are all the rage these days. So how do you fix your failing startup? Good question! First, we have to understand why you&#8217;re failing at all. Afterwards, we can move on to fixing it.</p>

<!-- more -->


<h1>Why You&#8217;re Failing</h1>

<p>Keep in mind the bottom line here: ultimately you&#8217;re failing because you&#8217;re spending more money than you make. Discovering the reason behind this is the most important part of understanding how to correct it. Here, then, are the reasons your startup is failing.</p>

<h2>4. You Hired the Wrong People</h2>

<p>This is an especially easy pitfall for people to fall into. Back when you started your company, you were all excited about your vision, and unfortunately the brightness of said vision blinded you into hiring your old college roommate, or Cousin Mickey, or your sister&#8217;s wedding photographer. They&#8217;re really nice people, positive attitude, always on time&#8230; but they just aren&#8217;t great.</p>

<p>The Wrong People can fall anywhere on the &#8220;not great&#8221; spectrum. Some add literally nothing to your company &#8211; their most important skill is having a thousand Twitter followers. Others ostensibly have skills, but they&#8217;re bad at them. These people are even worse than their do-nothing colleagues, since you&#8217;ll be spending time correcting their screw-ups in addition to doing your own work.</p>

<p>If you want your startup to be a success, you don&#8217;t have time to teach anyone the ropes or take on charity cases. You need stellar performers in every position you&#8217;re hiring for, and that goes double for engineers, since, as a tech startup, they&#8217;re the ones in the trenches making your product. Anyone in your company that isn&#8217;t out-and-out amazing is a waste of your money.</p>

<p>If you&#8217;re not knowledgeable enough to judge whether or not you hired the wrong people, you need to immediately hire someone who can competently make that assessment and include them in your decision-making processes.</p>

<h2>3. You Have Too Many Warm Bodies</h2>

<p>Your startup has four C-level executives, two managers, and two engineers. What&#8217;s wrong with this picture?</p>

<p>That&#8217;s a gimmie, obviously, but you might be surprised how often situations like this occur. (Or if you&#8217;re as bitter and jaded as I am, you won&#8217;t be surprised at all.) There are only two kinds of people you need in your startup: people who make your product &#8211; usually your engineers and designers &#8211; and people who sell it. Or, instead of selling it, people responsible for figuring out how to make it profitable, like advertising experts or investment gurus. Everyone else is extraneous.</p>

<p>You don&#8217;t need managers if you&#8217;ve hired competent engineers. You probably don&#8217;t need half of your C-level team either. Yes, they&#8217;re busy all the time and claim their work is integral to the proper functioning of your company. But you wouldn&#8217;t be staring into the inky abyss of bankruptcy if that were true.</p>

<p>People are truly amazing at generating work for themselves. It&#8217;s not a testament to the importance of their job, it&#8217;s a sad reflection on the nature of human existence. Everyone wants to feel important and special, even if they&#8217;re not really bringing anything to the party. Don&#8217;t let people waste your rapidly-dwindling money doing this.</p>

<h2>2. You&#8217;re Wasting Your Time</h2>

<p>There&#8217;s a lot of ways you can be doing this. Here&#8217;s a quick list:</p>

<ul>
<li><strong>Meetings</strong>: You should go into every meeting knowing exactly what that meeting is intended to accomplish. When it&#8217;s accomplished, the meeting is over. Meetings that don&#8217;t have a clear agenda do not deserve to occur.</li>
<li><strong>Process</strong>: Making your product must be fun and easy for your engineers (if they&#8217;re good engineers, the fun part will come naturally &#8211; supplying the easy is up to you). If it becomes tiresome and unpleasant because of a ridiculous process then you&#8217;re wasting time.</li>
<li><strong>Priorities</strong>: Bugs that affect only one customer should be prioritized below bugs affecting fifty customers. Features that no one wants should be slated behind those that customers are clamoring for.</li>
</ul>


<p>Ultimately, if you&#8217;re not doing something directly applicable to building your application, ensuring its continued success, or selling it, you&#8217;re wasting your time. Be ruthless here. If you need to constantly remind yourself why what you&#8217;re doing is valuable&#8230; chances are it probably isn&#8217;t.</p>

<h2>1. No One Wants Your Product</h2>

<p>The only way for you to make money is to sell something (or give it away and sell something related). If the people aren&#8217;t buying, then you aren&#8217;t making money, and, well, here you are.</p>

<p>Don&#8217;t delude yourself by thinking you don&#8217;t want users yet. That&#8217;s like saying you don&#8217;t want money yet. You want money right now, and you want users right now. You want everyone in the world to be clamoring to use your product, and damn the consequences. It might melt your servers into tiny puddles of liquid metal or bring your system to a screeching halt, but who the fuck cares? You can fix those problems. You need users and you need them immediately.</p>

<p>If your initial bunch of users love what you&#8217;re doing, they&#8217;ll recommend it to their friends. That&#8217;s how you get those clamoring masses beating down your door. If people aren&#8217;t recommending your product to their networks, there&#8217;s a reason. Find out what it is and fix it. (Hint: it&#8217;s because of the same issues you run into when you give a tech demo.)</p>

<p>Getting into TechCrunch doesn&#8217;t count as people wanting your product. Your customers don&#8217;t read TechCrunch.</p>

<h1>How To Fix It</h1>

<p>Ultimately, your investors don&#8217;t care about your clever ideas, neat slideshows, your team or even your tech. They care about making money. Why? Because investors are pragmatists. They know that if they bet a million dollars on twenty startups, they&#8217;ll lose nineteen million dollars on nineteen failures &#8211; and make a hundred million dollars on one success.</p>

<p>You want to be a pragmatist as well. If you make them money, you&#8217;ll make money for yourself as well. The way to fix your problems, then, is to reduce costs and raise profits. Easy to say, right? Well, here&#8217;s the specifics.</p>

<h2>3. BRING ME THE AXE</h2>

<p><img src="http://i.qkme.me/3ox4qa.jpg" alt="TINA! BRING ME THE AXE!!" /></p>

<p>It&#8217;s time to start firing your employees.</p>

<p>This isn&#8217;t easy. Most of these people have probably become your friends. Perhaps some of them started as your bosom-buddies. Well, too bad. Maybe you can hire them again later when you&#8217;re more profitable. But if you don&#8217;t start trimming now, then in a few months you&#8217;ll be cutting all of them.</p>

<p>First, get rid of all the people that aren&#8217;t truly, stunningly great at their jobs, whatever their job is. If that&#8217;s not enough, next flatten your corporate structure. This usually involves firing middle-management. And finally, start getting rid of C-level executives.</p>

<p>Grab your org chart right now and stare at it. For every box on that piece of paper, ask yourself, &#8220;Does this person make my company money?&#8221; If the answer is no, then you know what to do.</p>

<h2>2. Cultivate Elitism</h2>

<p>People should speak of your company and its hiring practices in hushed, awed tones. You want to be the startup that&#8217;s snatching up all the great talent &#8211; making the best people in the industry offers that they just can&#8217;t refuse. People talk about 10X engineers, and you want to be entirely composed of those, but not just for engineers: for everything! Get amazing designers, fantastic QA people, the best of the best. If you want to turn your venture around, this is where you should blow your remaining money.</p>

<p>Once that&#8217;s done, for God&#8217;s sake, get out of their way. You hired these amazing people to be dynamic forces of change and save your company &#8211; let them do it! Managing great people is hard: you want to pave the road in front of them almost without them realizing you&#8217;ve done it. Smooth the way, ease the process, and I guarantee that the results will astound you.</p>

<p>You never want to hire anyone that doesn&#8217;t elicit respect from the other employees of your company. Foster this culture of elitism. Oh, and don&#8217;t hire until it becomes literally painful that you&#8217;re short a person. Even then be very very picky. The wrong skills or a bad attitude can send you right back to the &#8220;firing&#8221; step of this process again, and you don&#8217;t want to do that more than once.</p>

<h2>1. Double Down on What Makes You Money</h2>

<p>Whatever your value proposition is, you need to clarify it and refocus your entire company around achieving it. At this point, there&#8217;s been enough pivoting and more than enough money spent trying to find the money in your initial idea. If there isn&#8217;t any, then it&#8217;s time to pack up and go home &#8211; but if there is, it&#8217;s time to pursue it doggedly and relentlessly.</p>

<p>If a VC offered you a million dollars, no strings attached, this very day, you should refuse. Why? Because you should have been either marginally profitable or marginally popular on your <strong>PREVIOUS</strong> million dollars. If you&#8217;ve burnt through all that money and there&#8217;s still not hordes of people beating down your doors, it is time to do some soul-searching.</p>

<p>Why don&#8217;t more people find my app popular? Why aren&#8217;t they spending their money on me? These aren&#8217;t academic questions to be answered at your leisure: these thoughts should be the burning cores of your very being. If you&#8217;re in the unenviable position of being a failing startup, you must do everything in your power to answer these two questions. Do so and then double down on what you discover. It&#8217;s your only prayer.</p>

<h1>Afterwards</h1>

<p>I hope this missive is helpful to someone. That helpfulness might be stark realization: ultimately, no company deserves to exist &#8211; your failing startup might be destined for the rubbish heap. Having a great idea, friendly employees, or lots of buzz in San Francisco doesn&#8217;t change its fate. The only measure of a company&#8217;s success is whether or not it makes money. The rest is just icing on the cake.</p>

<p>Can your company do that? Despite my tone, I believe it can. You&#8217;ve poured your heart and soul into it and you&#8217;ve done so because you believe you&#8217;re working on a tremendous success. That said, what I hope you take away from my ramblings is that belief alone isn&#8217;t enough. You need to calmly and steadily (some might say callously and ruthlessly) refocus your company on the most promising aspects of your employees and product. Only by doing so can you fix the problems in your startup, right the listing ship, and eventually put these unfortunate problems behind you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Perils of Overengineering]]></title>
    <link href="http://joshsymonds.com/blog/2013/04/23/the-perils-of-overengineering/"/>
    <updated>2013-04-23T13:19:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/04/23/the-perils-of-overengineering</id>
    <content type="html"><![CDATA[<p>Overengineering is a special subset of the generalized problem of &#8220;making bad choices.&#8221; Usually overengineering is the result of one of two specific bad choices: either adding too much unnecessary bloat to something relatively simple, or creating a customized solution when many out-of-the-box alternatives already exist. After running into these problems over and over again, I&#8217;m going to quantify and identify them so that you and your friends can avoid the perils of overengineering.</p>

<!-- more -->


<h2>Don&#8217;t Overthink It</h2>

<p>Does your app really need Meteor? I&#8217;m not arguing that Meteor (or Backbone or your complicated stateful library of choice) isn&#8217;t super awesome or that people shouldn&#8217;t know it &#8211; some of the most successful applications on the Internet use it and frameworks like it. But does <strong>your current project</strong> need it?</p>

<p>Chances are the answer is &#8220;no.&#8221; You&#8217;ll double the amount of code in your app, introduce accessibility problems, and hinder page loads. The tradeoffs for a web application that uses boatloads of JavaScript interactions are worth it. But your eeny weeny storefront? Your JS bloat will make it impossible to maintain and difficult to use. Just cut it.</p>

<p>This goes for any technology. Coco Chanel infamously stated, &#8220;Before you leave the house, look in the mirror and take one thing off.&#8221; What she applied to fashion, I apply to code. Before you commit, look in the mirror. Do you really need everything you&#8217;re included? Did you make the best choices? If you&#8217;re not sure, do some research. It&#8217;ll save you a boatload of trouble down the river.</p>

<h2>Respect The Majority</h2>

<p>Your awesome, custom-designed redis/memcached database storage solution is eye-meltingly fantastic. You can fetch all users with a query like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vg">$d</span><span class="o">.</span><span class="n">u</span><span class="o">.</span><span class="n">f</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes half a millisecond &#8211; before caches have been warmed. It&#8217;s schemaless and uses join tables for every column. You&#8217;re the happiest programmer on the planet.</p>

<p>And silently, the people that will have to maintain your code after your departure stare at you with smoldering hatred. Because they don&#8217;t know how it works, and no, tests don&#8217;t reasonably define expectations or replace documentation. Even documentation won&#8217;t save them from the bugs hiding in your custom solution &#8211; and believe me, there will be tremendous bugs hiding there. Your client and the new developer will have to spend time fixing those problems, time that could have been spent developing useful new features.</p>

<p>So next time, instead of rolling your own, pick a great solution that already works and that has a lot of open-source support. You&#8217;ll save everyone involved a lot of money and trouble. No, you won&#8217;t be inventing the next Rails or Node.js this way. Go invent it on your own time with a project you intend to be with forever, or at least one you&#8217;ll never have to hand off.</p>

<h2>Less is Best</h2>

<p>To quote another famous individual with absolutely no relation to software engineering, Antoine de Saint-Exupery said, &#8220;A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away.&#8221; And again, what he applied to design, I apply to code. The best way to fix overengineering &#8211; both cases &#8211; is to ruthlessly cull what you&#8217;ve got.</p>

<p>Success, for code, isn&#8217;t bigger and better. It&#8217;s smaller and cheaper. Refactor mercilessly, use external dependencies, and always consider the simplest, most direct solution to your problem. Yes, eventually you might need a message queueing system with prioritization and robust monitoring: but do you need it now? Could you get by with something simple and quick? And in the future you&#8217;ll need to send multiple notifications for every kind of event in your system. But for the time being, will sending one email work? Or one text?</p>

<p>The fate of an overdesigned systems is twofold. It encounters immediate obsolescence from its requirements changing, meaning it didn&#8217;t need to be created at all, and/or the system is used only for its most simple case, wasting the time that was spent foolishly engineering the ability to make it send perfect unicoded texts in Mandarin.</p>

<p>Don&#8217;t be that person. Code for what the requirements are immediately: code for how the system will be used now, not how it will be used in a month. Because in a month it probably won&#8217;t be used that way anyway, and then you&#8217;ll look like a genius (in addition to actually being one for following sound advice).</p>

<h2>New IS Cool</h2>

<p>I know why it&#8217;s tempting to write code the fun way, instead of the proper way. Who wants to use the fuddy-duddy old technologies when some enterprising individual just made the coding mashup you&#8217;ve been waiting for? But remember to keep your audience in mind. If you&#8217;re coding for a client (and if you have a full-time job, your client is your employer) you need to make code that&#8217;s first maintainable, second performant, and, as a distant third, ground-breaking and full of awesome tech.</p>

<p>Your time to shine &#8211; your opportunity to cut yourself on the bleeding edge &#8211; is with your own private projects. And if you&#8217;re lucky and good, and the final product is really neat, thousands of people will adopt it for their use. Then, and only then, you can use it in production projects and feel like an awesome success&#8230; and without falling into one of the pitfalls of overengineering.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pricing Popular Hosting Options (With Devops Time)]]></title>
    <link href="http://joshsymonds.com/blog/2013/04/17/pricing-popular-hosting-options-with-devops-time/"/>
    <updated>2013-04-17T18:16:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/04/17/pricing-popular-hosting-options-with-devops-time</id>
    <content type="html"><![CDATA[<p>Recently I compared the major Rails hosting providers &#8211; but as opposed to most price breakdowns I&#8217;ve read on the Internet, I opted to include provisional hourly devops time to set up and perform maintenance on the servers. For the purposes of this comparison, I only selected four providers: AWS, RackSpace, BlueBox and Heroku, and I&#8217;m assuming you use all their services (rather than combining two, say Heroku Postgres with AWS EC2 instances). I found the resulting price breakdown instructive, though interpreting them (and disagreeing with the provided hours) are left as an exercise for the reader.</p>

<!-- more -->


<h2>Comparisons</h2>

<p>Any of these configurations should be adequate to support roughly a million requests a month (assuming throughput of 5 requests a second), provided most of the requests served aren&#8217;t that complicated. We&#8217;ll go for a medium database instance and aggressively cache as much as possible, thus we&#8217;ll also need to provide memcached room somewhere.</p>

<p>The big differentiator in my comparison (as opposed to others&#8217;) is certainly a devops contractor at $150 an hour. I&#8217;ll include the hours as I would estimate them personally, but for other people it might take longer or shorter &#8211; and the price could go up if there&#8217;s a ton of other software to go in the server. (For example, this theoretical application would probably eventually want redis and some sort of asynchronous worker system.)</p>

<p>So let&#8217;s get down to the details!</p>

<h3>Amazon Web Services</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>1 medium EC2 instance (1 year contract, medium utilization)</h4>
      6 unicorn workers<br/>
      1 nginx reverse proxy<br/>
      memcached
    </td>
    <td>$277.00</td>
    <td>$30.74</td>
  </tr>
  <tr>
    <td>
      <h4>1 medium RDS instance (1 year contract, medium utilization)</h4>
    </td>
    <td>$500.00</td>
    <td>$40.26</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      10 hours setup<br />
      5 hours maintenance
    </td>
    <td>$1500.00</td>
    <td>$750.00</td>
  </tr>
  <tr class='highlighted'>
    <th>Total</th>
    <th>$2277.00</th>
    <th>$821.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$12129.00</th>
  </tr>
</table>


<p>No surprises here: if you&#8217;re using AWS, the hardware is ridiculously cheap. Most of your cost is going to be engineering time to get the instance up and running and then perform maintenance and add additional features to it. That said, I&#8217;ve had an EC2 instance going for about 8 months now with no maintenance at all on my part (laziness!), so if you don&#8217;t need any additional server setup you can probably omit the maintenance time, for a monthly cost of $71.00 and a yearly cost of $3129.00.</p>

<h3>RackSpace</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>1 4GB managed cloud instance</h4>
      6 unicorn workers<br/>
      1 nginx reverse proxy<br/>
      memcached
    </td>
    <td>$0.00</td>
    <td>$262.80</td>
  </tr>
  <tr>
    <td>
      <h4>1 4GB cloud database instance</h4>
    </td>
    <td>$0.00</td>
    <td>$321.20</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      10 hours setup<br />
      2 hours maintenance
    </td>
    <td>$750.00</td>
    <td>$300.00</td>
  </tr>
  <tr class='highlighted'>
    <th>Total</th>
    <th>$750.00</th>
    <th>$884.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$11358.00</th>
  </tr>
</table>


<p>RackSpace&#8217;s managed cloud offerings are more expensive than AWS, but the theory is you can omit server-related maintenance (since they&#8217;ll keep services running and your servers themselves operational) and that&#8217;s reflected in a lowered monthly devops cost. They don&#8217;t do maintenance or improvements on your application proper, however, so I built a rather modest two hours a month in for simple tasks like upgrading Rails or performing minor server optimizations. You can once again probably ignore the monthly devops cost if you like, but that won&#8217;t have nearly the impact on the final price that it did for AWS, with a new monthly of $584.00 and a final year total of $7758.00.</p>

<h3>BlueBox</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>1 4GB cloud instance</h4>
      6 unicorn workers<br/>
      1 nginx reverse proxy<br/>
      memcached
    </td>
    <td>$0.00</td>
    <td>$385.00</td>
  </tr>
  <tr>
    <td>
      <h4>1 4GB cloud database instance</h4>
    </td>
    <td>$0.00</td>
    <td>$385.00</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      0 hours setup<br />
      0 hours maintenance
    </td>
    <td>$0.00</td>
    <td>$0.00</td>
  </tr>
  <tr class='highlighted'>
    <th>Total</th>
    <th>$0.00</th>
    <th>$770.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$9240.00</th>
  </tr>
</table>


<p>BlueBox&#8217;s claim to fame is that they perform server, application, and database setup, maintenance, and integration. Thus the need for a devops engineer is completely obviated (as reflected in the final totals). Obviously this price point is extremely attractive if you&#8217;d otherwise have to pay a server administrator and engineer, but if you have one on staff already then BlueBox&#8217;s product is easily the most expensive. You&#8217;re paying for their expertise much more than their hardware.</p>

<h3>Heroku</h3>

<table class='numbers'>
  <tr>
    <th style='width: 72%;'>Service</th>
    <th>Setup</th>
    <th>Monthly</th>
  </tr>
  <tr>
    <td>
      <h4>4 dynos</h4>
      12 unicorn workers<br/>
    </td>
    <td>$0.00</td>
    <td>$143.00</td>
  </tr>
  <tr>
    <td>
      <h4>memcached addon (500 MB)</h4>
    </td>
    <td>$0.00</td>
    <td>$40.00</td>
  </tr>
  <tr>
    <td><h4>Fugu database instance</h4></td>
    <td>$0.00</td>
    <td>$400.00</td>
  </tr>
  <tr>
    <td>
      <h4>Devops Time</h4>
      2 hours setup<br />
      0 hours maintenance
    </td>
    <td>$300.00</td>
    <td>$0.00</td>
  </tr>
    <tr class='highlighted'>
    <th>Total</th>
    <th>$300.00</th>
    <th>$583.00</th>
  </tr>
  <tr class='highlighted'>
    <th>First Year</th>
    <th colspan='2'>$7296.00</th>
  </tr>
</table>


<p>I&#8217;m always somewhat mystified by Heroku&#8217;s pricing &#8211; their database offerings are incredibly expensive, especially compared to their incredibly cheap dynos. Anyway, they provide the least expensive option for purely hosting an application, but this cheapness comes with a hidden price. Being unable to control your production environment can be a frightening proposition and exposes you to potential hidden vagaries of Heroku&#8217;s internals (such as the latest flap about their routing mesh). And the fact that their addons are third-party products means that if they go down, you have no ability to expedite their repair. I would deploy a small or medium app to Heroku (which might be perfect for this theoretical application), but for a bigger one I would definitely be hesitant.</p>

<h2>Conclusions</h2>

<p>I don&#8217;t think any of these prices are particularly surprising. For knowledgeable server engineers, AWS is indeed a tremendous bargain. For those with little or no infrastructure knowledge, Heroku or BlueBox would be a much better choice. And keep in mind these are the hours it would take me to set up these instances; the times might not be representative of another engineer. I think they&#8217;re reasonable though, and that the comparison is an interesting one to draw, even if not a tremendous revelation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I'm Not Applying to 37Signals (But Why You Should)]]></title>
    <link href="http://joshsymonds.com/blog/2013/03/19/why-im-not-applying-to-37signals-but-why-you-should/"/>
    <updated>2013-03-19T13:16:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2013/03/19/why-im-not-applying-to-37signals-but-why-you-should</id>
    <content type="html"><![CDATA[<p>In case you haven&#8217;t heard&#8230;</p>

<p><img src="http://f.cl.ly/items/2t3d0J0z3045350b1j2d/Screenshot_3_19_13_1_23_PM.png" alt="Rails Programmer: 37Signals" /></p>

<p>Yes, it&#8217;s true: <a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson">Willy Wonka</a> is going to grant one lucky golden ticket holder a tour of the chocolate factory. And then you get to stay there until you somehow get tired of working at one of the coolest companies on planet Earth &#8211; which, to carry my analogy, would probably be as likely to happen as getting bored of eating chocolate. If you&#8217;re into Rails, you&#8217;d have to be stupid to not at least consider such an amazing opportunity.</p>

<p>So I did, and because I&#8217;m a programmer I carefully enumerated my thoughts. If you&#8217;re on the fence at all about taking the plunge, maybe my reasoning will help you. Or horrify you &#8211; either way, you&#8217;ll have an opinion!</p>

<!-- more -->


<h2>Why You Should Apply</h2>

<ol>
<li><h3>They&#8217;ve literally written books about how great it is to work there.</h3>

<p>If you haven&#8217;t read <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745">Rework</a> you probably should. 37signals is immune to typical corporate bullshit: you won&#8217;t find stupid meetings, outside investors, or anyone burning the midnight oil here. You&#8217;ll find work. Great, meaningful, empowering work. When you get right down to it, isn&#8217;t that what people actually want out of their jobs? And you know 37signals is 100% dedicated to keeping it that way, since, well, as I said, they literally wrote the book on their business practices. They&#8217;re committed not only to the customer experience, but the employee experience. And that counts for a lot.</p></li>
<li><h3><a href="http://en.wikipedia.org/wiki/David_Heinemeier_Hansson">The Man Himself</a>.</h3>

<p>For those who think that intellect is at least as sexy as looks, this man would be the January pinup for the Men of 37Signals wall calendar I&#8217;ve been lobbying so hard for them to make. He&#8217;s the inventor of Rails, he&#8217;s highly opinionated, and he even drives race cars! Assuming he takes a shine to you, what&#8217;s not to like? I imagine that, if you announced to a room of programmers, &#8220;I work with DHH,&#8221; there would be a brief hush and then everyone would be talking over each other. One would say, &#8220;That man is a crazy person!&#8221; And another, &#8220;He&#8217;s the greatest programmer to ever draw breath!&#8221; There&#8217;s not a lot of people in the world you can work with who are smart, polarizing, and have invented the application framework you use in your day-to-day job. (And drive race cars.) You should jump at the opportunity to work with DHH.</p></li>
<li><h3>Fame &amp; fortune await.</h3>

<p>Or, well, at least fame does. I have no idea what 37signals would offer for this job, though I bet they aren&#8217;t stingy on the paychecks. But being part of 37signals (while once again polarizing) ensures you notoriety in the world of Rails in particular and programmers in general. Most people you&#8217;ll talk to will know where you work. Your title and position will be meaningful &#8211; and also note that your personal fame will skyrocket. If you wanted to suddenly gain a few thousand Twitter followers (without having to pay $5.00), getting this job would be a great way to do it. Keep in mind too that, when you&#8217;re a 37signals alum (unless you intend to be a lifer), having &#8220;Programmer at 37signals&#8221; on your resume will look even more stellar than all those follower numbers.</p></li>
<li><h3>Work with the best &#8211; and be the best.</h3>

<p>37signals&#8217; programming team is the crème de la crème of the Rails world. You&#8217;ll be challenged constantly to be just as great as they are. Imagine an environment where you might be the weakest link &#8211; doesn&#8217;t that thought thrill you? To work with the smartest, most dedicated people in the business? People who are at the apex of their field? You&#8217;ll grow and change and learn in ways you probably never expected, all because 37signals is a team of the best. And you can also take secret joy in the thought that, since they accepted you, they must see some of the same greatness in you as well.</p></li>
</ol>


<h2>Why You Shouldn&#8217;t</h2>

<ol>
<li><h3>You&#8217;re not the best.</h3>

<p>But in a team of greats, even being great is not enough &#8211; or, to use a more colorful metaphor, in a constellation with stars as bright as 37signals, you have little hope of shining brighter. I hear Google engineers suffer from similar problems, and also University of Chicago undergraduates. Coming from places where you were the best, now you&#8217;ll be just another programmer. For some, the knowledge that they&#8217;re there is enough: but there are lots of places with amazing teams, and some where the teams have more room for you to stand out than in 37signals (or Google or the U of C). These places are waiting for you, though they don&#8217;t yet have the fame and reach of 37signals. It&#8217;s up to you to find them!</p></li>
<li><h3>While it&#8217;s a great company, it&#8217;s still a company.</h3>

<p>I love startups. In a startup I&#8217;m not just a programmer: I do lots and lots of work with computers, it&#8217;s true, and most of that is programming. But I&#8217;m also responsible for marketing, design, number crunching, tech support, user experience, and when you get right down to it a little bit of everything else too. In a small group you must be a talented polymath, and what you don&#8217;t know how to do you learn quickly. 37signals is 36 people big and they were founded in 1999. Personally speaking I like growing outside of my computer-walled comfort zone. How much of that would you get at 37signals? That&#8217;s not an easy question to answer, but I would bet not a whole lot &#8211; or, at least, less than you would somewhere else.</p></li>
<li><h3>Go do it yourself.</h3>

<p>While 37signals is a great company, there&#8217;s nothing inherently special about it. They make CRM software, and while that&#8217;s an interesting problem space, there&#8217;s tons of fascinating questions to answer out there &#8211; questions that can only be answered through excellent software! The point of Rework is that there&#8217;s no real magic in 37signals that people who are smart and dedicated can&#8217;t create themselves. In my heart, I feel like DHH would look down on you for joining a corporation instead of becoming an awesome entrepreneur yourself. Sure, you&#8217;d be joining his company, but ultimately, if you&#8217;re so great, why aren&#8217;t you out there making a name of your own, rather than riding on someone else&#8217;s coattails? Even if they&#8217;re his.</p></li>
<li><h3>Fame &amp; fortune await!</h3>

<p>If you&#8217;re a gainfully employed Rails programmer, most likely you make a comparable amount to what 37signals could offer you, unless they&#8217;re dramatically out of line with what the market pays. And while they&#8217;re famous (and you would become more so, too, if you joined them), if you want to be a programming luminary in your own right, you can&#8217;t join stars that have already risen. Do you really want fame and fortune? Then you don&#8217;t want to join 37signals. They&#8217;ve already arrived there, and while there&#8217;s money to be made and people to impress, if you want to to make it big you need to take a risk and not join an established, successful company&#8230; regardless of how awesome they are.</p></li>
</ol>


<h2>In The End</h2>

<p>At the point I&#8217;m at in my career, 37signals &#8211; while incredibly appealing &#8211; isn&#8217;t the right choice for me. I hope to conquer the world myself, rather than join victorious conquerers. But where I was at five years ago? I would have moved heaven and earth to swing an interview there. If you haven&#8217;t picked this up already, they&#8217;re my programming heroes: and they should be yours too, because they care about everything that&#8217;s important in this industry. So if you&#8217;re at all interested in being a programmer among programmers, then 37signals is calling you.</p>

<p>If not, I look forward to seeing what you create in the future, because I bet it&#8217;ll be stellar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Existing Rails API Solutions Suck]]></title>
    <link href="http://joshsymonds.com/blog/2013/02/22/existing-rails-api-solutions-suck/"/>
    <updated>2013-02-22T11:00:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/02/22/existing-rails-api-solutions-suck</id>
    <content type="html"><![CDATA[<p>In the past two months, since joining <a href="http://everest.com">Everest</a>, I&#8217;ve spent quite a lot of time and effort researching and reviewing the various Rails API gems and I&#8217;ve come to a startling and disheartening conclusion.</p>

<p>They all suck.</p>

<p>In different ways, sure. And many have redeeming characteristics. But overall none of them do what I would consider the three most important parts of supporting a Rails API:</p>

<ol>
<li>Be DRY. I need versioning without copy and pasting huge swathes of code. If I want to make a query optimization in an API endpoint I shouldn&#8217;t need to browse through every version of the API, applying it to each file.</li>
<li>Support views (or something like them). Rendering JSON in controllers and models is inappropriate. JSON is a representation of data: a representation of data is a view of a model. You can argue this is a presenter or serializer or whatever, and that&#8217;s fine. There are clearly places where this logic should <strong>not</strong> be, though.</li>
<li>Integrate with Rails. I have an existing and complicated web application that I want to provide an API for. Probably I want to leverage the power of the Rails stack and everything I&#8217;ve installed in it, like logging, error reporting, performance metrics and so on.</li>
</ol>


<p>Taken in that light, then, here are mini-reviews for every existing Rails API Gem I could find. And believe me, I think I found most of them. (Spoiler alert: they suck.)</p>

<!-- more -->


<h2><a href="https://github.com/intridea/grape">grape</a></h2>

<p>grape has some really cool features. Being able to define params and a description before an endpoint, rake-style, makes it incredibly obvious what you&#8217;re doing and what you&#8217;re expecting. Also it makes generating documentation quick and easy. If I were doing an incredibly small Sinatra-only API, I would choose grape to do it in every time.</p>

<p>Unfortunately that&#8217;s where the great stuff ends. For Rails applications &#8211; assuming you actually want to use grape with Rails &#8211; it is really an unpleasant solution, since it just doesn&#8217;t play nicely with Rails.</p>

<p>First, its error handling, logging, and most of its middleware stack are entirely divorced from the rest of your Rails application. I hope you don&#8217;t want to use <a href="http://newrelic.com">NewRelic</a> or <a href="http://ratchet.io">Ratchet.io</a> with grape, because if you do you&#8217;re on your own, buddy. Sure, you can get it in manually. Hooray for manual labor. In order to provide unified Graylog2 logging, statsd statistics, and error reporting for Rails and grape, I extracted the common bits into a middleware that sits in front of both of them. This was ugly and unpleasant, and frankly seemed really unnecessary.</p>

<p>Second, and for those of you already gearing up to say &#8220;but grape isn&#8217;t FOR Rails&#8221;, you end up duplicating a lot of Rails&#8217; structure inside it anyway, even in small applications. If you don&#8217;t want your API file to be two thousand lines long, you end up including endpoint modules that smell suspiciously like controllers, except with inline routing. In an actual Rails application, this separate but similar structure is by tradition hidden in the <code>lib/</code> directory, where nothing at all integral to your application ordinarily resides.</p>

<p>Third, if you want to version your API, you get to copy and paste the entire thing. To prevent us doing this every time at Everest, I implemented a module inheritance system for the API versions, but frankly it feels hacky and was difficult to get grape to support properly.</p>

<p>Fourth, its caching support is pathetic. You have to install a completely separate gem (<a href="https://github.com/artsy/garner">garner</a>) if you want any kind of caching at all. Do people who use grape not experience any sort of load? Do their APIs not engage in any sort of database querying? Why is this a tacked-on side project instead of a core feature?</p>

<p>And of course it has no view support. If you want to reuse data representations, define a method in the base API and call it all over the place. It&#8217;s like a view, but more hidden!</p>

<p>I assume some people must use grape for at least as complicated an app as I do. When I was Googling how to do versioning without copy pasting, I came across numerous slideshows from various Rails conferences discussing how great it is. None of them address any of these problems, so I&#8217;m curious how the really big players make grape work without these difficulties. (My suspicion is they don&#8217;t use grape.)</p>

<h2><a href="https://github.com/fabrik42/acts_as_api">acts_as_api</a></h2>

<p>Who thought that putting data representations inside a model was a good idea? Data representations go inside a view &#8211; that&#8217;s what views are for. You don&#8217;t see rules for coercing models to HTML inside a model. Why should JSON then be allowed? Well, to answer my rhetorical question, it shouldn&#8217;t.</p>

<p>This gem leads to really horrible uses like this when you version an API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">api_accessible</span> <span class="ss">:public</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:id</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:first_name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:last_name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:real_name</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:gender</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">api_accessible</span> <span class="ss">:with_timezone</span><span class="p">,</span> <span class="kp">extend</span><span class="p">:</span> <span class="ss">:public</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">add</span> <span class="ss">:timezone</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a versioned resource. You don&#8217;t want to change the existing representation and break clients that already use the API, so instead you extend it and add in a field. The old representation has to live in your model forever, a silent sentry to the history of your mistakes, bloating your model until the day you finally get fed up with lines and lines of this and switch to actually using views for their intended purpose.</p>

<h2><a href="https://github.com/filtersquad/rocket_pants">rocket_pants</a></h2>

<p>rocket_pants actually does quite a lot right (besides having a sweet name): it&#8217;s fairly DRY and it integrates with Rails pretty well.</p>

<p>That said, versioning is still a tremendous pain in the butt. Routing allows you to at least select which controller your requests are sent to, but this quickly gets complicated:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#item&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#item2&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">2</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#override&#39;</span> <span class="c1"># how does this interact with the line above?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span> <span class="n">version</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;test#item3&#39;</span> <span class="c1"># x now does something different for only versions 2 and 4</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Confusing!</p>

<p>Why not have a simple fallback method where you define the highest version of your API, and the router checks to see which controllers exist in that version, moving back to an earlier version until it finds a defined controller? You could even have the router detect this on application load to prevent increased loading times. Then you don&#8217;t need any sort of fooling around with complicated routing rules. Instead you just define the basic structure of your API and your application correctly infers versions from it, and if you have specific overrides you can address them in the routing file.</p>

<p>Wishing aside, rocket_pants also doesn&#8217;t use views, instead encouraging you to use a model&#8217;s <code>serializable_hash</code> method to instruct it how to convert the model to JSON. Let&#8217;s hope you don&#8217;t have more than one representation of your model.</p>

<h2><a href="https://github.com/bploetz/versionist">versionist</a></h2>

<p>versionist supports views correctly but it suffers from a tremendously overwhelming amount of copy/pasting. It you want to version your API, it copies not only the routes inside your routes.rb, but also:</p>

<ul>
<li>Your controllers and controller specs</li>
<li>Your presenters and presenter specs</li>
<li>Your helpers and helper specs</li>
<li>Your docs</li>
</ul>


<p>To a new location. These are just copies: in all likelihood they&#8217;ll end up largely exactly the same as the previous version. It provides a Rails generator that does this automatically. I&#8217;m on the fence as to whether great support for poor design patterns is unironically helpful though.</p>

<h2><a href="https://github.com/erichmenge/api-versions">api-versions</a></h2>

<p>Though it&#8217;s practically unknown, in all my searching this is the gem that really got closest to what I was looking for. By default, it uses this heretofore unseen programming concept called &#8220;inheritance&#8221; to prevent code duplication from one version of your API to the next.</p>

<p>Unfortunately, when you use its helpfully-provided Rails generator <code>api_versions:bump</code> it still creates a new controller for each of your old controllers. While they inherit code, which is nice, why do you have an empty controller just to provide inheritance to a previous version of the API? Still, this is definitely the least amount of copy/pasting we&#8217;ve seen up until this point, and I sincerely appreciate the author&#8217;s attempt to remain DRY in the very wet API landscape.</p>

<h2>So what should I do if I&#8217;m making a Rails API?</h2>

<p>Use <a href="https://github.com/rails/jbuilder">jbuilder</a> (or <a href="https://github.com/nesquena/rabl">rabl</a>) to create views. If you have a tremendous hatred of views, use <a href="https://github.com/rails-api/active_model_serializers">active_model_serializers</a> instead to achieve the same goal. Your controllers should be pretty much like regular Rails ActionControllers. Feel free to include an extremely low-touch library like <a href="https://github.com/bploetz/versionist">versionist</a> or <a href="https://github.com/erichmenge/api-versions">api-versions</a>. Put most of your controller code in modules and include it in the actual controllers to prevent copy and pasting everywhere for the first. For the latter, not much you can do. Suck it up and copy and paste in your routes for both. Unfortunately, that&#8217;s the best solution I can come up with.</p>

<h2>Stop whining and do something about it!</h2>

<p>You know what? I think I will.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Automation With Phillips Hue &amp; Huey]]></title>
    <link href="http://joshsymonds.com/blog/2013/02/20/home-automation-with-phillips-hue-and-huey/"/>
    <updated>2013-02-20T19:32:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/02/20/home-automation-with-phillips-hue-and-huey</id>
    <content type="html"><![CDATA[<p>I released v1.0.0 of <a href="https://github.com/Veraticus/huey">huey</a> today, adding some exciting new features: specifically, light groups and group events. Using them enabled me to quickly and easily set up a light timing schedule from one of my home machines, managed with cron (through the excellent <a href="https://github.com/javan/whenever">whenever</a> gem). In case you too would like awesome automatic light magic, here&#8217;s how to make it work.</p>

<!-- more -->


<h2>Huey v1.0.0</h2>

<p>New in huey v1.0.0 are light groups: arbitrary collections of bulbs on which you can run commands simultaneously. Getting them to work is ridiculously simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Living Room&#39;</span><span class="p">)</span> <span class="c1"># Contains all bulbs that have &#39;Living Room&#39; in their name</span>
</span><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Living Room&#39;</span><span class="p">,</span> <span class="s1">&#39;Foyer&#39;</span><span class="p">)</span> <span class="c1"># All bulbs that have either &#39;Living Room&#39; or &#39;Foyer&#39; in their name</span>
</span><span class='line'><span class="n">g</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span> <span class="c1"># A group specifically containing bulbs 1 and 3</span>
</span><span class='line'><span class="n">g</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;My Bulbs&#39;</span> <span class="c1"># Name your group to find it later</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have a group set up, you can act on all its bulbs simultaneously as you would on any individual bulb.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;My Bulbs&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">bri</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">on</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">save</span> <span class="c1"># All changes you&#39;ve made are committed to all the bulbs in a group</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">bri</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="n">ct</span><span class="p">:</span> <span class="mi">500</span><span class="p">)</span> <span class="c1"># Set and save in one step</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you probably want to do the same actions to groups over and over again: for example, dimming all your lights at night and brightening them in the morning. For that we have a shorthand called events:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">event</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Event</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;All Lights Off&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="n">group</span><span class="p">,</span> <span class="n">actions</span><span class="p">:</span> <span class="p">{</span><span class="n">on</span><span class="p">:</span> <span class="kp">false</span><span class="p">})</span>
</span><span class='line'><span class="n">event</span><span class="o">.</span><span class="n">execute</span> <span class="c1"># All lights turn off</span>
</span></code></pre></td></tr></table></div></figure>


<h2>YAML Setup</h2>

<p>Huey can read your groups and events from YAML configuration files. Here&#8217;s a sample from my setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># groups.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">Study</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;Study</span><span class="nv"> </span><span class="s">Side&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Study</span><span class="nv"> </span><span class="s">Ceiling&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">Bedroom</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;Bedroom</span><span class="nv"> </span><span class="s">Left&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Bedroom</span><span class="nv"> </span><span class="s">Right&quot;</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">Living Room</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="s">&quot;Living</span><span class="nv"> </span><span class="s">Room</span><span class="nv"> </span><span class="s">Front&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Living</span><span class="nv"> </span><span class="s">Room</span><span class="nv"> </span><span class="s">Center&quot;</span><span class="p-Indicator">,</span> <span class="s">&quot;Living</span><span class="nv"> </span><span class="s">Room</span><span class="nv"> </span><span class="s">Back&quot;</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># events.yml</span>
</span><span class='line'><span class="l-Scalar-Plain">Wakeup</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Bedroom</span>
</span><span class='line'>  <span class="l-Scalar-Plain">actions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;on&quot;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">bri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">255</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ct</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">200</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">Sunset</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">group</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Bedroom</span>
</span><span class='line'>  <span class="l-Scalar-Plain">actions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="s">&quot;on&quot;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">bri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">255</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ct</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">350</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s1">&#39;groups.yml&#39;</span><span class="p">)</span> <span class="c1"># Import groups</span>
</span><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Event</span><span class="o">.</span><span class="n">import</span><span class="p">(</span><span class="s1">&#39;events.yml&#39;</span><span class="p">)</span> <span class="c1"># Import events</span>
</span><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Event</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;Wakeup&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">execute</span> <span class="c1"># Run an event on a group</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m setting up three groups here, called Study, Bedroom, and Living Room. I have a lot of potential events and I selected two to show here: what happens when we wake up, and the corresponding later afternoon setup. (If we end up hating this it&#8217;s likely to change, but it gives you an idea how this is supposed to work, anyhow.) Once everything is slurped in, running an event is simple.</p>

<h2>Whenever</h2>

<p>Finally, I have it all stitched together through whenever, because who likes reading crontabs? When you set up whenever, it creates a file called config/schedule.rb that it uses to read the crontab. I altered mine to include this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">job_type</span> <span class="ss">:event</span><span class="p">,</span> <span class="sx">%Q(cd /directory/to/huey_control &amp;&amp; ruby -e &quot;require &#39;huey&#39;; Huey::Group.import(&#39;groups.yml&#39;); Huey::Event.import(&#39;events.yml&#39;); Huey::Event.find(&#39;:task&#39;).execute(true)&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="ss">:weekday</span><span class="p">,</span> <span class="n">at</span><span class="p">:</span> <span class="s1">&#39;9:30AM&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">event</span> <span class="s2">&quot;Wakeup&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To install your new crontab, use <code>whenever --update-crontab</code>.</p>

<p>That&#8217;s all there is to it! Now your Hue lights will work in perfect synchronization with the schedule you&#8217;ve provided, allowing you to set up your home lighting system however you like, and alter it easily from cron.</p>

<p>But there&#8217;s a lot more you can do with huey if you&#8217;d like. Why not make an event that&#8217;s triggered by an incoming email or phone call? Or set your door bell to flash your lights instead of ring a chime? With events and light groups, setting up this kind of awesome automation functionality is easier than ever. So go do something cool with it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reachability with RubyMotion]]></title>
    <link href="http://joshsymonds.com/blog/2013/02/04/reachability-with-rubymotion/"/>
    <updated>2013-02-04T17:55:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/02/04/reachability-with-rubymotion</id>
    <content type="html"><![CDATA[<p>A couple days ago I shared with a friend my code to quickly and easily do reachability checks in RubyMotion, and I figured I would post the code on my blog as well. In addition to detecting network reachability, this code suspends the operation queue when the target host is unreachable, allowing you to continue appending requests and ensuring that they will be delivered in the order they were queued.</p>

<p>There might be a more efficient way to do something similar, but this works for me.</p>

<!-- more -->


<h2>Rakefile</h2>

<p>Add the really awesome <a href="https://github.com/tonymillion/Reachability">Reachability</a> Pod to your project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Motion</span><span class="o">::</span><span class="no">Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">pods</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">pod</span> <span class="s1">&#39;Reachability&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AFNetworking AFHTTPClient Subclass</h2>

<p>I also use the super convenient AFNetworking library to quickly and easily do REST-compliant requests to my servers. This is the code I stick in my AFHTTPClient:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ServerClient</span> <span class="o">&lt;</span> <span class="no">AFHTTPClient</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Singleton!</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">instance</span>
</span><span class='line'>    <span class="vc">@@instance</span> <span class="o">||=</span> <span class="kp">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hostname</span>
</span><span class='line'>    <span class="s1">&#39;http://yourhosthere.com&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setupReachability</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">maxConcurrentOperationCount</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">suspended</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@reachability</span> <span class="o">=</span> <span class="no">Reachability</span><span class="o">.</span><span class="n">reachabilityWithHostname</span><span class="p">(</span><span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">hostname</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@reachability</span><span class="o">.</span><span class="n">reachableBlock</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">reachable</span><span class="o">|</span> <span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">suspended</span> <span class="o">=</span> <span class="kp">false</span><span class="p">}</span>
</span><span class='line'>    <span class="vi">@reachability</span><span class="o">.</span><span class="n">unreachableBlock</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">reachable</span><span class="o">|</span> <span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">operationQueue</span><span class="o">.</span><span class="n">suspended</span> <span class="o">=</span> <span class="kp">true</span><span class="p">}</span>
</span><span class='line'>    <span class="vi">@reachability</span><span class="o">.</span><span class="n">startNotifier</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>app_delegate.rb</h2>

<p>Finally, call the setupReachability method in your app delegate and you&#8217;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span><span class="ss">:launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="no">ServerClient</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">setupReachability</span>
</span><span class='line'>    <span class="no">AFNetworkActivityIndicatorManager</span><span class="o">.</span><span class="n">sharedManager</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Cookbooks for Rails]]></title>
    <link href="http://joshsymonds.com/blog/2013/01/22/chef-cookbooks-for-rails/"/>
    <updated>2013-01-22T12:36:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/01/22/chef-cookbooks-for-rails</id>
    <content type="html"><![CDATA[<p>I spent awhile trying to find other people&#8217;s Chef cookbook collections for deploying Rails applications. In the absence of anything other than old GitHub repositories, I decided to write a quick post summarizing the cookbooks I used and a few settings that made them work as I expected. I&#8217;ll go by the roles that I created to organize the cookbooks, starting with the most basic: base.</p>

<!-- more -->


<h2>base</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run_list</span> <span class="sx">%W(</span>
</span><span class='line'><span class="sx">  recipe[chef-client::delete_validation]</span>
</span><span class='line'><span class="sx">  recipe[chef-client::config]</span>
</span><span class='line'><span class="sx">  recipe[chef-client::service]</span>
</span><span class='line'><span class="sx">  recipe[apt]</span>
</span><span class='line'><span class="sx">  recipe[monit]</span>
</span><span class='line'><span class="sx">  recipe[postfix]</span>
</span><span class='line'><span class="sx">  recipe[openssh]</span>
</span><span class='line'><span class="sx">  recipe[ntp]</span>
</span><span class='line'><span class="sx">  recipe[vim]</span>
</span><span class='line'><span class="sx">  recipe[build-essential]</span>
</span><span class='line'><span class="sx">  recipe[user::data_bag]</span>
</span><span class='line'><span class="sx">  recipe[logrotate]</span>
</span><span class='line'><span class="sx">  recipe[ohai]</span>
</span><span class='line'><span class="sx">  recipe[ruby_build]</span>
</span><span class='line'><span class="sx">  recipe[rbenv::system]</span>
</span><span class='line'><span class="sx">  recipe[sudo]</span>
</span><span class='line'><span class="sx">  recipe[zsh]</span>
</span><span class='line'><span class="sx">  recipe[oh-my-zsh]</span>
</span><span class='line'><span class="sx">  recipe[collectd]</span>
</span><span class='line'><span class="sx">  recipe[collectd::attribute_driven]</span>
</span><span class='line'><span class="sx">  recipe[htop]</span>
</span><span class='line'><span class="sx">  recipe[runit]</span>
</span><span class='line'><span class="sx">  recipe[rsyslog::client]</span>
</span><span class='line'><span class="sx">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the run list I&#8217;m using as the base for all the servers. I don&#8217;t think there&#8217;s anything surprising here, but I do want to point out a few things:</p>

<ul>
<li><strong>openssh</strong> should be configured like this:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">default_attributes</span> <span class="s1">&#39;openssh&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;permit_root_login&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;no&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;password_authentication&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;no&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You don&#8217;t want to allow root logins or password logins. It is also probably worthwhile to delete any preexisting sudoer for your AMI image if one exists (like ubuntu for example), using&#8230;</p>

<ul>
<li><p><strong>user::data_bag</strong> from <a href="http://github.com/fnichol/chef-user">this cookbook</a>. It allows you to have data bags for your users that get automatically added (or removed) from every server. It&#8217;s really helpful.</p></li>
<li><p>I went back and forth on <strong>ruby_build and rbenv</strong> in the base cookbook. Compiling your own Ruby takes significantly longer than installing Ruby from a package, and I could just compile Ruby on the application servers and use the Ruby package on everything else. Ultimately I decided to keep compiled Ruby in the base list &#8211; it seems slightly faster than the package and allows me to apply performance patches, and since I made an AMI of the base role the speed difference didn&#8217;t matter a whole lot to me. But I can definitely see taking this out.</p></li>
<li><p><strong>zsh and oh-my-zsh</strong> are obviously just silly nice-to-haves. Use a zsh theme that says the server name or else you&#8217;ll get confused.</p></li>
</ul>


<h2>statistics</h2>

<p>I&#8217;m running Graylog2 and Graphite to compile logs and interesting statistics from our servers. This is the runlist that establishes the role dedicated to these two pieces of software, which I called <code>statistics</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run_list</span> <span class="sx">%W(</span>
</span><span class='line'><span class="sx">  recipe[ebs]</span>
</span><span class='line'><span class="sx">  recipe[apache2]</span>
</span><span class='line'><span class="sx">  recipe[statsd]</span>
</span><span class='line'><span class="sx">  recipe[python]</span>
</span><span class='line'><span class="sx">  recipe[graphite]</span>
</span><span class='line'><span class="sx">  recipe[graylog2]</span>
</span><span class='line'><span class="sx">  recipe[graylog2::apache2]</span>
</span><span class='line'><span class="sx">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I use <a href="https://github.com/titanous/chef-ebs">this EBS cookbook</a> with this configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_attributes</span> <span class="s1">&#39;ebs&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;volumes&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;/data&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;fstype&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;xfs&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This server saves and compiles enormous amounts of data, and in order to hold it all correctly I provision an external EBS drive to contain it. I&#8217;m actually not even sure 100 gigs is enough space but it seems good for now. elasticsearch, mongodb, and graphite are all set up to save their data to subdirectores in /data. While I could easily have made this a RAID array instead, persistence of this data is not super important to me right now: while it would suck to lose all our analytics information, given our traffic it would rebuild into something useful very quickly anyway.</p>

<p>I would use nginx instead of Apache2, but for a server only accessible internally that will probably not see a lot of traffic, it was much easier and faster to just set up Apache2 and passenger than start unicorns for the Graphite and Graylog web interfaces.</p>

<h2>app</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run_list</span> <span class="sx">%W(</span>
</span><span class='line'><span class="sx">  recipe[imagemagick]</span>
</span><span class='line'><span class="sx">  recipe[nginx]</span>
</span><span class='line'><span class="sx">  recipe[unicorn]</span>
</span><span class='line'><span class="sx">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Probably among the least surprising roles. The application servers use nginx and unicorn for blazingly fast speed. Make sure to add the nginx collectd plugin to this server for additional metrics and monitoring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_attributes</span> <span class="s1">&#39;collectd&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;plugins&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;nginx&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And those are the basic roles I developed. Because Everest is a complicated application there are a number of roles that I don&#8217;t discuss here, but this should be more than enough to get anyone started for some good, sensible Chef cookbooks to use with Rails.</p>

<h1>Security &amp; Safety</h1>

<p>Before you deploy a server using any of these roles, make sure to keep security and safety in mind. A lot of these tools (like Graphite and Graylog2) allow web access and run servers with potential security vulnerabilities. Lock them behind Apache2 basic access, change your EC2 security group settings to allow only certain IP addresses access, and establish a VPN for your internal network. With logs, statistics, and other business-sensitive information, you can never be too security-conscious.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Chose Chef Over Rubber]]></title>
    <link href="http://joshsymonds.com/blog/2013/01/18/why-i-chose-chef-over-rubber/"/>
    <updated>2013-01-18T14:34:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2013/01/18/why-i-chose-chef-over-rubber</id>
    <content type="html"><![CDATA[<p>One of my mandates at Everest has been to sanitize the server build and deploy process. Provisioning every server individually with the same bash script was not exactly the height of extensibility and maintainability, and unfortunately had resulted in an enormous cluster that was very opaque: there was nearly no visibility into what the servers were actually doing. When I evaluated options to create a better process I looked at my go-to configuration management tool, <a href="https://github.com/wr0ngway/rubber">rubber</a>, in addition to <a href="http://en.wikipedia.org/wiki/Chef_(software)">Chef</a> and <a href="http://en.wikipedia.org/wiki/Puppet_(software)">Puppet</a>. As a result of this evaluation &#8211; and surprising even myself &#8211; I ended up choosing Chef as our solution. Here&#8217;s why.</p>

<!-- more -->


<h2>Collaboration</h2>

<p>One of rubber&#8217;s weaknesses is it is not a particularly great collaborative tool. If both you and someone else are provisioning a new server simultaneously, you&#8217;ll get a merge conflict in your server yaml file: you really don&#8217;t want to make a mistake resolving <em>that</em> merge conflict.</p>

<p>By contrast, it&#8217;s really easy for multiple people to work together in Chef. You can be working in the same cookbook, even, and just altering different recipes. Bootstrapping several servers simultaneously couldn&#8217;t be easier. And treating the Chef server as the central authority for cookbooks is also extremely helpful for keeping everyone on the same page with regards to what&#8217;s actually going into the servers.</p>

<p>Chef is just a better tool for teams of people.</p>

<h2>Extensibility &amp; Community Support</h2>

<p>For the tools that rubber provides in its stack &#8211; and it provides a lot &#8211; it&#8217;s an excellent solution. But adding additional facilities into rubber is a pain. You either have to come up with recipes on your own, or hope that someone has a semi-active fork with what you want in it. There&#8217;s no real extensibility, and while it&#8217;s easy enough to roll your own recipes, it&#8217;d definitely be ideal not to repeat work if you&#8217;re fairly confident someone else has already done it.</p>

<p>Enter Chef cookbooks. There are a frightening amount of active cookbooks on Github for every need imaginable. Many are actively supported, and even if they&#8217;re not precisely what you&#8217;re looking for, they provide an excellent jumping-off point for creating your own solutions.</p>

<p>We&#8217;re using the excellent <a href="https://github.com/applicationsonline/librarian">librarian</a> gem to manage our external cookbooks and the source cookbooks I&#8217;ve been developing internally for us. It&#8217;s a great way to treat cookbooks like any other dependency to resolve, and will save you a lot of time in git cloning repositories.</p>

<h2>More Granularity</h2>

<p>rubber allows you to control a lot, on a per-server basis. But it has no real equivalent to data bags or even environments. Adding a user&#8217;s SSH key to my deploy recipe used to be an unpleasant process. Now I can just update the users data bag with a new entry and instruct my servers to pull it: tada, new user on the servers.</p>

<p>Similarly changing postfix configuration on a per-environment basis is a snap.</p>

<h1>But Rubber is a Great Tool</h1>

<p>Don&#8217;t get me wrong: I still really like rubber. It doesn&#8217;t fit for Everest&#8217;s use case, definitely &#8211; with so many servers and so much going on behind the scenes, we really needed more granularity, control, and power. But if I were provisioning just one server, or even three or four, then rubber would still be my go-to tool.</p>

<p>Why? It&#8217;s just a whole lot faster to get started with than Chef. It makes tons of sensible default decisions that simplify your life really significantly. You don&#8217;t have to go searching for good recipes or the right way to do things. Just like Rails, rubber <strong>knows</strong> the right way to do things. As long as you take its advice you&#8217;ll go far, but trying to work against its defaults will be really painful.</p>

<h2>Final Word on Chef vs. Puppet</h2>

<p>Doesn&#8217;t matter, choose whichever you like more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking Up With GirlsGuideTo]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/27/breaking-up-with-girlsguideto/"/>
    <updated>2012-12-27T19:40:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/27/breaking-up-with-girlsguideto</id>
    <content type="html"><![CDATA[<p>It&#8217;s never easy to decide to move on, particularly when you&#8217;re a cofounder. It definitely feels less like a business shakeup and more like a real breakup.</p>

<p>But I must announce that my time at GirlsGuideTo has officially ended.</p>

<p>I&#8217;m proud of the work I&#8217;ve done for GirlsGuideTo. I took a <a href="http://old.girlsguideto.com/home">decrepit, slow PHP Drupal installation</a> and turned it into a <a href="http://girlsguideto.com/">speedy, modernized Rails application</a>. The new GirlsGuideTo uses some incredibly modern technologies to be fast, while still being maintainable and consistent. The pages load near-instantly thanks to <a href="http://joshsymonds.com/blog/2012/12/18/making-your-web-pages-ridiculously-fast-without-breaking-them/">head.js and Turbolinks</a>, and the Rails code is well-separated and highly tested thanks to some awesome concerns and really nifty Rack middleware.</p>

<p>It also features a really kickass design from my friend <a href="https://twitter.com/LukesBeard">@LukesBeard</a>, so it also looks great in addition to feeling great.</p>

<p>Though I&#8217;m moving to greener pastures, I&#8217;m sure GirlsGuideTo has a bright future ahead of them. As for me, I&#8217;m doing some work for <a href="http://everest.com/">Everest</a> &#8211; they&#8217;re really awesome people that need their backend scaled right into infinity, and I think I&#8217;m the guy to do it for them. In fact, if you download the <a href="https://itunes.apple.com/us/app/everest-live-your-dreams-achieve/id581016826?mt=8">super cool free app</a> or have downloaded it at launch, you&#8217;ve already touched some of my code! The best part about onboarding quickly is having code live in production almost immediately.</p>

<p>So keep on watching this spot for more of the same that you&#8217;ve come to expect &#8211; adrenaline-filled posts on the exciting world of server scalability and optimization.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Huey Gem Release]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/21/huey-gem-release/"/>
    <updated>2012-12-21T01:53:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/21/huey-gem-release</id>
    <content type="html"><![CDATA[<p>I pushed the first version of <a href="https://github.com/Veraticus/huey">Huey</a> to <a href="http://rubygems.org/gems/huey">RubyGems</a> (calling it 0.1.0).</p>

<p>It&#8217;s in a really good state right now, actually &#8211; in addition to a rather full and complete set of tests, I added a couple neat new features:</p>

<ul>
<li><p>Now you can make as many changes as you like to a bulb, and then commit them all at once with <code>save</code> (alias as <code>commit</code> for your convenience).</p></li>
<li><p>Ability to set colors as a RGB hex. So you can do <code>bulb.rgb  = '#8FF1F5'</code> to get your bulb to be colored aqua. Colors in Hue are a little more pastel than you might expect, though, so exact shade matching might take a bit of experimentation.</p></li>
<li><p>Copyright and license information.</p></li>
</ul>


<p>I&#8217;ll be adding more features as I use it more, so watch <a href="https://github.com/Veraticus/huey">the repository</a> for changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making your Web Pages Ridiculously Fast (Without Breaking Them)]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/18/making-your-web-pages-ridiculously-fast-without-breaking-them/"/>
    <updated>2012-12-18T10:28:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/18/making-your-web-pages-ridiculously-fast-without-breaking-them</id>
    <content type="html"><![CDATA[<p>I spent a lot of time optimizing page loading speed on GirlsGuideTo. The result is pages that load almost instantly initially and on subsequent loads; and while I&#8217;m proud of the work I&#8217;ve done in getting these pages zippy, there was no real secret sauce involved. Here I&#8217;ll discuss techniques anyone can use to make their web pages load with amazing rapidity, all without breaking Google Analytics and other scripts you might already have installed.</p>

<!-- more -->


<h2>Speed It Up</h2>

<p>There are two JavaScript additions to your page I&#8217;ll be discussing here: head.js and Turbolinks.</p>

<h3>Head.js</h3>

<p>The first ingredient in our speed cake is <a href="http://headjs.com/">head.js</a>. While head.js has a number of components &#8211; media queries and dynamic CSS among them &#8211; the reason it initially became popular, and the reason I&#8217;m talking about it now, is its basic, core functionality. Head.js allows you to asynchronously load your page&#8217;s scripts. This might not sound like an enormous time savings, but consider this: do you use <a href="http://www.google.com/webfonts">Google Web Fonts</a> or <a href="https://typekit.com/">Adobe&#8217;s TypeKit</a>? Chances are you do, since everyone loves fonts. But fonts must be downloaded by the client browser, a process that usually occurs in the page&#8217;s head (before dom rendering has even begun), slowing down the rest of the page load while it waits.</p>

<p>And your user sees an empty browser while they&#8217;re waiting. That&#8217;s unacceptable.</p>

<p>Head.js alleviates this problem by giving you asynchronous script loading. Your application JavaScript, your fonts, jQuery, Google Analytics&#8230; everything that got put into your head that stopped your page from loading now loads at the same time as the rest of your content. Your user sees a page faster and is happier as a result.</p>

<p>Here&#8217;s what the code looks like for GirlsGuideTo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">head</span><span class="p">.</span><span class="nx">js</span><span class="p">(</span> <span class="p">{</span> <span class="s1">&#39;application&#39;</span><span class="o">:</span> <span class="s1">&#39;//girlsguideto.cloudfront.net/assets/application.js&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">&#39;typekit&#39;</span><span class="o">:</span> <span class="s1">&#39;//use.typekit.net/typekit.js&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">&#39;ga&#39;</span><span class="o">:</span> <span class="s1">&#39;//www.google-analytics.com/ga.js&#39;</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">&#39;jquery.embedly-2.1.7&#39;</span><span class="o">:</span> <span class="s1">&#39;//scripts.embed.ly/jquery.embedly-2.1.7.min.js&#39;</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course I didn&#8217;t hand-code that myself, I used the super helpful <a href="https://github.com/muitocomplicado/headjs-rails">headjs-rails</a> Gem to put this in my application.html.erb&#8217;s head:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= javascript_include_tag &quot;head.js&quot; %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">headjs_include_tag</span> <span class="s2">&quot;application&quot;</span><span class="p">,</span> <span class="s1">&#39;//use.typekit.net/typekit.js&#39;</span><span class="p">,</span> <span class="s1">&#39;//www.google-analytics.com/ga.js&#39;</span><span class="p">,</span> <span class="s1">&#39;//scripts.embed.ly/jquery.embedly-2.1.7.min.js&#39;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty easy, huh? Give it a shot and you&#8217;ll see your page load times start really blazing.</p>

<h3>Turbolinks</h3>

<p>Playing off of Defunkt&#8217;s amazing <a href="http://pjax.heroku.com/">pjax</a>, <a href="https://github.com/rails/turbolinks">Turbolinks</a> speeds up your pageloads by making every page request Ajax-y (or more accurately Pjax-y). When you click on a link, Turbolinks will fetch the page you requested and replace the existing document&#8217;s body with its content. No CSS or JavaScript loading occurs, making each page load blazingly fast &#8211; and thanks to the magic of pushState, your back button and everything else you&#8217;d expect on the page still work.</p>

<p>Turbolinks is ridiculously easy to install. Simply add it to your Gemfile and then, in your application.js, add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require turbolinks</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Now Fix It</h2>

<p>If you followed my advice up until this point, you might be stunned to discover your Google Analytics and <code>$(document).ready()</code> stuff has completely broken. No worries! We&#8217;ll fix it, and it&#8217;ll be quick and easy to do so.</p>

<h3>$(document).ready()</h3>

<p>This is the easiest thing to correct. <code>$(document).ready()</code> now fires before all your scripts have finished loading, since each script is loaded asynchronously and separately. So you&#8217;ll either see weird behavior from it, or it won&#8217;t execute at all (since $ will be undefined, as jQuery has yet to load). Simply replace all instances of <code>$(document).ready()</code> with <code>head()</code>. <code>head()</code> is called by head.js when your scripts have loaded. Something like this would make sense:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">head</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Load Typekit</span>
</span><span class='line'>  <span class="k">try</span><span class="p">{</span><span class="nx">Typekit</span><span class="p">.</span><span class="nx">load</span><span class="p">();}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Load Google Analytics</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_gaq</span> <span class="o">=</span> <span class="nx">_gaq</span> <span class="o">||</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">_gaq</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;_setAccount&#39;</span><span class="p">,</span> <span class="s1">&#39;UA-XXX-1&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">_gaq</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;_trackPageview&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Google Analytics</h3>

<p>Google Analytics will load correctly on your initial page load, now. But unfortunately it won&#8217;t load on any subsequent pages, since additional pages are called via Ajax. We need to hook into one of Turbolink&#8217;s events to correctly record users visiting our site:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">head</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;page:change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_gaq</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="s1">&#39;_trackPageview&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>page:change</code> is called every time Turbolinks fetches and renders a page: when it does so, we call Google analytics manually to inform it to track the current page view.</p>

<h3>Other Scripts</h3>

<p>This should get you 95% of the way to having pages that are incredibly fast and work very well. One last caveat is that any script that loads on <code>$(document).ready()</code> must now also load on <code>page:change</code> as well: ready is not called when the page is already loaded, after all. So if you have CoffeeScript like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">doExcitingThings</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll want to add this as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">doExcitingThings</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span> <span class="s">&#39;page:change&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">doExcitingThings</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember this is only for scripts that you&#8217;re sure are loaded after jQuery &#8211; scripts loaded asynchronously need to use <code>head()</code> instead of <code>$(document).ready()</code>.</p>

<p>And that&#8217;s all there is to it! With these simple tips (and simple fixes) your pages will be incredibly, ridiculously fast. The only downside to these techniques relates to Turbolinks. If you have a lot of script-specific state on your pages, clearing it out between page loads will probably be a big headache. For most of us, without highly stateful JavaScript applications, all you&#8217;ll see are massive speed improvements. Your users won&#8217;t believe how fast your site is, and best of all, these changes are really easy to implement. So what&#8217;re you waiting for? Get JavaScripting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Want for Christmas]]></title>
    <link href="http://joshsymonds.com/blog/2012/12/12/what-i-want-for-christmas/"/>
    <updated>2012-12-12T16:08:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/12/12/what-i-want-for-christmas</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working super hard recently, though not blogging about it, and meanwhile a lot of people have been asking me what I want for the holiday season.</p>

<p>Thus I&#8217;m taking a massive departure from the normal, professional tone of this blog and publishing a list of the holiday presents that would just bowl me over with joy. If you know and love me, feel free to buy any item from this list &#8211; or multiple ones if you know and love me that much.</p>

<p>If you don&#8217;t, then don&#8217;t worry about it! I&#8217;ll be back soon with real content that will hopefully be both pithy and edifying.</p>

<!-- more -->


<p>This is roughly in order of how strongly I desire the item in question.</p>

<ol>
<li>New pair of high-quality in-ear headphones with a microphone (iPhone compatible)</li>
<li><a href="http://www.nest.com/">Nest Thermostat</a></li>
<li><a href="https://jawbone.com/up">Jawbone Up</a></li>
<li>His &amp; his iPhone 5s</li>
<li>An awesome new logo from the amazing <a href="http://dribbble.com/jose_josedesign">Jose</a> that looks like <a href="http://dribbble.com/shots/480635-she">She</a> but says &#8220;Josh Symonds&#8221;</li>
<li><a href="https://itunes.apple.com/us/app/baldurs-gate-enhanced-edition/id515114051?mt=8">Baldur&#8217;s Gate: Enhanced Edition for the iPad</a></li>
<li><a href="http://www.gamestop.com/wii/games/xenoblade-chronicles-gamestop-exclusive/98535">Xenoblade Chronicles for the Wii</a></li>
<li>A new day of the week</li>
<li><a href="https://itunes.apple.com/us/app/punch-quest/id554223561?mt=8">Punch Quest for the iPhone</a></li>
<li><a href="http://smbc.myshopify.com/collections/shirts/products/save-yourself-mammal-shirt-s">&#8220;Save Yourself, Mammal!&#8221; t-shirt</a></li>
<li><a href="http://store.xkcd.com/products/tech-support">&#8220;Tech Support Flowchart&#8221; t-shirt</a></li>
<li><a href="http://www.thinkgeek.com/product/aaa5/?pfm=computing_featured_aaa5_2">Bag of Holding</a></li>
<li><a href="http://www.thinkgeek.com/product/c3bd/">Darth Vader USB Stick</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Huey, for Controlling Phillips Hue Lightbulbs]]></title>
    <link href="http://joshsymonds.com/blog/2012/11/28/huey-for-controlling-phillips-hue-lightbulbs/"/>
    <updated>2012-11-28T01:08:00-06:00</updated>
    <id>http://joshsymonds.com/blog/2012/11/28/huey-for-controlling-phillips-hue-lightbulbs</id>
    <content type="html"><![CDATA[<p>I just authored a cool little Gem that allows for automatic discovery of, and control over, the pretty nifty <a href="http://meethue.com">Phillips Hue lightbulbs</a>. I decided to name it <a href="https://github.com/Veraticus/huey">Huey</a>, since I love nothing more than cute and silly names. I only spent a few hours tonight hacking it together, so I&#8217;m sure there&#8217;s a lot of room for improvement, but it works and does everything it&#8217;s supposed to and seems fairly fault tolerant; so I thought, why not announce it and fix problems when I wake up tomorrow?</p>

<!-- more -->


<p>Huey uses <a href="http://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol">SSDP</a> to discover the IP of the Hue hub the first time the code is run. I wish I could take credit for the EventMachine code that went into making this work correctly, but actually I largely cribbed it from Turboladen&#8217;s <a href="https://github.com/turboladen/upnp">upnp library</a>. I would&#8217;ve just included it as a Gem dependency but for some reason it&#8217;s not released as a Gem, which is pretty frustrating for situations like this.</p>

<p>I chose a pretty boring UUID for Huey to use: <code>'0123456789abdcef0123456789abcdef'</code>. This works just fine, but if you want to change it Huey is ultra-configurable and you can do so either in a block or directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Huey</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="s1">&#39;0123456789abdcef0123456789abcdef&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># or</span>
</span><span class='line'>  <span class="no">Huey</span><span class="o">::</span><span class="no">Config</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="s1">&#39;0123456789abdcef0123456789abcdef&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first time you issue a request to the Hue hub, you&#8217;ll likely see an attractive error message like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Huey</span><span class="o">::</span><span class="no">Errors</span><span class="o">::</span><span class="no">PressLinkButton</span><span class="p">:</span> <span class="s1">&#39;Press the link button and try your request again&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, the first time any request is sent, Hue needs to validate the new client by you actually walking over and touching the link button on the hub. But once you do that, you can just resend the request and it should work fine. Then you can use the whole gamut of the Hue API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">all</span> <span class="c1"># Returns an array of your bulbs</span>
</span><span class='line'>
</span><span class='line'><span class="n">bulb</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># Finds the bulb with the ID of 1</span>
</span><span class='line'><span class="n">bulb</span> <span class="o">=</span> <span class="no">Huey</span><span class="o">::</span><span class="no">Bulb</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;Living Room&#39;</span><span class="p">)</span> <span class="c1"># Finds the bulb with the name &#39;Living Room&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">alert!</span> <span class="c1"># Flashes the bulb in question once, useful for checking connectivity</span>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">on</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1"># Turn the bulb off</span>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">bri</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1"># Dim the bulb a little bit</span>
</span><span class='line'><span class="n">bulb</span><span class="o">.</span><span class="n">ct</span> <span class="o">=</span> <span class="mi">500</span> <span class="c1"># Change the bulb&#39;s color</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think Huey is pretty cool and I definitely intend to make a lot of use out of it. I&#8217;ll be updating it constantly as I do so to support more and better features, so follow the repository and let me know what you think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Cache Counters in Rails]]></title>
    <link href="http://joshsymonds.com/blog/2012/10/29/dynamic-cache-counters-in-rails/"/>
    <updated>2012-10-29T17:55:00-05:00</updated>
    <id>http://joshsymonds.com/blog/2012/10/29/dynamic-cache-counters-in-rails</id>
    <content type="html"><![CDATA[<p>I spent a frustrating hour today searching for a way to do dynamic cache counters in Rails.</p>

<p>The problem is best summed up in a use case. I have a model called votes. A vote can be an upvote or a downvote; I set a column called <code>type</code> indicating what it is. Though I call the column <code>type</code> there&#8217;s no need for STI here &#8211; there&#8217;s really only one model, after all. However, it is polymorphic. You can vote up any kind of content on the site. I want to cache the number of upvotes and downvotes separately for that content. Unfortunately, the out-of-the-box Rails counter mechanism doesn&#8217;t let you do this. According to the <code>counter_cache</code> documentation, you must either specify <code>true</code> or the name of the column you&#8217;re caching under. You&#8217;re out of luck if you want to change it dynamically.</p>

<p>This, then, is the solution I came up with to allow dynamic cache counters.</p>

<!-- more -->


<p>The most ideal way to do this is to hook into the existing <a href="http://api.rubyonrails.org/classes/ActiveRecord/CounterCache.html">ActiveRecord CounterCache</a> module. Given that, the code is quite simple, really:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vote</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:voteable</span><span class="p">,</span> <span class="n">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">touch</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:increment_counters</span>
</span><span class='line'>  <span class="n">after_destroy</span> <span class="ss">:decrement_counters</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="ss">:increment</span><span class="p">,</span> <span class="ss">:decrement</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">type</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">_counters&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">voteable_type</span><span class="o">.</span><span class="n">classify</span><span class="o">.</span><span class="n">constantize</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">_counter&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">type</span><span class="si">}</span><span class="s2">votes_count&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">voteable_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The CounterCache module has two methods we care about here: <code>increment_counter</code> and <code>decrement_counter</code>. We manually trigger these methods on the parent object&#8217;s class after a vote is created or destroyed; note that I don&#8217;t intend to change the type of the vote, but if you do, you&#8217;ll also need an after_save callback to decrement one counter and increment another. So with these callbacks, if I have a vote with type <code>up</code>, it will call <code>increment_counter</code> on the column <code>upvotes_count</code> with the ID of the saving object.</p>

<p>This code assumes that the parent model will correctly have a counter column of the appropriate type defined.</p>

<p>Instead of this quasi-hack, I briefly investigated patching Rails to allow the <code>counter_cache</code> option to accept a lambda or proc, but doing so would have involved a lot of changes and would probably be stuck forever in Github issues. This change, while not exactly as clean and portable, does the job with a minimum of fuss.</p>
]]></content>
  </entry>
  
</feed>
